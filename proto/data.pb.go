// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: data.proto

package gotiktoklive

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Common_IMDispatchStrategy int32

const (
	Common_IM_DISPATCH_STRATEGY_DEFAULT               Common_IMDispatchStrategy = 0
	Common_IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE Common_IMDispatchStrategy = 1
)

// Enum value maps for Common_IMDispatchStrategy.
var (
	Common_IMDispatchStrategy_name = map[int32]string{
		0: "IM_DISPATCH_STRATEGY_DEFAULT",
		1: "IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE",
	}
	Common_IMDispatchStrategy_value = map[string]int32{
		"IM_DISPATCH_STRATEGY_DEFAULT":               0,
		"IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE": 1,
	}
)

func (x Common_IMDispatchStrategy) Enum() *Common_IMDispatchStrategy {
	p := new(Common_IMDispatchStrategy)
	*p = x
	return p
}

func (x Common_IMDispatchStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Common_IMDispatchStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[0].Descriptor()
}

func (Common_IMDispatchStrategy) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[0]
}

func (x Common_IMDispatchStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Common_IMDispatchStrategy.Descriptor instead.
func (Common_IMDispatchStrategy) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 0}
}

type BadgeStruct_DataCase int32

const (
	BadgeStruct_DATA_NOT_SET BadgeStruct_DataCase = 0
	BadgeStruct_IMAGE        BadgeStruct_DataCase = 20
	BadgeStruct_TEXT         BadgeStruct_DataCase = 21
	BadgeStruct_STR          BadgeStruct_DataCase = 22
	BadgeStruct_COMBINE      BadgeStruct_DataCase = 23
)

// Enum value maps for BadgeStruct_DataCase.
var (
	BadgeStruct_DataCase_name = map[int32]string{
		0:  "DATA_NOT_SET",
		20: "IMAGE",
		21: "TEXT",
		22: "STR",
		23: "COMBINE",
	}
	BadgeStruct_DataCase_value = map[string]int32{
		"DATA_NOT_SET": 0,
		"IMAGE":        20,
		"TEXT":         21,
		"STR":          22,
		"COMBINE":      23,
	}
)

func (x BadgeStruct_DataCase) Enum() *BadgeStruct_DataCase {
	p := new(BadgeStruct_DataCase)
	*p = x
	return p
}

func (x BadgeStruct_DataCase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeStruct_DataCase) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[1].Descriptor()
}

func (BadgeStruct_DataCase) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[1]
}

func (x BadgeStruct_DataCase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeStruct_DataCase.Descriptor instead.
func (BadgeStruct_DataCase) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 0}
}

type BadgeStruct_BadgeDisplayType int32

const (
	BadgeStruct_BADGEDISPLAYTYPE_UNKNOWN BadgeStruct_BadgeDisplayType = 0
	BadgeStruct_BADGEDISPLAYTYPE_IMAGE   BadgeStruct_BadgeDisplayType = 1
	BadgeStruct_BADGEDISPLAYTYPE_TEXT    BadgeStruct_BadgeDisplayType = 2
	BadgeStruct_BADGEDISPLAYTYPE_STRING  BadgeStruct_BadgeDisplayType = 3
	BadgeStruct_BADGEDISPLAYTYPE_COMBINE BadgeStruct_BadgeDisplayType = 4
)

// Enum value maps for BadgeStruct_BadgeDisplayType.
var (
	BadgeStruct_BadgeDisplayType_name = map[int32]string{
		0: "BADGEDISPLAYTYPE_UNKNOWN",
		1: "BADGEDISPLAYTYPE_IMAGE",
		2: "BADGEDISPLAYTYPE_TEXT",
		3: "BADGEDISPLAYTYPE_STRING",
		4: "BADGEDISPLAYTYPE_COMBINE",
	}
	BadgeStruct_BadgeDisplayType_value = map[string]int32{
		"BADGEDISPLAYTYPE_UNKNOWN": 0,
		"BADGEDISPLAYTYPE_IMAGE":   1,
		"BADGEDISPLAYTYPE_TEXT":    2,
		"BADGEDISPLAYTYPE_STRING":  3,
		"BADGEDISPLAYTYPE_COMBINE": 4,
	}
)

func (x BadgeStruct_BadgeDisplayType) Enum() *BadgeStruct_BadgeDisplayType {
	p := new(BadgeStruct_BadgeDisplayType)
	*p = x
	return p
}

func (x BadgeStruct_BadgeDisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeStruct_BadgeDisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[2].Descriptor()
}

func (BadgeStruct_BadgeDisplayType) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[2]
}

func (x BadgeStruct_BadgeDisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeStruct_BadgeDisplayType.Descriptor instead.
func (BadgeStruct_BadgeDisplayType) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 1}
}

type BadgeStruct_Position int32

const (
	BadgeStruct_POSITIONUNKNOWN BadgeStruct_Position = 0
	BadgeStruct_POSITIONLEFT    BadgeStruct_Position = 1
	BadgeStruct_POSITIONRIGHT   BadgeStruct_Position = 2
)

// Enum value maps for BadgeStruct_Position.
var (
	BadgeStruct_Position_name = map[int32]string{
		0: "POSITIONUNKNOWN",
		1: "POSITIONLEFT",
		2: "POSITIONRIGHT",
	}
	BadgeStruct_Position_value = map[string]int32{
		"POSITIONUNKNOWN": 0,
		"POSITIONLEFT":    1,
		"POSITIONRIGHT":   2,
	}
)

func (x BadgeStruct_Position) Enum() *BadgeStruct_Position {
	p := new(BadgeStruct_Position)
	*p = x
	return p
}

func (x BadgeStruct_Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeStruct_Position) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[3].Descriptor()
}

func (BadgeStruct_Position) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[3]
}

func (x BadgeStruct_Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeStruct_Position.Descriptor instead.
func (BadgeStruct_Position) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 2}
}

// @EventPayMethod
// webcast.data.LiveEventInfo
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_LiveEventInfo_EventPayMethod int32

const (
	User_LiveEventInfo_EVENTPAYMETHODINVALID User_LiveEventInfo_EventPayMethod = 0
	User_LiveEventInfo_EVENTPAYMETHODCOINS   User_LiveEventInfo_EventPayMethod = 1
	User_LiveEventInfo_EVENTPAYMETHODCASH    User_LiveEventInfo_EventPayMethod = 2
)

// Enum value maps for User_LiveEventInfo_EventPayMethod.
var (
	User_LiveEventInfo_EventPayMethod_name = map[int32]string{
		0: "EVENTPAYMETHODINVALID",
		1: "EVENTPAYMETHODCOINS",
		2: "EVENTPAYMETHODCASH",
	}
	User_LiveEventInfo_EventPayMethod_value = map[string]int32{
		"EVENTPAYMETHODINVALID": 0,
		"EVENTPAYMETHODCOINS":   1,
		"EVENTPAYMETHODCASH":    2,
	}
)

func (x User_LiveEventInfo_EventPayMethod) Enum() *User_LiveEventInfo_EventPayMethod {
	p := new(User_LiveEventInfo_EventPayMethod)
	*p = x
	return p
}

func (x User_LiveEventInfo_EventPayMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_LiveEventInfo_EventPayMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[4].Descriptor()
}

func (User_LiveEventInfo_EventPayMethod) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[4]
}

func (x User_LiveEventInfo_EventPayMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_LiveEventInfo_EventPayMethod.Descriptor instead.
func (User_LiveEventInfo_EventPayMethod) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 0, 0}
}

// @CreatorType
// webcast.data.User.EcommerceEntrance
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_CreatorType int32

const (
	User_EcommerceEntrance_UNDEFINED User_EcommerceEntrance_CreatorType = 0
	User_EcommerceEntrance_OFFICIAL  User_EcommerceEntrance_CreatorType = 1
	User_EcommerceEntrance_MARKET    User_EcommerceEntrance_CreatorType = 2
	User_EcommerceEntrance_NORMAL    User_EcommerceEntrance_CreatorType = 3
)

// Enum value maps for User_EcommerceEntrance_CreatorType.
var (
	User_EcommerceEntrance_CreatorType_name = map[int32]string{
		0: "UNDEFINED",
		1: "OFFICIAL",
		2: "MARKET",
		3: "NORMAL",
	}
	User_EcommerceEntrance_CreatorType_value = map[string]int32{
		"UNDEFINED": 0,
		"OFFICIAL":  1,
		"MARKET":    2,
		"NORMAL":    3,
	}
)

func (x User_EcommerceEntrance_CreatorType) Enum() *User_EcommerceEntrance_CreatorType {
	p := new(User_EcommerceEntrance_CreatorType)
	*p = x
	return p
}

func (x User_EcommerceEntrance_CreatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_EcommerceEntrance_CreatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[5].Descriptor()
}

func (User_EcommerceEntrance_CreatorType) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[5]
}

func (x User_EcommerceEntrance_CreatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_EcommerceEntrance_CreatorType.Descriptor instead.
func (User_EcommerceEntrance_CreatorType) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 0}
}

// @EntranceType
// webcast.data.User.EcommerceEntrance
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_EntranceType int32

const (
	User_EcommerceEntrance_PROFILE  User_EcommerceEntrance_EntranceType = 0
	User_EcommerceEntrance_SHOWCASE User_EcommerceEntrance_EntranceType = 1
	User_EcommerceEntrance_SHOP     User_EcommerceEntrance_EntranceType = 2
)

// Enum value maps for User_EcommerceEntrance_EntranceType.
var (
	User_EcommerceEntrance_EntranceType_name = map[int32]string{
		0: "PROFILE",
		1: "SHOWCASE",
		2: "SHOP",
	}
	User_EcommerceEntrance_EntranceType_value = map[string]int32{
		"PROFILE":  0,
		"SHOWCASE": 1,
		"SHOP":     2,
	}
)

func (x User_EcommerceEntrance_EntranceType) Enum() *User_EcommerceEntrance_EntranceType {
	p := new(User_EcommerceEntrance_EntranceType)
	*p = x
	return p
}

func (x User_EcommerceEntrance_EntranceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_EcommerceEntrance_EntranceType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[6].Descriptor()
}

func (User_EcommerceEntrance_EntranceType) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[6]
}

func (x User_EcommerceEntrance_EntranceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_EcommerceEntrance_EntranceType.Descriptor instead.
func (User_EcommerceEntrance_EntranceType) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 1}
}

// @StoreBrandLabelType
// webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType int32

const (
	User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_NONE                              User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = 0
	User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_OFFICIAL                          User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = 1
	User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_AUTHORIZED                        User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = 2
	User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_STORE_BRAND_LABEL_TYPE_BLUE_V     User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = 3
	User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_STORE_BRAND_LABEL_TYPE_TOP_CHOICE User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = 4
)

// Enum value maps for User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.
var (
	User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType_name = map[int32]string{
		0: "NONE",
		1: "OFFICIAL",
		2: "AUTHORIZED",
		3: "STORE_BRAND_LABEL_TYPE_BLUE_V",
		4: "STORE_BRAND_LABEL_TYPE_TOP_CHOICE",
	}
	User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType_value = map[string]int32{
		"NONE":                              0,
		"OFFICIAL":                          1,
		"AUTHORIZED":                        2,
		"STORE_BRAND_LABEL_TYPE_BLUE_V":     3,
		"STORE_BRAND_LABEL_TYPE_TOP_CHOICE": 4,
	}
)

func (x User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType) Enum() *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType {
	p := new(User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType)
	*p = x
	return p
}

func (x User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[7].Descriptor()
}

func (User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[7]
}

func (x User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.Descriptor instead.
func (User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 0, 0, 0}
}

// @PreferntialType
// webcast.data.User.FansClub
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_FansClub_PreferntialType int32

const (
	User_FansClub_PRESONALPROFILE User_FansClub_PreferntialType = 0
	User_FansClub_OTHERROOM       User_FansClub_PreferntialType = 1
)

// Enum value maps for User_FansClub_PreferntialType.
var (
	User_FansClub_PreferntialType_name = map[int32]string{
		0: "PRESONALPROFILE",
		1: "OTHERROOM",
	}
	User_FansClub_PreferntialType_value = map[string]int32{
		"PRESONALPROFILE": 0,
		"OTHERROOM":       1,
	}
)

func (x User_FansClub_PreferntialType) Enum() *User_FansClub_PreferntialType {
	p := new(User_FansClub_PreferntialType)
	*p = x
	return p
}

func (x User_FansClub_PreferntialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_FansClub_PreferntialType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[8].Descriptor()
}

func (User_FansClub_PreferntialType) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[8]
}

func (x User_FansClub_PreferntialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_FansClub_PreferntialType.Descriptor instead.
func (User_FansClub_PreferntialType) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 8, 0}
}

// @BadgeIcon
// webcast.data.User.FansClub.FansClubData
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_FansClub_FansClubData_BadgeIcon int32

const (
	User_FansClub_FansClubData_UNKNOWN   User_FansClub_FansClubData_BadgeIcon = 0
	User_FansClub_FansClubData_ICON      User_FansClub_FansClubData_BadgeIcon = 1
	User_FansClub_FansClubData_SMALLICON User_FansClub_FansClubData_BadgeIcon = 2
)

// Enum value maps for User_FansClub_FansClubData_BadgeIcon.
var (
	User_FansClub_FansClubData_BadgeIcon_name = map[int32]string{
		0: "UNKNOWN",
		1: "ICON",
		2: "SMALLICON",
	}
	User_FansClub_FansClubData_BadgeIcon_value = map[string]int32{
		"UNKNOWN":   0,
		"ICON":      1,
		"SMALLICON": 2,
	}
)

func (x User_FansClub_FansClubData_BadgeIcon) Enum() *User_FansClub_FansClubData_BadgeIcon {
	p := new(User_FansClub_FansClubData_BadgeIcon)
	*p = x
	return p
}

func (x User_FansClub_FansClubData_BadgeIcon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_FansClub_FansClubData_BadgeIcon) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[9].Descriptor()
}

func (User_FansClub_FansClubData_BadgeIcon) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[9]
}

func (x User_FansClub_FansClubData_BadgeIcon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_FansClub_FansClubData_BadgeIcon.Descriptor instead.
func (User_FansClub_FansClubData_BadgeIcon) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 8, 0, 0}
}

// @UserFansClubStatus
// webcast.data.User.FansClub.FansClubData
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_FansClub_FansClubData_UserFansClubStatus int32

const (
	User_FansClub_FansClubData_NOTJOINED User_FansClub_FansClubData_UserFansClubStatus = 0
	User_FansClub_FansClubData_ACTIVE    User_FansClub_FansClubData_UserFansClubStatus = 1
	User_FansClub_FansClubData_INACTIVE  User_FansClub_FansClubData_UserFansClubStatus = 2
)

// Enum value maps for User_FansClub_FansClubData_UserFansClubStatus.
var (
	User_FansClub_FansClubData_UserFansClubStatus_name = map[int32]string{
		0: "NOTJOINED",
		1: "ACTIVE",
		2: "INACTIVE",
	}
	User_FansClub_FansClubData_UserFansClubStatus_value = map[string]int32{
		"NOTJOINED": 0,
		"ACTIVE":    1,
		"INACTIVE":  2,
	}
)

func (x User_FansClub_FansClubData_UserFansClubStatus) Enum() *User_FansClub_FansClubData_UserFansClubStatus {
	p := new(User_FansClub_FansClubData_UserFansClubStatus)
	*p = x
	return p
}

func (x User_FansClub_FansClubData_UserFansClubStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_FansClub_FansClubData_UserFansClubStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[10].Descriptor()
}

func (User_FansClub_FansClubData_UserFansClubStatus) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[10]
}

func (x User_FansClub_FansClubData_UserFansClubStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_FansClub_FansClubData_UserFansClubStatus.Descriptor instead.
func (User_FansClub_FansClubData_UserFansClubStatus) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 8, 0, 1}
}

type ListUser_LinkType int32

const (
	ListUser_LINK_UNKNOWN ListUser_LinkType = 0
	ListUser_AUDIO        ListUser_LinkType = 1
	ListUser_VIDEO        ListUser_LinkType = 2
)

// Enum value maps for ListUser_LinkType.
var (
	ListUser_LinkType_name = map[int32]string{
		0: "LINK_UNKNOWN",
		1: "AUDIO",
		2: "VIDEO",
	}
	ListUser_LinkType_value = map[string]int32{
		"LINK_UNKNOWN": 0,
		"AUDIO":        1,
		"VIDEO":        2,
	}
)

func (x ListUser_LinkType) Enum() *ListUser_LinkType {
	p := new(ListUser_LinkType)
	*p = x
	return p
}

func (x ListUser_LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUser_LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[11].Descriptor()
}

func (ListUser_LinkType) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[11]
}

func (x ListUser_LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUser_LinkType.Descriptor instead.
func (ListUser_LinkType) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{30, 0}
}

// @Common
type Common struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method               string                    `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	MsgId                int64                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	RoomId               int64                     `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	CreateTime           int64                     `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Monitor              int32                     `protobuf:"varint,5,opt,name=monitor,proto3" json:"monitor,omitempty"`
	IsShowMsg            bool                      `protobuf:"varint,6,opt,name=isShowMsg,proto3" json:"isShowMsg,omitempty"`
	Describe             string                    `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	DisplayText          *Text                     `protobuf:"bytes,8,opt,name=displayText,proto3" json:"displayText,omitempty"`
	FoldType             int64                     `protobuf:"varint,9,opt,name=foldType,proto3" json:"foldType,omitempty"`
	AnchorFoldType       int64                     `protobuf:"varint,10,opt,name=anchorFoldType,proto3" json:"anchorFoldType,omitempty"`
	PriorityScore        int64                     `protobuf:"varint,11,opt,name=priorityScore,proto3" json:"priorityScore,omitempty"`
	LogId                string                    `protobuf:"bytes,12,opt,name=logId,proto3" json:"logId,omitempty"`
	MsgProcessFilterK    string                    `protobuf:"bytes,13,opt,name=msgProcessFilterK,proto3" json:"msgProcessFilterK,omitempty"`
	MsgProcessFilterV    string                    `protobuf:"bytes,14,opt,name=msgProcessFilterV,proto3" json:"msgProcessFilterV,omitempty"`
	FromIdc              string                    `protobuf:"bytes,15,opt,name=fromIdc,proto3" json:"fromIdc,omitempty"`
	ToIdc                string                    `protobuf:"bytes,16,opt,name=toIdc,proto3" json:"toIdc,omitempty"`
	FilterMsgTagsList    []string                  `protobuf:"bytes,17,rep,name=filterMsgTagsList,proto3" json:"filterMsgTagsList,omitempty"`
	Sei                  *Common_LiveMessageSEI    `protobuf:"bytes,18,opt,name=sei,proto3" json:"sei,omitempty"`
	DependRootId         *Common_LiveMessageID     `protobuf:"bytes,19,opt,name=dependRootId,proto3" json:"dependRootId,omitempty"`
	DependId             *Common_LiveMessageID     `protobuf:"bytes,20,opt,name=dependId,proto3" json:"dependId,omitempty"`
	AnchorPriorityScore  int64                     `protobuf:"varint,21,opt,name=anchorPriorityScore,proto3" json:"anchorPriorityScore,omitempty"`
	RoomMessageHeatLevel int64                     `protobuf:"varint,22,opt,name=roomMessageHeatLevel,proto3" json:"roomMessageHeatLevel,omitempty"`
	FoldTypeForWeb       int64                     `protobuf:"varint,23,opt,name=foldTypeForWeb,proto3" json:"foldTypeForWeb,omitempty"`
	AnchorFoldTypeForWeb int64                     `protobuf:"varint,24,opt,name=anchorFoldTypeForWeb,proto3" json:"anchorFoldTypeForWeb,omitempty"`
	ClientSendTime       int64                     `protobuf:"varint,25,opt,name=clientSendTime,proto3" json:"clientSendTime,omitempty"`
	DispatchStrategy     Common_IMDispatchStrategy `protobuf:"varint,26,opt,name=dispatchStrategy,proto3,enum=Common_IMDispatchStrategy" json:"dispatchStrategy,omitempty"` // Enum
}

func (x *Common) Reset() {
	*x = Common{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Common) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Common) ProtoMessage() {}

func (x *Common) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Common.ProtoReflect.Descriptor instead.
func (*Common) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *Common) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Common) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *Common) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Common) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Common) GetMonitor() int32 {
	if x != nil {
		return x.Monitor
	}
	return 0
}

func (x *Common) GetIsShowMsg() bool {
	if x != nil {
		return x.IsShowMsg
	}
	return false
}

func (x *Common) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Common) GetDisplayText() *Text {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

func (x *Common) GetFoldType() int64 {
	if x != nil {
		return x.FoldType
	}
	return 0
}

func (x *Common) GetAnchorFoldType() int64 {
	if x != nil {
		return x.AnchorFoldType
	}
	return 0
}

func (x *Common) GetPriorityScore() int64 {
	if x != nil {
		return x.PriorityScore
	}
	return 0
}

func (x *Common) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *Common) GetMsgProcessFilterK() string {
	if x != nil {
		return x.MsgProcessFilterK
	}
	return ""
}

func (x *Common) GetMsgProcessFilterV() string {
	if x != nil {
		return x.MsgProcessFilterV
	}
	return ""
}

func (x *Common) GetFromIdc() string {
	if x != nil {
		return x.FromIdc
	}
	return ""
}

func (x *Common) GetToIdc() string {
	if x != nil {
		return x.ToIdc
	}
	return ""
}

func (x *Common) GetFilterMsgTagsList() []string {
	if x != nil {
		return x.FilterMsgTagsList
	}
	return nil
}

func (x *Common) GetSei() *Common_LiveMessageSEI {
	if x != nil {
		return x.Sei
	}
	return nil
}

func (x *Common) GetDependRootId() *Common_LiveMessageID {
	if x != nil {
		return x.DependRootId
	}
	return nil
}

func (x *Common) GetDependId() *Common_LiveMessageID {
	if x != nil {
		return x.DependId
	}
	return nil
}

func (x *Common) GetAnchorPriorityScore() int64 {
	if x != nil {
		return x.AnchorPriorityScore
	}
	return 0
}

func (x *Common) GetRoomMessageHeatLevel() int64 {
	if x != nil {
		return x.RoomMessageHeatLevel
	}
	return 0
}

func (x *Common) GetFoldTypeForWeb() int64 {
	if x != nil {
		return x.FoldTypeForWeb
	}
	return 0
}

func (x *Common) GetAnchorFoldTypeForWeb() int64 {
	if x != nil {
		return x.AnchorFoldTypeForWeb
	}
	return 0
}

func (x *Common) GetClientSendTime() int64 {
	if x != nil {
		return x.ClientSendTime
	}
	return 0
}

func (x *Common) GetDispatchStrategy() Common_IMDispatchStrategy {
	if x != nil {
		return x.DispatchStrategy
	}
	return Common_IM_DISPATCH_STRATEGY_DEFAULT
}

// @Text
type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultPattern string            `protobuf:"bytes,2,opt,name=defaultPattern,proto3" json:"defaultPattern,omitempty"`
	DefaultFormat  *Text_TextFormat  `protobuf:"bytes,3,opt,name=defaultFormat,proto3" json:"defaultFormat,omitempty"`
	PiecesList     []*Text_TextPiece `protobuf:"bytes,4,rep,name=piecesList,proto3" json:"piecesList,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *Text) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Text) GetDefaultPattern() string {
	if x != nil {
		return x.DefaultPattern
	}
	return ""
}

func (x *Text) GetDefaultFormat() *Text_TextFormat {
	if x != nil {
		return x.DefaultFormat
	}
	return nil
}

func (x *Text) GetPiecesList() []*Text_TextPiece {
	if x != nil {
		return x.PiecesList
	}
	return nil
}

// @Image
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlList    []string `protobuf:"bytes,1,rep,name=urlList,proto3" json:"urlList,omitempty"`
	Extras     string   `protobuf:"bytes,2,opt,name=extras,proto3" json:"extras,omitempty"`
	IsAnimated bool     `protobuf:"varint,9,opt,name=isAnimated,proto3" json:"isAnimated,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *Image) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

func (x *Image) GetExtras() string {
	if x != nil {
		return x.Extras
	}
	return ""
}

func (x *Image) GetIsAnimated() bool {
	if x != nil {
		return x.IsAnimated
	}
	return false
}

// @Badge
type BadgeStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayType BadgeStruct_BadgeDisplayType `protobuf:"varint,1,opt,name=displayType,proto3,enum=BadgeStruct_BadgeDisplayType" json:"displayType,omitempty"` // Enum
	// Types that are assignable to BadgeType:
	//
	//	*BadgeStruct_Image
	//	*BadgeStruct_Text
	//	*BadgeStruct_Str
	//	*BadgeStruct_Combine
	BadgeType isBadgeStruct_BadgeType `protobuf_oneof:"badgeType"`
}

func (x *BadgeStruct) Reset() {
	*x = BadgeStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct) ProtoMessage() {}

func (x *BadgeStruct) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct.ProtoReflect.Descriptor instead.
func (*BadgeStruct) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *BadgeStruct) GetDisplayType() BadgeStruct_BadgeDisplayType {
	if x != nil {
		return x.DisplayType
	}
	return BadgeStruct_BADGEDISPLAYTYPE_UNKNOWN
}

func (m *BadgeStruct) GetBadgeType() isBadgeStruct_BadgeType {
	if m != nil {
		return m.BadgeType
	}
	return nil
}

func (x *BadgeStruct) GetImage() *BadgeStruct_ImageBadge {
	if x, ok := x.GetBadgeType().(*BadgeStruct_Image); ok {
		return x.Image
	}
	return nil
}

func (x *BadgeStruct) GetText() *BadgeStruct_TextBadge {
	if x, ok := x.GetBadgeType().(*BadgeStruct_Text); ok {
		return x.Text
	}
	return nil
}

func (x *BadgeStruct) GetStr() *BadgeStruct_StringBadge {
	if x, ok := x.GetBadgeType().(*BadgeStruct_Str); ok {
		return x.Str
	}
	return nil
}

func (x *BadgeStruct) GetCombine() *BadgeStruct_CombineBadge {
	if x, ok := x.GetBadgeType().(*BadgeStruct_Combine); ok {
		return x.Combine
	}
	return nil
}

type isBadgeStruct_BadgeType interface {
	isBadgeStruct_BadgeType()
}

type BadgeStruct_Image struct {
	Image *BadgeStruct_ImageBadge `protobuf:"bytes,20,opt,name=image,proto3,oneof"`
}

type BadgeStruct_Text struct {
	Text *BadgeStruct_TextBadge `protobuf:"bytes,21,opt,name=text,proto3,oneof"`
}

type BadgeStruct_Str struct {
	Str *BadgeStruct_StringBadge `protobuf:"bytes,22,opt,name=str,proto3,oneof"`
}

type BadgeStruct_Combine struct {
	Combine *BadgeStruct_CombineBadge `protobuf:"bytes,23,opt,name=combine,proto3,oneof"`
}

func (*BadgeStruct_Image) isBadgeStruct_BadgeType() {}

func (*BadgeStruct_Text) isBadgeStruct_BadgeType() {}

func (*BadgeStruct_Str) isBadgeStruct_BadgeType() {}

func (*BadgeStruct_Combine) isBadgeStruct_BadgeType() {}

// @Gift
type GiftStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image              *Image                      `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Describe           string                      `protobuf:"bytes,2,opt,name=describe,proto3" json:"describe,omitempty"`
	Duration           int64                       `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Id                 int64                       `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	ForLinkmic         bool                        `protobuf:"varint,7,opt,name=forLinkmic,proto3" json:"forLinkmic,omitempty"`
	Combo              bool                        `protobuf:"varint,10,opt,name=combo,proto3" json:"combo,omitempty"`
	Type               int32                       `protobuf:"varint,11,opt,name=type,proto3" json:"type,omitempty"`
	DiamondCount       int32                       `protobuf:"varint,12,opt,name=diamondCount,proto3" json:"diamondCount,omitempty"`
	IsDisplayedOnPanel bool                        `protobuf:"varint,13,opt,name=isDisplayedOnPanel,proto3" json:"isDisplayedOnPanel,omitempty"`
	PrimaryEffectId    int64                       `protobuf:"varint,14,opt,name=primaryEffectId,proto3" json:"primaryEffectId,omitempty"`
	GiftLabelIcon      *Image                      `protobuf:"bytes,15,opt,name=giftLabelIcon,proto3" json:"giftLabelIcon,omitempty"`
	Name               string                      `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Icon               *Image                      `protobuf:"bytes,21,opt,name=icon,proto3" json:"icon,omitempty"`
	GoldEffect         string                      `protobuf:"bytes,24,opt,name=goldEffect,proto3" json:"goldEffect,omitempty"`
	PreviewImage       *Image                      `protobuf:"bytes,47,opt,name=previewImage,proto3" json:"previewImage,omitempty"`
	GiftPanelBanner    *GiftStruct_GiftPanelBanner `protobuf:"bytes,48,opt,name=giftPanelBanner,proto3" json:"giftPanelBanner,omitempty"`
	IsBroadcastGift    bool                        `protobuf:"varint,49,opt,name=isBroadcastGift,proto3" json:"isBroadcastGift,omitempty"`
	IsEffectBefview    bool                        `protobuf:"varint,50,opt,name=isEffectBefview,proto3" json:"isEffectBefview,omitempty"`
	IsRandomGift       bool                        `protobuf:"varint,51,opt,name=isRandomGift,proto3" json:"isRandomGift,omitempty"`
	IsBoxGift          bool                        `protobuf:"varint,52,opt,name=isBoxGift,proto3" json:"isBoxGift,omitempty"`
	CanPutInGiftBox    bool                        `protobuf:"varint,53,opt,name=canPutInGiftBox,proto3" json:"canPutInGiftBox,omitempty"` // GiftBoxInfo giftBoxInfo = 54;
}

func (x *GiftStruct) Reset() {
	*x = GiftStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftStruct) ProtoMessage() {}

func (x *GiftStruct) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftStruct.ProtoReflect.Descriptor instead.
func (*GiftStruct) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *GiftStruct) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *GiftStruct) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GiftStruct) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GiftStruct) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiftStruct) GetForLinkmic() bool {
	if x != nil {
		return x.ForLinkmic
	}
	return false
}

func (x *GiftStruct) GetCombo() bool {
	if x != nil {
		return x.Combo
	}
	return false
}

func (x *GiftStruct) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GiftStruct) GetDiamondCount() int32 {
	if x != nil {
		return x.DiamondCount
	}
	return 0
}

func (x *GiftStruct) GetIsDisplayedOnPanel() bool {
	if x != nil {
		return x.IsDisplayedOnPanel
	}
	return false
}

func (x *GiftStruct) GetPrimaryEffectId() int64 {
	if x != nil {
		return x.PrimaryEffectId
	}
	return 0
}

func (x *GiftStruct) GetGiftLabelIcon() *Image {
	if x != nil {
		return x.GiftLabelIcon
	}
	return nil
}

func (x *GiftStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GiftStruct) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *GiftStruct) GetGoldEffect() string {
	if x != nil {
		return x.GoldEffect
	}
	return ""
}

func (x *GiftStruct) GetPreviewImage() *Image {
	if x != nil {
		return x.PreviewImage
	}
	return nil
}

func (x *GiftStruct) GetGiftPanelBanner() *GiftStruct_GiftPanelBanner {
	if x != nil {
		return x.GiftPanelBanner
	}
	return nil
}

func (x *GiftStruct) GetIsBroadcastGift() bool {
	if x != nil {
		return x.IsBroadcastGift
	}
	return false
}

func (x *GiftStruct) GetIsEffectBefview() bool {
	if x != nil {
		return x.IsEffectBefview
	}
	return false
}

func (x *GiftStruct) GetIsRandomGift() bool {
	if x != nil {
		return x.IsRandomGift
	}
	return false
}

func (x *GiftStruct) GetIsBoxGift() bool {
	if x != nil {
		return x.IsBoxGift
	}
	return false
}

func (x *GiftStruct) GetCanPutInGiftBox() bool {
	if x != nil {
		return x.CanPutInGiftBox
	}
	return false
}

// @User
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname                            string                   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	BioDescription                      string                   `protobuf:"bytes,5,opt,name=bioDescription,proto3" json:"bioDescription,omitempty"`
	AvatarThumb                         *Image                   `protobuf:"bytes,9,opt,name=avatarThumb,proto3" json:"avatarThumb,omitempty"`
	AvatarMedium                        *Image                   `protobuf:"bytes,10,opt,name=avatarMedium,proto3" json:"avatarMedium,omitempty"`
	AvatarLarge                         *Image                   `protobuf:"bytes,11,opt,name=avatarLarge,proto3" json:"avatarLarge,omitempty"`
	Verified                            bool                     `protobuf:"varint,12,opt,name=verified,proto3" json:"verified,omitempty"`
	Status                              int32                    `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime                          int64                    `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ModifyTime                          int64                    `protobuf:"varint,17,opt,name=modifyTime,proto3" json:"modifyTime,omitempty"`
	Secret                              int32                    `protobuf:"varint,18,opt,name=secret,proto3" json:"secret,omitempty"`
	ShareQrcodeUri                      string                   `protobuf:"bytes,19,opt,name=shareQrcodeUri,proto3" json:"shareQrcodeUri,omitempty"`
	BadgeImageList                      []*Image                 `protobuf:"bytes,21,rep,name=badgeImageList,proto3" json:"badgeImageList,omitempty"`
	FollowInfo                          *User_FollowInfo         `protobuf:"bytes,22,opt,name=followInfo,proto3" json:"followInfo,omitempty"`
	PayGrade                            *User_PayGrade           `protobuf:"bytes,23,opt,name=payGrade,proto3" json:"payGrade,omitempty"`
	FansClub                            *User_FansClub           `protobuf:"bytes,24,opt,name=fansClub,proto3" json:"fansClub,omitempty"`
	Border                              *User_Border             `protobuf:"bytes,25,opt,name=border,proto3" json:"border,omitempty"`
	SpecialId                           string                   `protobuf:"bytes,26,opt,name=specialId,proto3" json:"specialId,omitempty"`
	AvatarBorder                        *Image                   `protobuf:"bytes,27,opt,name=avatarBorder,proto3" json:"avatarBorder,omitempty"`
	Medal                               *Image                   `protobuf:"bytes,28,opt,name=medal,proto3" json:"medal,omitempty"`
	RealTimeIconsList                   []*Image                 `protobuf:"bytes,29,rep,name=realTimeIconsList,proto3" json:"realTimeIconsList,omitempty"`
	NewRealTimeIconsList                []*Image                 `protobuf:"bytes,30,rep,name=newRealTimeIconsList,proto3" json:"newRealTimeIconsList,omitempty"`
	TopVipNo                            int64                    `protobuf:"varint,31,opt,name=topVipNo,proto3" json:"topVipNo,omitempty"`
	UserAttr                            *User_UserAttr           `protobuf:"bytes,32,opt,name=userAttr,proto3" json:"userAttr,omitempty"`
	OwnRoom                             *User_OwnRoom            `protobuf:"bytes,33,opt,name=ownRoom,proto3" json:"ownRoom,omitempty"`
	PayScore                            int64                    `protobuf:"varint,34,opt,name=payScore,proto3" json:"payScore,omitempty"`
	TicketCount                         int64                    `protobuf:"varint,35,opt,name=ticketCount,proto3" json:"ticketCount,omitempty"`
	LinkMicStats                        LinkmicStatus            `protobuf:"varint,37,opt,name=linkMicStats,proto3,enum=LinkmicStatus" json:"linkMicStats,omitempty"`
	DisplayId                           string                   `protobuf:"bytes,38,opt,name=displayId,proto3" json:"displayId,omitempty"`
	WithCommercePermission              bool                     `protobuf:"varint,39,opt,name=withCommercePermission,proto3" json:"withCommercePermission,omitempty"`
	WithFusionShopEntry                 bool                     `protobuf:"varint,40,opt,name=withFusionShopEntry,proto3" json:"withFusionShopEntry,omitempty"`
	WebcastAnchorLevel                  *User_AnchorLevel        `protobuf:"bytes,42,opt,name=webcastAnchorLevel,proto3" json:"webcastAnchorLevel,omitempty"`
	VerifiedContent                     string                   `protobuf:"bytes,43,opt,name=verifiedContent,proto3" json:"verifiedContent,omitempty"`
	AuthorStats                         *User_AuthorStats        `protobuf:"bytes,44,opt,name=authorStats,proto3" json:"authorStats,omitempty"`
	TopFansList                         []*User                  `protobuf:"bytes,45,rep,name=topFansList,proto3" json:"topFansList,omitempty"`
	SecUid                              string                   `protobuf:"bytes,46,opt,name=secUid,proto3" json:"secUid,omitempty"`
	UserRole                            int32                    `protobuf:"varint,47,opt,name=userRole,proto3" json:"userRole,omitempty"`
	ActivityReward                      *User_ActivityInfo       `protobuf:"bytes,49,opt,name=activityReward,proto3" json:"activityReward,omitempty"`
	PersonalCard                        *Image                   `protobuf:"bytes,52,opt,name=personalCard,proto3" json:"personalCard,omitempty"`
	AuthenticationInfo                  *User_AuthenticationInfo `protobuf:"bytes,53,opt,name=authenticationInfo,proto3" json:"authenticationInfo,omitempty"`
	MediaBadgeImageList                 []*Image                 `protobuf:"bytes,57,rep,name=mediaBadgeImageList,proto3" json:"mediaBadgeImageList,omitempty"`
	CommerceWebcastConfigIdsList        []int64                  `protobuf:"varint,60,rep,packed,name=commerceWebcastConfigIdsList,proto3" json:"commerceWebcastConfigIdsList,omitempty"`
	BorderList                          []*User_Border           `protobuf:"bytes,61,rep,name=borderList,proto3" json:"borderList,omitempty"`
	ComboBadgeInfo                      *User_ComboBadgeInfo     `protobuf:"bytes,62,opt,name=comboBadgeInfo,proto3" json:"comboBadgeInfo,omitempty"`
	SubscribeInfo                       *User_SubscribeInfo      `protobuf:"bytes,63,opt,name=subscribeInfo,proto3" json:"subscribeInfo,omitempty"`
	BadgeList                           []*BadgeStruct           `protobuf:"bytes,64,rep,name=badgeList,proto3" json:"badgeList,omitempty"`
	MintTypeLabelList                   []int64                  `protobuf:"varint,65,rep,packed,name=mintTypeLabelList,proto3" json:"mintTypeLabelList,omitempty"`
	FansClubInfo                        *User_FansClubInfo       `protobuf:"bytes,66,opt,name=fansClubInfo,proto3" json:"fansClubInfo,omitempty"`
	AllowFindByContacts                 bool                     `protobuf:"varint,1002,opt,name=allowFindByContacts,proto3" json:"allowFindByContacts,omitempty"`
	AllowOthersDownloadVideo            bool                     `protobuf:"varint,1003,opt,name=allowOthersDownloadVideo,proto3" json:"allowOthersDownloadVideo,omitempty"`
	AllowOthersDownloadWhenSharingVideo bool                     `protobuf:"varint,1004,opt,name=allowOthersDownloadWhenSharingVideo,proto3" json:"allowOthersDownloadWhenSharingVideo,omitempty"`
	AllowShareShowProfile               bool                     `protobuf:"varint,1005,opt,name=allowShareShowProfile,proto3" json:"allowShareShowProfile,omitempty"`
	AllowShowInGossip                   bool                     `protobuf:"varint,1006,opt,name=allowShowInGossip,proto3" json:"allowShowInGossip,omitempty"`
	AllowShowMyAction                   bool                     `protobuf:"varint,1007,opt,name=allowShowMyAction,proto3" json:"allowShowMyAction,omitempty"`
	AllowStrangeComment                 bool                     `protobuf:"varint,1008,opt,name=allowStrangeComment,proto3" json:"allowStrangeComment,omitempty"`
	AllowUnfollowerComment              bool                     `protobuf:"varint,1009,opt,name=allowUnfollowerComment,proto3" json:"allowUnfollowerComment,omitempty"`
	AllowUseLinkmic                     bool                     `protobuf:"varint,1010,opt,name=allowUseLinkmic,proto3" json:"allowUseLinkmic,omitempty"`
	AnchorLevel                         *User_AnchorLevel        `protobuf:"bytes,1011,opt,name=anchorLevel,proto3" json:"anchorLevel,omitempty"`
	AvatarJpg                           *Image                   `protobuf:"bytes,1012,opt,name=avatarJpg,proto3" json:"avatarJpg,omitempty"`
	BgImgUrl                            string                   `protobuf:"bytes,1013,opt,name=bgImgUrl,proto3" json:"bgImgUrl,omitempty"`
	BlockStatus                         int32                    `protobuf:"varint,1016,opt,name=blockStatus,proto3" json:"blockStatus,omitempty"`
	CommentRestrict                     int32                    `protobuf:"varint,1017,opt,name=commentRestrict,proto3" json:"commentRestrict,omitempty"`
	Constellation                       string                   `protobuf:"bytes,1018,opt,name=constellation,proto3" json:"constellation,omitempty"`
	DisableIchat                        int32                    `protobuf:"varint,1019,opt,name=disableIchat,proto3" json:"disableIchat,omitempty"`
	EnableIchatImg                      int64                    `protobuf:"varint,1020,opt,name=enableIchatImg,proto3" json:"enableIchatImg,omitempty"`
	Exp                                 int32                    `protobuf:"varint,1021,opt,name=exp,proto3" json:"exp,omitempty"`
	FanTicketCount                      int64                    `protobuf:"varint,1022,opt,name=fanTicketCount,proto3" json:"fanTicketCount,omitempty"`
	FoldStrangerChat                    bool                     `protobuf:"varint,1023,opt,name=foldStrangerChat,proto3" json:"foldStrangerChat,omitempty"`
	FollowStatus                        int64                    `protobuf:"varint,1024,opt,name=followStatus,proto3" json:"followStatus,omitempty"`
	IchatRestrictType                   int32                    `protobuf:"varint,1027,opt,name=ichatRestrictType,proto3" json:"ichatRestrictType,omitempty"`
	IdStr                               string                   `protobuf:"bytes,1028,opt,name=idStr,proto3" json:"idStr,omitempty"`
	IsFollower                          bool                     `protobuf:"varint,1029,opt,name=isFollower,proto3" json:"isFollower,omitempty"`
	IsFollowing                         bool                     `protobuf:"varint,1030,opt,name=isFollowing,proto3" json:"isFollowing,omitempty"`
	NeedProfileGuide                    bool                     `protobuf:"varint,1031,opt,name=needProfileGuide,proto3" json:"needProfileGuide,omitempty"`
	PayScores                           int64                    `protobuf:"varint,1032,opt,name=payScores,proto3" json:"payScores,omitempty"`
	PushCommentStatus                   bool                     `protobuf:"varint,1033,opt,name=pushCommentStatus,proto3" json:"pushCommentStatus,omitempty"`
	PushDigg                            bool                     `protobuf:"varint,1034,opt,name=pushDigg,proto3" json:"pushDigg,omitempty"`
	PushFollow                          bool                     `protobuf:"varint,1035,opt,name=pushFollow,proto3" json:"pushFollow,omitempty"`
	PushFriendAction                    bool                     `protobuf:"varint,1036,opt,name=pushFriendAction,proto3" json:"pushFriendAction,omitempty"`
	PushIchat                           bool                     `protobuf:"varint,1037,opt,name=pushIchat,proto3" json:"pushIchat,omitempty"`
	PushStatus                          bool                     `protobuf:"varint,1038,opt,name=pushStatus,proto3" json:"pushStatus,omitempty"`
	PushVideoPost                       bool                     `protobuf:"varint,1039,opt,name=pushVideoPost,proto3" json:"pushVideoPost,omitempty"`
	PushVideoRecommend                  bool                     `protobuf:"varint,1040,opt,name=pushVideoRecommend,proto3" json:"pushVideoRecommend,omitempty"`
	Stats                               *User_UserStats          `protobuf:"bytes,1041,opt,name=stats,proto3" json:"stats,omitempty"`
	VerifiedReason                      string                   `protobuf:"bytes,1043,opt,name=verifiedReason,proto3" json:"verifiedReason,omitempty"`
	WithCarManagementPermission         bool                     `protobuf:"varint,1044,opt,name=withCarManagementPermission,proto3" json:"withCarManagementPermission,omitempty"`
	UpcomingEventList                   []*User_LiveEventInfo    `protobuf:"bytes,1045,rep,name=upcomingEventList,proto3" json:"upcomingEventList,omitempty"`
	ScmLabel                            string                   `protobuf:"bytes,1046,opt,name=scmLabel,proto3" json:"scmLabel,omitempty"`
	EcommerceEntrance                   *User_EcommerceEntrance  `protobuf:"bytes,1047,opt,name=ecommerceEntrance,proto3" json:"ecommerceEntrance,omitempty"`
	IsBlock                             bool                     `protobuf:"varint,1048,opt,name=isBlock,proto3" json:"isBlock,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetBioDescription() string {
	if x != nil {
		return x.BioDescription
	}
	return ""
}

func (x *User) GetAvatarThumb() *Image {
	if x != nil {
		return x.AvatarThumb
	}
	return nil
}

func (x *User) GetAvatarMedium() *Image {
	if x != nil {
		return x.AvatarMedium
	}
	return nil
}

func (x *User) GetAvatarLarge() *Image {
	if x != nil {
		return x.AvatarLarge
	}
	return nil
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *User) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *User) GetModifyTime() int64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *User) GetSecret() int32 {
	if x != nil {
		return x.Secret
	}
	return 0
}

func (x *User) GetShareQrcodeUri() string {
	if x != nil {
		return x.ShareQrcodeUri
	}
	return ""
}

func (x *User) GetBadgeImageList() []*Image {
	if x != nil {
		return x.BadgeImageList
	}
	return nil
}

func (x *User) GetFollowInfo() *User_FollowInfo {
	if x != nil {
		return x.FollowInfo
	}
	return nil
}

func (x *User) GetPayGrade() *User_PayGrade {
	if x != nil {
		return x.PayGrade
	}
	return nil
}

func (x *User) GetFansClub() *User_FansClub {
	if x != nil {
		return x.FansClub
	}
	return nil
}

func (x *User) GetBorder() *User_Border {
	if x != nil {
		return x.Border
	}
	return nil
}

func (x *User) GetSpecialId() string {
	if x != nil {
		return x.SpecialId
	}
	return ""
}

func (x *User) GetAvatarBorder() *Image {
	if x != nil {
		return x.AvatarBorder
	}
	return nil
}

func (x *User) GetMedal() *Image {
	if x != nil {
		return x.Medal
	}
	return nil
}

func (x *User) GetRealTimeIconsList() []*Image {
	if x != nil {
		return x.RealTimeIconsList
	}
	return nil
}

func (x *User) GetNewRealTimeIconsList() []*Image {
	if x != nil {
		return x.NewRealTimeIconsList
	}
	return nil
}

func (x *User) GetTopVipNo() int64 {
	if x != nil {
		return x.TopVipNo
	}
	return 0
}

func (x *User) GetUserAttr() *User_UserAttr {
	if x != nil {
		return x.UserAttr
	}
	return nil
}

func (x *User) GetOwnRoom() *User_OwnRoom {
	if x != nil {
		return x.OwnRoom
	}
	return nil
}

func (x *User) GetPayScore() int64 {
	if x != nil {
		return x.PayScore
	}
	return 0
}

func (x *User) GetTicketCount() int64 {
	if x != nil {
		return x.TicketCount
	}
	return 0
}

func (x *User) GetLinkMicStats() LinkmicStatus {
	if x != nil {
		return x.LinkMicStats
	}
	return LinkmicStatus_Disable
}

func (x *User) GetDisplayId() string {
	if x != nil {
		return x.DisplayId
	}
	return ""
}

func (x *User) GetWithCommercePermission() bool {
	if x != nil {
		return x.WithCommercePermission
	}
	return false
}

func (x *User) GetWithFusionShopEntry() bool {
	if x != nil {
		return x.WithFusionShopEntry
	}
	return false
}

func (x *User) GetWebcastAnchorLevel() *User_AnchorLevel {
	if x != nil {
		return x.WebcastAnchorLevel
	}
	return nil
}

func (x *User) GetVerifiedContent() string {
	if x != nil {
		return x.VerifiedContent
	}
	return ""
}

func (x *User) GetAuthorStats() *User_AuthorStats {
	if x != nil {
		return x.AuthorStats
	}
	return nil
}

func (x *User) GetTopFansList() []*User {
	if x != nil {
		return x.TopFansList
	}
	return nil
}

func (x *User) GetSecUid() string {
	if x != nil {
		return x.SecUid
	}
	return ""
}

func (x *User) GetUserRole() int32 {
	if x != nil {
		return x.UserRole
	}
	return 0
}

func (x *User) GetActivityReward() *User_ActivityInfo {
	if x != nil {
		return x.ActivityReward
	}
	return nil
}

func (x *User) GetPersonalCard() *Image {
	if x != nil {
		return x.PersonalCard
	}
	return nil
}

func (x *User) GetAuthenticationInfo() *User_AuthenticationInfo {
	if x != nil {
		return x.AuthenticationInfo
	}
	return nil
}

func (x *User) GetMediaBadgeImageList() []*Image {
	if x != nil {
		return x.MediaBadgeImageList
	}
	return nil
}

func (x *User) GetCommerceWebcastConfigIdsList() []int64 {
	if x != nil {
		return x.CommerceWebcastConfigIdsList
	}
	return nil
}

func (x *User) GetBorderList() []*User_Border {
	if x != nil {
		return x.BorderList
	}
	return nil
}

func (x *User) GetComboBadgeInfo() *User_ComboBadgeInfo {
	if x != nil {
		return x.ComboBadgeInfo
	}
	return nil
}

func (x *User) GetSubscribeInfo() *User_SubscribeInfo {
	if x != nil {
		return x.SubscribeInfo
	}
	return nil
}

func (x *User) GetBadgeList() []*BadgeStruct {
	if x != nil {
		return x.BadgeList
	}
	return nil
}

func (x *User) GetMintTypeLabelList() []int64 {
	if x != nil {
		return x.MintTypeLabelList
	}
	return nil
}

func (x *User) GetFansClubInfo() *User_FansClubInfo {
	if x != nil {
		return x.FansClubInfo
	}
	return nil
}

func (x *User) GetAllowFindByContacts() bool {
	if x != nil {
		return x.AllowFindByContacts
	}
	return false
}

func (x *User) GetAllowOthersDownloadVideo() bool {
	if x != nil {
		return x.AllowOthersDownloadVideo
	}
	return false
}

func (x *User) GetAllowOthersDownloadWhenSharingVideo() bool {
	if x != nil {
		return x.AllowOthersDownloadWhenSharingVideo
	}
	return false
}

func (x *User) GetAllowShareShowProfile() bool {
	if x != nil {
		return x.AllowShareShowProfile
	}
	return false
}

func (x *User) GetAllowShowInGossip() bool {
	if x != nil {
		return x.AllowShowInGossip
	}
	return false
}

func (x *User) GetAllowShowMyAction() bool {
	if x != nil {
		return x.AllowShowMyAction
	}
	return false
}

func (x *User) GetAllowStrangeComment() bool {
	if x != nil {
		return x.AllowStrangeComment
	}
	return false
}

func (x *User) GetAllowUnfollowerComment() bool {
	if x != nil {
		return x.AllowUnfollowerComment
	}
	return false
}

func (x *User) GetAllowUseLinkmic() bool {
	if x != nil {
		return x.AllowUseLinkmic
	}
	return false
}

func (x *User) GetAnchorLevel() *User_AnchorLevel {
	if x != nil {
		return x.AnchorLevel
	}
	return nil
}

func (x *User) GetAvatarJpg() *Image {
	if x != nil {
		return x.AvatarJpg
	}
	return nil
}

func (x *User) GetBgImgUrl() string {
	if x != nil {
		return x.BgImgUrl
	}
	return ""
}

func (x *User) GetBlockStatus() int32 {
	if x != nil {
		return x.BlockStatus
	}
	return 0
}

func (x *User) GetCommentRestrict() int32 {
	if x != nil {
		return x.CommentRestrict
	}
	return 0
}

func (x *User) GetConstellation() string {
	if x != nil {
		return x.Constellation
	}
	return ""
}

func (x *User) GetDisableIchat() int32 {
	if x != nil {
		return x.DisableIchat
	}
	return 0
}

func (x *User) GetEnableIchatImg() int64 {
	if x != nil {
		return x.EnableIchatImg
	}
	return 0
}

func (x *User) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *User) GetFanTicketCount() int64 {
	if x != nil {
		return x.FanTicketCount
	}
	return 0
}

func (x *User) GetFoldStrangerChat() bool {
	if x != nil {
		return x.FoldStrangerChat
	}
	return false
}

func (x *User) GetFollowStatus() int64 {
	if x != nil {
		return x.FollowStatus
	}
	return 0
}

func (x *User) GetIchatRestrictType() int32 {
	if x != nil {
		return x.IchatRestrictType
	}
	return 0
}

func (x *User) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *User) GetIsFollower() bool {
	if x != nil {
		return x.IsFollower
	}
	return false
}

func (x *User) GetIsFollowing() bool {
	if x != nil {
		return x.IsFollowing
	}
	return false
}

func (x *User) GetNeedProfileGuide() bool {
	if x != nil {
		return x.NeedProfileGuide
	}
	return false
}

func (x *User) GetPayScores() int64 {
	if x != nil {
		return x.PayScores
	}
	return 0
}

func (x *User) GetPushCommentStatus() bool {
	if x != nil {
		return x.PushCommentStatus
	}
	return false
}

func (x *User) GetPushDigg() bool {
	if x != nil {
		return x.PushDigg
	}
	return false
}

func (x *User) GetPushFollow() bool {
	if x != nil {
		return x.PushFollow
	}
	return false
}

func (x *User) GetPushFriendAction() bool {
	if x != nil {
		return x.PushFriendAction
	}
	return false
}

func (x *User) GetPushIchat() bool {
	if x != nil {
		return x.PushIchat
	}
	return false
}

func (x *User) GetPushStatus() bool {
	if x != nil {
		return x.PushStatus
	}
	return false
}

func (x *User) GetPushVideoPost() bool {
	if x != nil {
		return x.PushVideoPost
	}
	return false
}

func (x *User) GetPushVideoRecommend() bool {
	if x != nil {
		return x.PushVideoRecommend
	}
	return false
}

func (x *User) GetStats() *User_UserStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *User) GetVerifiedReason() string {
	if x != nil {
		return x.VerifiedReason
	}
	return ""
}

func (x *User) GetWithCarManagementPermission() bool {
	if x != nil {
		return x.WithCarManagementPermission
	}
	return false
}

func (x *User) GetUpcomingEventList() []*User_LiveEventInfo {
	if x != nil {
		return x.UpcomingEventList
	}
	return nil
}

func (x *User) GetScmLabel() string {
	if x != nil {
		return x.ScmLabel
	}
	return ""
}

func (x *User) GetEcommerceEntrance() *User_EcommerceEntrance {
	if x != nil {
		return x.EcommerceEntrance
	}
	return nil
}

func (x *User) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

// @Emote
type Emote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmoteId          string           `protobuf:"bytes,1,opt,name=emoteId,proto3" json:"emoteId,omitempty"`
	Image            *Image           `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	AuditStatus      AuditStatus      `protobuf:"varint,3,opt,name=auditStatus,proto3,enum=AuditStatus" json:"auditStatus,omitempty"` // Enum
	Uuid             string           `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	EmoteType        EmoteType        `protobuf:"varint,5,opt,name=emoteType,proto3,enum=EmoteType" json:"emoteType,omitempty"`                      // Enum
	ContentSource    ContentSource    `protobuf:"varint,6,opt,name=contentSource,proto3,enum=ContentSource" json:"contentSource,omitempty"`          // Enum
	EmotePrivateType EmotePrivateType `protobuf:"varint,7,opt,name=emotePrivateType,proto3,enum=EmotePrivateType" json:"emotePrivateType,omitempty"` // Enum
}

func (x *Emote) Reset() {
	*x = Emote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emote) ProtoMessage() {}

func (x *Emote) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emote.ProtoReflect.Descriptor instead.
func (*Emote) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *Emote) GetEmoteId() string {
	if x != nil {
		return x.EmoteId
	}
	return ""
}

func (x *Emote) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Emote) GetAuditStatus() AuditStatus {
	if x != nil {
		return x.AuditStatus
	}
	return AuditStatus_AUDITSTATUSUNKNOWN
}

func (x *Emote) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Emote) GetEmoteType() EmoteType {
	if x != nil {
		return x.EmoteType
	}
	return EmoteType_EMOTETYPENORMAL
}

func (x *Emote) GetContentSource() ContentSource {
	if x != nil {
		return x.ContentSource
	}
	return ContentSource_CONTENTSOURCEUNKNOWN
}

func (x *Emote) GetEmotePrivateType() EmotePrivateType {
	if x != nil {
		return x.EmotePrivateType
	}
	return EmotePrivateType_EMOTE_PRIVATE_TYPE_NORMAL
}

// @PunishEventInfo
type PunishEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PunishType   string `protobuf:"bytes,1,opt,name=punishType,proto3" json:"punishType,omitempty"`
	PunishReason string `protobuf:"bytes,2,opt,name=punishReason,proto3" json:"punishReason,omitempty"`
	PunishId     string `protobuf:"bytes,3,opt,name=punishId,proto3" json:"punishId,omitempty"`
	ViolationUid int64  `protobuf:"varint,4,opt,name=violationUid,proto3" json:"violationUid,omitempty"`
	PunishTypeId int32  `protobuf:"varint,5,opt,name=punishTypeId,proto3" json:"punishTypeId,omitempty"` // Enum
	Duration     int64  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *PunishEventInfo) Reset() {
	*x = PunishEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PunishEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PunishEventInfo) ProtoMessage() {}

func (x *PunishEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PunishEventInfo.ProtoReflect.Descriptor instead.
func (*PunishEventInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *PunishEventInfo) GetPunishType() string {
	if x != nil {
		return x.PunishType
	}
	return ""
}

func (x *PunishEventInfo) GetPunishReason() string {
	if x != nil {
		return x.PunishReason
	}
	return ""
}

func (x *PunishEventInfo) GetPunishId() string {
	if x != nil {
		return x.PunishId
	}
	return ""
}

func (x *PunishEventInfo) GetViolationUid() int64 {
	if x != nil {
		return x.ViolationUid
	}
	return 0
}

func (x *PunishEventInfo) GetPunishTypeId() int32 {
	if x != nil {
		return x.PunishTypeId
	}
	return 0
}

func (x *PunishEventInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// @MsgFilter
type MsgFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsGifter             bool `protobuf:"varint,1,opt,name=isGifter,proto3" json:"isGifter,omitempty"`
	IsSubscribedToAnchor bool `protobuf:"varint,2,opt,name=isSubscribedToAnchor,proto3" json:"isSubscribedToAnchor,omitempty"`
}

func (x *MsgFilter) Reset() {
	*x = MsgFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFilter) ProtoMessage() {}

func (x *MsgFilter) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFilter.ProtoReflect.Descriptor instead.
func (*MsgFilter) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *MsgFilter) GetIsGifter() bool {
	if x != nil {
		return x.IsGifter
	}
	return false
}

func (x *MsgFilter) GetIsSubscribedToAnchor() bool {
	if x != nil {
		return x.IsSubscribedToAnchor
	}
	return false
}

// @UserIdentity
// proto.webcast.data
type UserIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsGiftGiverOfAnchor         bool `protobuf:"varint,1,opt,name=isGiftGiverOfAnchor,proto3" json:"isGiftGiverOfAnchor,omitempty"`
	IsSubscriberOfAnchor        bool `protobuf:"varint,2,opt,name=isSubscriberOfAnchor,proto3" json:"isSubscriberOfAnchor,omitempty"`
	IsMutualFollowingWithAnchor bool `protobuf:"varint,3,opt,name=isMutualFollowingWithAnchor,proto3" json:"isMutualFollowingWithAnchor,omitempty"`
	IsFollowerOfAnchor          bool `protobuf:"varint,4,opt,name=isFollowerOfAnchor,proto3" json:"isFollowerOfAnchor,omitempty"`
	IsModeratorOfAnchor         bool `protobuf:"varint,5,opt,name=isModeratorOfAnchor,proto3" json:"isModeratorOfAnchor,omitempty"`
	IsAnchor                    bool `protobuf:"varint,6,opt,name=isAnchor,proto3" json:"isAnchor,omitempty"`
}

func (x *UserIdentity) Reset() {
	*x = UserIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentity) ProtoMessage() {}

func (x *UserIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentity.ProtoReflect.Descriptor instead.
func (*UserIdentity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

func (x *UserIdentity) GetIsGiftGiverOfAnchor() bool {
	if x != nil {
		return x.IsGiftGiverOfAnchor
	}
	return false
}

func (x *UserIdentity) GetIsSubscriberOfAnchor() bool {
	if x != nil {
		return x.IsSubscriberOfAnchor
	}
	return false
}

func (x *UserIdentity) GetIsMutualFollowingWithAnchor() bool {
	if x != nil {
		return x.IsMutualFollowingWithAnchor
	}
	return false
}

func (x *UserIdentity) GetIsFollowerOfAnchor() bool {
	if x != nil {
		return x.IsFollowerOfAnchor
	}
	return false
}

func (x *UserIdentity) GetIsModeratorOfAnchor() bool {
	if x != nil {
		return x.IsModeratorOfAnchor
	}
	return false
}

func (x *UserIdentity) GetIsAnchor() bool {
	if x != nil {
		return x.IsAnchor
	}
	return false
}

// @Goal
// proto.webcast.data
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type Goal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// TextType type = 2; // Enum
	// GoalStatus status = 3; // Enum
	// repeated SubGoal subGoalsList = 4;
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	AuditStatus int32  `protobuf:"varint,6,opt,name=auditStatus,proto3" json:"auditStatus,omitempty"`
	// CycleType cycleType = 7; // Enum
	StartTime          int64                   `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	ExpireTime         int64                   `protobuf:"varint,9,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	RealFinishTime     int64                   `protobuf:"varint,10,opt,name=realFinishTime,proto3" json:"realFinishTime,omitempty"`
	ContributorsList   []*Goal_GoalContributor `protobuf:"bytes,11,rep,name=contributorsList,proto3" json:"contributorsList,omitempty"`
	ContributorsLength int32                   `protobuf:"varint,12,opt,name=contributorsLength,proto3" json:"contributorsLength,omitempty"`
	IdStr              string                  `protobuf:"bytes,13,opt,name=idStr,proto3" json:"idStr,omitempty"`
	AuditDescription   string                  `protobuf:"bytes,14,opt,name=auditDescription,proto3" json:"auditDescription,omitempty"`
	Stats              *Goal_GoalStats         `protobuf:"bytes,15,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Goal) Reset() {
	*x = Goal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal) ProtoMessage() {}

func (x *Goal) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal.ProtoReflect.Descriptor instead.
func (*Goal) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10}
}

func (x *Goal) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Goal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Goal) GetAuditStatus() int32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *Goal) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Goal) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *Goal) GetRealFinishTime() int64 {
	if x != nil {
		return x.RealFinishTime
	}
	return 0
}

func (x *Goal) GetContributorsList() []*Goal_GoalContributor {
	if x != nil {
		return x.ContributorsList
	}
	return nil
}

func (x *Goal) GetContributorsLength() int32 {
	if x != nil {
		return x.ContributorsLength
	}
	return 0
}

func (x *Goal) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *Goal) GetAuditDescription() string {
	if x != nil {
		return x.AuditDescription
	}
	return ""
}

func (x *Goal) GetStats() *Goal_GoalStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// @Indicator
// proto.webcast.data
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Op  int64  `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"` // @warning Enum not found, should be Op
}

func (x *Indicator) Reset() {
	*x = Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicator) ProtoMessage() {}

func (x *Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicator.ProtoReflect.Descriptor instead.
func (*Indicator) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11}
}

func (x *Indicator) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Indicator) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

type Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label   string        `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Color   *TikTokColor  `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Details []*ValueLabel `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Ranking) Reset() {
	*x = Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranking) ProtoMessage() {}

func (x *Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranking.ProtoReflect.Descriptor instead.
func (*Ranking) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{12}
}

func (x *Ranking) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Ranking) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Ranking) GetColor() *TikTokColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Ranking) GetDetails() []*ValueLabel {
	if x != nil {
		return x.Details
	}
	return nil
}

type TikTokColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color string `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Id    uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Data1 uint32 `protobuf:"varint,6,opt,name=data1,proto3" json:"data1,omitempty"`
}

func (x *TikTokColor) Reset() {
	*x = TikTokColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TikTokColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TikTokColor) ProtoMessage() {}

func (x *TikTokColor) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TikTokColor.ProtoReflect.Descriptor instead.
func (*TikTokColor) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13}
}

func (x *TikTokColor) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TikTokColor) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TikTokColor) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

type ValueLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   uint32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	Label  string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Label2 string `protobuf:"bytes,3,opt,name=label2,proto3" json:"label2,omitempty"`
	Label3 string `protobuf:"bytes,11,opt,name=label3,proto3" json:"label3,omitempty"`
}

func (x *ValueLabel) Reset() {
	*x = ValueLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueLabel) ProtoMessage() {}

func (x *ValueLabel) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueLabel.ProtoReflect.Descriptor instead.
func (*ValueLabel) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{14}
}

func (x *ValueLabel) GetData() uint32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *ValueLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ValueLabel) GetLabel2() string {
	if x != nil {
		return x.Label2
	}
	return ""
}

func (x *ValueLabel) GetLabel3() string {
	if x != nil {
		return x.Label3
	}
	return ""
}

type MessageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1    uint32         `protobuf:"varint,1,opt,name=data1,proto3" json:"data1,omitempty"`
	Color    *TikTokColor   `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Category string         `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	User     *UserContainer `protobuf:"bytes,21,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *MessageDetails) Reset() {
	*x = MessageDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDetails) ProtoMessage() {}

func (x *MessageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDetails.ProtoReflect.Descriptor instead.
func (*MessageDetails) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{15}
}

func (x *MessageDetails) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *MessageDetails) GetColor() *TikTokColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *MessageDetails) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MessageDetails) GetUser() *UserContainer {
	if x != nil {
		return x.User
	}
	return nil
}

type UserContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Data1 uint32 `protobuf:"varint,2,opt,name=data1,proto3" json:"data1,omitempty"`
}

func (x *UserContainer) Reset() {
	*x = UserContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContainer) ProtoMessage() {}

func (x *UserContainer) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContainer.ProtoReflect.Descriptor instead.
func (*UserContainer) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{16}
}

func (x *UserContainer) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserContainer) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

// Container for uint-Data
type DataContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1 uint64 `protobuf:"varint,1,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2 uint32 `protobuf:"varint,2,opt,name=data2,proto3" json:"data2,omitempty"`
	Data3 uint32 `protobuf:"varint,3,opt,name=data3,proto3" json:"data3,omitempty"`
	Data4 uint32 `protobuf:"varint,4,opt,name=data4,proto3" json:"data4,omitempty"`
	Data5 uint32 `protobuf:"varint,5,opt,name=data5,proto3" json:"data5,omitempty"`
	Data6 uint32 `protobuf:"varint,6,opt,name=data6,proto3" json:"data6,omitempty"`
	Data7 uint32 `protobuf:"varint,7,opt,name=data7,proto3" json:"data7,omitempty"`
	Data8 uint32 `protobuf:"varint,8,opt,name=data8,proto3" json:"data8,omitempty"`
	Data9 uint32 `protobuf:"varint,9,opt,name=data9,proto3" json:"data9,omitempty"`
}

func (x *DataContainer) Reset() {
	*x = DataContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataContainer) ProtoMessage() {}

func (x *DataContainer) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataContainer.ProtoReflect.Descriptor instead.
func (*DataContainer) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{17}
}

func (x *DataContainer) GetData1() uint64 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *DataContainer) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *DataContainer) GetData3() uint32 {
	if x != nil {
		return x.Data3
	}
	return 0
}

func (x *DataContainer) GetData4() uint32 {
	if x != nil {
		return x.Data4
	}
	return 0
}

func (x *DataContainer) GetData5() uint32 {
	if x != nil {
		return x.Data5
	}
	return 0
}

func (x *DataContainer) GetData6() uint32 {
	if x != nil {
		return x.Data6
	}
	return 0
}

func (x *DataContainer) GetData7() uint32 {
	if x != nil {
		return x.Data7
	}
	return 0
}

func (x *DataContainer) GetData8() uint32 {
	if x != nil {
		return x.Data8
	}
	return 0
}

func (x *DataContainer) GetData9() uint32 {
	if x != nil {
		return x.Data9
	}
	return 0
}

type TimeStampContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp1 uint64 `protobuf:"varint,1,opt,name=timestamp1,proto3" json:"timestamp1,omitempty"`
	Timestamp2 uint64 `protobuf:"varint,2,opt,name=timestamp2,proto3" json:"timestamp2,omitempty"`
	Timestamp3 uint64 `protobuf:"varint,3,opt,name=timestamp3,proto3" json:"timestamp3,omitempty"`
}

func (x *TimeStampContainer) Reset() {
	*x = TimeStampContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeStampContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeStampContainer) ProtoMessage() {}

func (x *TimeStampContainer) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeStampContainer.ProtoReflect.Descriptor instead.
func (*TimeStampContainer) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{18}
}

func (x *TimeStampContainer) GetTimestamp1() uint64 {
	if x != nil {
		return x.Timestamp1
	}
	return 0
}

func (x *TimeStampContainer) GetTimestamp2() uint64 {
	if x != nil {
		return x.Timestamp2
	}
	return 0
}

func (x *TimeStampContainer) GetTimestamp3() uint64 {
	if x != nil {
		return x.Timestamp3
	}
	return 0
}

type MemberMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label   string            `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Color   *TikTokColor      `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Details []*MessageDetails `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"` // UserContainer-Data is empty
}

func (x *MemberMessageData) Reset() {
	*x = MemberMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberMessageData) ProtoMessage() {}

func (x *MemberMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberMessageData.ProtoReflect.Descriptor instead.
func (*MemberMessageData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{19}
}

func (x *MemberMessageData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MemberMessageData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *MemberMessageData) GetColor() *TikTokColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *MemberMessageData) GetDetails() []*MessageDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type LinkMicArmiesItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostUserId   uint64                                   `protobuf:"varint,1,opt,name=hostUserId,proto3" json:"hostUserId,omitempty"`
	BattleGroups []*LinkMicArmiesItems_LinkMicArmiesGroup `protobuf:"bytes,2,rep,name=battleGroups,proto3" json:"battleGroups,omitempty"`
}

func (x *LinkMicArmiesItems) Reset() {
	*x = LinkMicArmiesItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMicArmiesItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMicArmiesItems) ProtoMessage() {}

func (x *LinkMicArmiesItems) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMicArmiesItems.ProtoReflect.Descriptor instead.
func (*LinkMicArmiesItems) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{20}
}

func (x *LinkMicArmiesItems) GetHostUserId() uint64 {
	if x != nil {
		return x.HostUserId
	}
	return 0
}

func (x *LinkMicArmiesItems) GetBattleGroups() []*LinkMicArmiesItems_LinkMicArmiesGroup {
	if x != nil {
		return x.BattleGroups
	}
	return nil
}

type PollStartContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64             `protobuf:"varint,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime    int64             `protobuf:"varint,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	OptionList []*PollOptionInfo `protobuf:"bytes,3,rep,name=OptionList,proto3" json:"OptionList,omitempty"`
	Title      string            `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Operator   *User             `protobuf:"bytes,5,opt,name=Operator,proto3" json:"Operator,omitempty"`
}

func (x *PollStartContent) Reset() {
	*x = PollStartContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollStartContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollStartContent) ProtoMessage() {}

func (x *PollStartContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollStartContent.ProtoReflect.Descriptor instead.
func (*PollStartContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{21}
}

func (x *PollStartContent) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PollStartContent) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PollStartContent) GetOptionList() []*PollOptionInfo {
	if x != nil {
		return x.OptionList
	}
	return nil
}

func (x *PollStartContent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PollStartContent) GetOperator() *User {
	if x != nil {
		return x.Operator
	}
	return nil
}

type PollEndContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndType    int32             `protobuf:"varint,1,opt,name=EndType,proto3" json:"EndType,omitempty"` // Possibly an Enum?
	OptionList []*PollOptionInfo `protobuf:"bytes,2,rep,name=OptionList,proto3" json:"OptionList,omitempty"`
	Operator   *User             `protobuf:"bytes,3,opt,name=Operator,proto3" json:"Operator,omitempty"`
}

func (x *PollEndContent) Reset() {
	*x = PollEndContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollEndContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollEndContent) ProtoMessage() {}

func (x *PollEndContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollEndContent.ProtoReflect.Descriptor instead.
func (*PollEndContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{22}
}

func (x *PollEndContent) GetEndType() int32 {
	if x != nil {
		return x.EndType
	}
	return 0
}

func (x *PollEndContent) GetOptionList() []*PollOptionInfo {
	if x != nil {
		return x.OptionList
	}
	return nil
}

func (x *PollEndContent) GetOperator() *User {
	if x != nil {
		return x.Operator
	}
	return nil
}

type PollOptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes          int32       `protobuf:"varint,1,opt,name=Votes,proto3" json:"Votes,omitempty"`
	DisplayContent string      `protobuf:"bytes,2,opt,name=DisplayContent,proto3" json:"DisplayContent,omitempty"`
	OptionIdx      int32       `protobuf:"varint,3,opt,name=OptionIdx,proto3" json:"OptionIdx,omitempty"`
	VoteUserList   []*VoteUser `protobuf:"bytes,4,rep,name=VoteUserList,proto3" json:"VoteUserList,omitempty"`
}

func (x *PollOptionInfo) Reset() {
	*x = PollOptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollOptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollOptionInfo) ProtoMessage() {}

func (x *PollOptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollOptionInfo.ProtoReflect.Descriptor instead.
func (*PollOptionInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{23}
}

func (x *PollOptionInfo) GetVotes() int32 {
	if x != nil {
		return x.Votes
	}
	return 0
}

func (x *PollOptionInfo) GetDisplayContent() string {
	if x != nil {
		return x.DisplayContent
	}
	return ""
}

func (x *PollOptionInfo) GetOptionIdx() int32 {
	if x != nil {
		return x.OptionIdx
	}
	return 0
}

func (x *PollOptionInfo) GetVoteUserList() []*VoteUser {
	if x != nil {
		return x.VoteUserList
	}
	return nil
}

type VoteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	NickName    string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	AvatarThumb *Image `protobuf:"bytes,3,opt,name=AvatarThumb,proto3" json:"AvatarThumb,omitempty"`
}

func (x *VoteUser) Reset() {
	*x = VoteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteUser) ProtoMessage() {}

func (x *VoteUser) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteUser.ProtoReflect.Descriptor instead.
func (*VoteUser) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{24}
}

func (x *VoteUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VoteUser) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *VoteUser) GetAvatarThumb() *Image {
	if x != nil {
		return x.AvatarThumb
	}
	return nil
}

type PollUpdateVotesContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionList []*PollOptionInfo `protobuf:"bytes,2,rep,name=OptionList,proto3" json:"OptionList,omitempty"`
}

func (x *PollUpdateVotesContent) Reset() {
	*x = PollUpdateVotesContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollUpdateVotesContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollUpdateVotesContent) ProtoMessage() {}

func (x *PollUpdateVotesContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollUpdateVotesContent.ProtoReflect.Descriptor instead.
func (*PollUpdateVotesContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{25}
}

func (x *PollUpdateVotesContent) GetOptionList() []*PollOptionInfo {
	if x != nil {
		return x.OptionList
	}
	return nil
}

type UserFanTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FanTicket       int64 `protobuf:"varint,2,opt,name=FanTicket,proto3" json:"FanTicket,omitempty"`
	MatchTotalScore int64 `protobuf:"varint,3,opt,name=MatchTotalScore,proto3" json:"MatchTotalScore,omitempty"`
	MatchRank       int32 `protobuf:"varint,4,opt,name=MatchRank,proto3" json:"MatchRank,omitempty"`
}

func (x *UserFanTicket) Reset() {
	*x = UserFanTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFanTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFanTicket) ProtoMessage() {}

func (x *UserFanTicket) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFanTicket.ProtoReflect.Descriptor instead.
func (*UserFanTicket) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{26}
}

func (x *UserFanTicket) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFanTicket) GetFanTicket() int64 {
	if x != nil {
		return x.FanTicket
	}
	return 0
}

func (x *UserFanTicket) GetMatchTotalScore() int64 {
	if x != nil {
		return x.MatchTotalScore
	}
	return 0
}

func (x *UserFanTicket) GetMatchRank() int32 {
	if x != nil {
		return x.MatchRank
	}
	return 0
}

type FanTicketRoomNoticeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserFanTicketList     []*UserFanTicket `protobuf:"bytes,1,rep,name=UserFanTicketList,proto3" json:"UserFanTicketList,omitempty"`
	TotalLinkMicFanTicket int64            `protobuf:"varint,2,opt,name=TotalLinkMicFanTicket,proto3" json:"TotalLinkMicFanTicket,omitempty"`
	MatchId               int64            `protobuf:"varint,3,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	EventTime             int64            `protobuf:"varint,4,opt,name=EventTime,proto3" json:"EventTime,omitempty"`
	FanTicketIconUrl      string           `protobuf:"bytes,5,opt,name=FanTicketIconUrl,proto3" json:"FanTicketIconUrl,omitempty"`
}

func (x *FanTicketRoomNoticeContent) Reset() {
	*x = FanTicketRoomNoticeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanTicketRoomNoticeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanTicketRoomNoticeContent) ProtoMessage() {}

func (x *FanTicketRoomNoticeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanTicketRoomNoticeContent.ProtoReflect.Descriptor instead.
func (*FanTicketRoomNoticeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{27}
}

func (x *FanTicketRoomNoticeContent) GetUserFanTicketList() []*UserFanTicket {
	if x != nil {
		return x.UserFanTicketList
	}
	return nil
}

func (x *FanTicketRoomNoticeContent) GetTotalLinkMicFanTicket() int64 {
	if x != nil {
		return x.TotalLinkMicFanTicket
	}
	return 0
}

func (x *FanTicketRoomNoticeContent) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *FanTicketRoomNoticeContent) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *FanTicketRoomNoticeContent) GetFanTicketIconUrl() string {
	if x != nil {
		return x.FanTicketIconUrl
	}
	return ""
}

type LinkerAcceptNoticeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserId int64 `protobuf:"varint,1,opt,name=fromUserId,proto3" json:"fromUserId,omitempty"`
	FromRoomId int64 `protobuf:"varint,2,opt,name=fromRoomId,proto3" json:"fromRoomId,omitempty"`
	ToUserId   int64 `protobuf:"varint,3,opt,name=toUserId,proto3" json:"toUserId,omitempty"`
}

func (x *LinkerAcceptNoticeContent) Reset() {
	*x = LinkerAcceptNoticeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerAcceptNoticeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerAcceptNoticeContent) ProtoMessage() {}

func (x *LinkerAcceptNoticeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerAcceptNoticeContent.ProtoReflect.Descriptor instead.
func (*LinkerAcceptNoticeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{28}
}

func (x *LinkerAcceptNoticeContent) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *LinkerAcceptNoticeContent) GetFromRoomId() int64 {
	if x != nil {
		return x.FromRoomId
	}
	return 0
}

func (x *LinkerAcceptNoticeContent) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

type LinkerCancelContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserId int64 `protobuf:"varint,1,opt,name=fromUserId,proto3" json:"fromUserId,omitempty"`
	ToUserId   int64 `protobuf:"varint,2,opt,name=toUserId,proto3" json:"toUserId,omitempty"`
	CancelType int64 `protobuf:"varint,3,opt,name=cancelType,proto3" json:"cancelType,omitempty"`
	ActionId   int64 `protobuf:"varint,4,opt,name=actionId,proto3" json:"actionId,omitempty"`
}

func (x *LinkerCancelContent) Reset() {
	*x = LinkerCancelContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerCancelContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerCancelContent) ProtoMessage() {}

func (x *LinkerCancelContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerCancelContent.ProtoReflect.Descriptor instead.
func (*LinkerCancelContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{29}
}

func (x *LinkerCancelContent) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *LinkerCancelContent) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *LinkerCancelContent) GetCancelType() int64 {
	if x != nil {
		return x.CancelType
	}
	return 0
}

func (x *LinkerCancelContent) GetActionId() int64 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

type ListUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User          *User             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	LinkmicId     int64             `protobuf:"varint,2,opt,name=linkmicId,proto3" json:"linkmicId,omitempty"`
	LinkmicIdStr  string            `protobuf:"bytes,3,opt,name=linkmicIdStr,proto3" json:"linkmicIdStr,omitempty"`
	LinkStatus    int64             `protobuf:"varint,4,opt,name=linkStatus,proto3" json:"linkStatus,omitempty"`                    // Enum
	LinkType      ListUser_LinkType `protobuf:"varint,5,opt,name=linkType,proto3,enum=ListUser_LinkType" json:"linkType,omitempty"` // Enum
	UserPosition  int32             `protobuf:"varint,6,opt,name=userPosition,proto3" json:"userPosition,omitempty"`
	SilenceStatus int32             `protobuf:"varint,7,opt,name=silenceStatus,proto3" json:"silenceStatus,omitempty"` // Enum
	ModifyTime    int64             `protobuf:"varint,8,opt,name=modifyTime,proto3" json:"modifyTime,omitempty"`
	LinkerId      int64             `protobuf:"varint,9,opt,name=linkerId,proto3" json:"linkerId,omitempty"`
	RoleType      int32             `protobuf:"varint,10,opt,name=roleType,proto3" json:"roleType,omitempty"` // Enum
}

func (x *ListUser) Reset() {
	*x = ListUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUser) ProtoMessage() {}

func (x *ListUser) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUser.ProtoReflect.Descriptor instead.
func (*ListUser) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{30}
}

func (x *ListUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ListUser) GetLinkmicId() int64 {
	if x != nil {
		return x.LinkmicId
	}
	return 0
}

func (x *ListUser) GetLinkmicIdStr() string {
	if x != nil {
		return x.LinkmicIdStr
	}
	return ""
}

func (x *ListUser) GetLinkStatus() int64 {
	if x != nil {
		return x.LinkStatus
	}
	return 0
}

func (x *ListUser) GetLinkType() ListUser_LinkType {
	if x != nil {
		return x.LinkType
	}
	return ListUser_LINK_UNKNOWN
}

func (x *ListUser) GetUserPosition() int32 {
	if x != nil {
		return x.UserPosition
	}
	return 0
}

func (x *ListUser) GetSilenceStatus() int32 {
	if x != nil {
		return x.SilenceStatus
	}
	return 0
}

func (x *ListUser) GetModifyTime() int64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *ListUser) GetLinkerId() int64 {
	if x != nil {
		return x.LinkerId
	}
	return 0
}

func (x *ListUser) GetRoleType() int32 {
	if x != nil {
		return x.RoleType
	}
	return 0
}

// it is just empty
type LinkerCloseContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkerCloseContent) Reset() {
	*x = LinkerCloseContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerCloseContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerCloseContent) ProtoMessage() {}

func (x *LinkerCloseContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerCloseContent.ProtoReflect.Descriptor instead.
func (*LinkerCloseContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{31}
}

type LinkerCreateContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId     int64 `protobuf:"varint,1,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	OwnerRoomId int64 `protobuf:"varint,2,opt,name=ownerRoomId,proto3" json:"ownerRoomId,omitempty"`
	LinkType    int64 `protobuf:"varint,3,opt,name=linkType,proto3" json:"linkType,omitempty"`
}

func (x *LinkerCreateContent) Reset() {
	*x = LinkerCreateContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerCreateContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerCreateContent) ProtoMessage() {}

func (x *LinkerCreateContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerCreateContent.ProtoReflect.Descriptor instead.
func (*LinkerCreateContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32}
}

func (x *LinkerCreateContent) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *LinkerCreateContent) GetOwnerRoomId() int64 {
	if x != nil {
		return x.OwnerRoomId
	}
	return 0
}

func (x *LinkerCreateContent) GetLinkType() int64 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

type LinkerEnterContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedUsersList     []*ListUser             `protobuf:"bytes,1,rep,name=linkedUsersList,proto3" json:"linkedUsersList,omitempty"`
	AnchorMultiLiveEnum int32                   `protobuf:"varint,2,opt,name=anchorMultiLiveEnum,proto3" json:"anchorMultiLiveEnum,omitempty"` // Enum
	AnchorSettingInfo   *LinkmicUserSettingInfo `protobuf:"bytes,3,opt,name=anchorSettingInfo,proto3" json:"anchorSettingInfo,omitempty"`
}

func (x *LinkerEnterContent) Reset() {
	*x = LinkerEnterContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerEnterContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerEnterContent) ProtoMessage() {}

func (x *LinkerEnterContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerEnterContent.ProtoReflect.Descriptor instead.
func (*LinkerEnterContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{33}
}

func (x *LinkerEnterContent) GetLinkedUsersList() []*ListUser {
	if x != nil {
		return x.LinkedUsersList
	}
	return nil
}

func (x *LinkerEnterContent) GetAnchorMultiLiveEnum() int32 {
	if x != nil {
		return x.AnchorMultiLiveEnum
	}
	return 0
}

func (x *LinkerEnterContent) GetAnchorSettingInfo() *LinkmicUserSettingInfo {
	if x != nil {
		return x.AnchorSettingInfo
	}
	return nil
}

type LinkerInviteContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserId     int64  `protobuf:"varint,1,opt,name=fromUserId,proto3" json:"fromUserId,omitempty"`
	FromRoomId     int64  `protobuf:"varint,2,opt,name=fromRoomId,proto3" json:"fromRoomId,omitempty"`
	ToRtcExtInfo   string `protobuf:"bytes,3,opt,name=toRtcExtInfo,proto3" json:"toRtcExtInfo,omitempty"`
	RtcJoinChannel bool   `protobuf:"varint,4,opt,name=rtcJoinChannel,proto3" json:"rtcJoinChannel,omitempty"`
	Vendor         int64  `protobuf:"varint,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
	SecFromUserId  string `protobuf:"bytes,6,opt,name=secFromUserId,proto3" json:"secFromUserId,omitempty"`
	ToLinkmicIdStr string `protobuf:"bytes,7,opt,name=toLinkmicIdStr,proto3" json:"toLinkmicIdStr,omitempty"`
	FromUser       *User  `protobuf:"bytes,8,opt,name=fromUser,proto3" json:"fromUser,omitempty"`
	RequiredMicIdx int64  `protobuf:"varint,9,opt,name=requiredMicIdx,proto3" json:"requiredMicIdx,omitempty"`
}

func (x *LinkerInviteContent) Reset() {
	*x = LinkerInviteContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerInviteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerInviteContent) ProtoMessage() {}

func (x *LinkerInviteContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerInviteContent.ProtoReflect.Descriptor instead.
func (*LinkerInviteContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{34}
}

func (x *LinkerInviteContent) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *LinkerInviteContent) GetFromRoomId() int64 {
	if x != nil {
		return x.FromRoomId
	}
	return 0
}

func (x *LinkerInviteContent) GetToRtcExtInfo() string {
	if x != nil {
		return x.ToRtcExtInfo
	}
	return ""
}

func (x *LinkerInviteContent) GetRtcJoinChannel() bool {
	if x != nil {
		return x.RtcJoinChannel
	}
	return false
}

func (x *LinkerInviteContent) GetVendor() int64 {
	if x != nil {
		return x.Vendor
	}
	return 0
}

func (x *LinkerInviteContent) GetSecFromUserId() string {
	if x != nil {
		return x.SecFromUserId
	}
	return ""
}

func (x *LinkerInviteContent) GetToLinkmicIdStr() string {
	if x != nil {
		return x.ToLinkmicIdStr
	}
	return ""
}

func (x *LinkerInviteContent) GetFromUser() *User {
	if x != nil {
		return x.FromUser
	}
	return nil
}

func (x *LinkerInviteContent) GetRequiredMicIdx() int64 {
	if x != nil {
		return x.RequiredMicIdx
	}
	return 0
}

type LinkerKickOutContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserId    int64         `protobuf:"varint,1,opt,name=fromUserId,proto3" json:"fromUserId,omitempty"`
	KickoutReason KickoutReason `protobuf:"varint,2,opt,name=kickoutReason,proto3,enum=KickoutReason" json:"kickoutReason,omitempty"` // Enum
}

func (x *LinkerKickOutContent) Reset() {
	*x = LinkerKickOutContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerKickOutContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerKickOutContent) ProtoMessage() {}

func (x *LinkerKickOutContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerKickOutContent.ProtoReflect.Descriptor instead.
func (*LinkerKickOutContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{35}
}

func (x *LinkerKickOutContent) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *LinkerKickOutContent) GetKickoutReason() KickoutReason {
	if x != nil {
		return x.KickoutReason
	}
	return KickoutReason_KICKOUT_REASON_UNKNOWN
}

type LinkerLeaveContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	LinkmicIdStr string `protobuf:"bytes,2,opt,name=linkmicIdStr,proto3" json:"linkmicIdStr,omitempty"`
	SendLeaveUid int64  `protobuf:"varint,3,opt,name=sendLeaveUid,proto3" json:"sendLeaveUid,omitempty"`
	LeaveReason  int64  `protobuf:"varint,4,opt,name=leaveReason,proto3" json:"leaveReason,omitempty"`
}

func (x *LinkerLeaveContent) Reset() {
	*x = LinkerLeaveContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerLeaveContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerLeaveContent) ProtoMessage() {}

func (x *LinkerLeaveContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerLeaveContent.ProtoReflect.Descriptor instead.
func (*LinkerLeaveContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{36}
}

func (x *LinkerLeaveContent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LinkerLeaveContent) GetLinkmicIdStr() string {
	if x != nil {
		return x.LinkmicIdStr
	}
	return ""
}

func (x *LinkerLeaveContent) GetSendLeaveUid() int64 {
	if x != nil {
		return x.SendLeaveUid
	}
	return 0
}

func (x *LinkerLeaveContent) GetLeaveReason() int64 {
	if x != nil {
		return x.LeaveReason
	}
	return 0
}

// Empty
type LinkerLinkedListChangeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkerLinkedListChangeContent) Reset() {
	*x = LinkerLinkedListChangeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerLinkedListChangeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerLinkedListChangeContent) ProtoMessage() {}

func (x *LinkerLinkedListChangeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerLinkedListChangeContent.ProtoReflect.Descriptor instead.
func (*LinkerLinkedListChangeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{37}
}

// Empty
type CohostListChangeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CohostListChangeContent) Reset() {
	*x = CohostListChangeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CohostListChangeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CohostListChangeContent) ProtoMessage() {}

func (x *CohostListChangeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CohostListChangeContent.ProtoReflect.Descriptor instead.
func (*CohostListChangeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{38}
}

type LinkerListChangeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedUsers     []*ListUser `protobuf:"bytes,1,rep,name=linkedUsers,proto3" json:"linkedUsers,omitempty"`
	AppliedUsers    []*ListUser `protobuf:"bytes,2,rep,name=appliedUsers,proto3" json:"appliedUsers,omitempty"`
	ConnectingUsers []*ListUser `protobuf:"bytes,3,rep,name=connectingUsers,proto3" json:"connectingUsers,omitempty"`
}

func (x *LinkerListChangeContent) Reset() {
	*x = LinkerListChangeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerListChangeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerListChangeContent) ProtoMessage() {}

func (x *LinkerListChangeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerListChangeContent.ProtoReflect.Descriptor instead.
func (*LinkerListChangeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{39}
}

func (x *LinkerListChangeContent) GetLinkedUsers() []*ListUser {
	if x != nil {
		return x.LinkedUsers
	}
	return nil
}

func (x *LinkerListChangeContent) GetAppliedUsers() []*ListUser {
	if x != nil {
		return x.AppliedUsers
	}
	return nil
}

func (x *LinkerListChangeContent) GetConnectingUsers() []*ListUser {
	if x != nil {
		return x.ConnectingUsers
	}
	return nil
}

type LinkerMediaChangeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op          int64 `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"` // Enum
	ToUserId    int64 `protobuf:"varint,2,opt,name=toUserId,proto3" json:"toUserId,omitempty"`
	AnchorId    int64 `protobuf:"varint,3,opt,name=anchorId,proto3" json:"anchorId,omitempty"`
	RoomId      int64 `protobuf:"varint,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
	ChangeScene int64 `protobuf:"varint,5,opt,name=changeScene,proto3" json:"changeScene,omitempty"` // Enum
}

func (x *LinkerMediaChangeContent) Reset() {
	*x = LinkerMediaChangeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerMediaChangeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerMediaChangeContent) ProtoMessage() {}

func (x *LinkerMediaChangeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerMediaChangeContent.ProtoReflect.Descriptor instead.
func (*LinkerMediaChangeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{40}
}

func (x *LinkerMediaChangeContent) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *LinkerMediaChangeContent) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *LinkerMediaChangeContent) GetAnchorId() int64 {
	if x != nil {
		return x.AnchorId
	}
	return 0
}

func (x *LinkerMediaChangeContent) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *LinkerMediaChangeContent) GetChangeScene() int64 {
	if x != nil {
		return x.ChangeScene
	}
	return 0
}

// Empty
type LinkerMicIdxUpdateContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkerMicIdxUpdateContent) Reset() {
	*x = LinkerMicIdxUpdateContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerMicIdxUpdateContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerMicIdxUpdateContent) ProtoMessage() {}

func (x *LinkerMicIdxUpdateContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerMicIdxUpdateContent.ProtoReflect.Descriptor instead.
func (*LinkerMicIdxUpdateContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{41}
}

type LinkerMuteContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Status int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` // Enum
}

func (x *LinkerMuteContent) Reset() {
	*x = LinkerMuteContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerMuteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerMuteContent) ProtoMessage() {}

func (x *LinkerMuteContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerMuteContent.ProtoReflect.Descriptor instead.
func (*LinkerMuteContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{42}
}

func (x *LinkerMuteContent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LinkerMuteContent) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type LinkerRandomMatchContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User           *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RoomId         int64  `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	InviteType     int64  `protobuf:"varint,3,opt,name=inviteType,proto3" json:"inviteType,omitempty"`
	MatchId        string `protobuf:"bytes,4,opt,name=matchId,proto3" json:"matchId,omitempty"`
	InnerChannelId int64  `protobuf:"varint,5,opt,name=innerChannelId,proto3" json:"innerChannelId,omitempty"`
}

func (x *LinkerRandomMatchContent) Reset() {
	*x = LinkerRandomMatchContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerRandomMatchContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerRandomMatchContent) ProtoMessage() {}

func (x *LinkerRandomMatchContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerRandomMatchContent.ProtoReflect.Descriptor instead.
func (*LinkerRandomMatchContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{43}
}

func (x *LinkerRandomMatchContent) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LinkerRandomMatchContent) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *LinkerRandomMatchContent) GetInviteType() int64 {
	if x != nil {
		return x.InviteType
	}
	return 0
}

func (x *LinkerRandomMatchContent) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *LinkerRandomMatchContent) GetInnerChannelId() int64 {
	if x != nil {
		return x.InnerChannelId
	}
	return 0
}

type LinkerReplyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserId          int64                           `protobuf:"varint,1,opt,name=fromUserId,proto3" json:"fromUserId,omitempty"`
	FromRoomId          int64                           `protobuf:"varint,2,opt,name=fromRoomId,proto3" json:"fromRoomId,omitempty"`
	FromUserLinkmicInfo *LinkerReplyContent_LinkmicInfo `protobuf:"bytes,3,opt,name=fromUserLinkmicInfo,proto3" json:"fromUserLinkmicInfo,omitempty"`
	ToUserId            int64                           `protobuf:"varint,4,opt,name=toUserId,proto3" json:"toUserId,omitempty"`
	ToUserLinkmicInfo   *LinkerReplyContent_LinkmicInfo `protobuf:"bytes,5,opt,name=toUserLinkmicInfo,proto3" json:"toUserLinkmicInfo,omitempty"`
	LinkType            int64                           `protobuf:"varint,6,opt,name=linkType,proto3" json:"linkType,omitempty"`
	ReplyStatus         int64                           `protobuf:"varint,7,opt,name=replyStatus,proto3" json:"replyStatus,omitempty"`
	LinkerSetting       *LinkerSetting                  `protobuf:"bytes,8,opt,name=linkerSetting,proto3" json:"linkerSetting,omitempty"`
	FromUser            *User                           `protobuf:"bytes,9,opt,name=fromUser,proto3" json:"fromUser,omitempty"`
	ToUser              *User                           `protobuf:"bytes,10,opt,name=toUser,proto3" json:"toUser,omitempty"`
}

func (x *LinkerReplyContent) Reset() {
	*x = LinkerReplyContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerReplyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerReplyContent) ProtoMessage() {}

func (x *LinkerReplyContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerReplyContent.ProtoReflect.Descriptor instead.
func (*LinkerReplyContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{44}
}

func (x *LinkerReplyContent) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *LinkerReplyContent) GetFromRoomId() int64 {
	if x != nil {
		return x.FromRoomId
	}
	return 0
}

func (x *LinkerReplyContent) GetFromUserLinkmicInfo() *LinkerReplyContent_LinkmicInfo {
	if x != nil {
		return x.FromUserLinkmicInfo
	}
	return nil
}

func (x *LinkerReplyContent) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *LinkerReplyContent) GetToUserLinkmicInfo() *LinkerReplyContent_LinkmicInfo {
	if x != nil {
		return x.ToUserLinkmicInfo
	}
	return nil
}

func (x *LinkerReplyContent) GetLinkType() int64 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

func (x *LinkerReplyContent) GetReplyStatus() int64 {
	if x != nil {
		return x.ReplyStatus
	}
	return 0
}

func (x *LinkerReplyContent) GetLinkerSetting() *LinkerSetting {
	if x != nil {
		return x.LinkerSetting
	}
	return nil
}

func (x *LinkerReplyContent) GetFromUser() *User {
	if x != nil {
		return x.FromUser
	}
	return nil
}

func (x *LinkerReplyContent) GetToUser() *User {
	if x != nil {
		return x.ToUser
	}
	return nil
}

type LinkerSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxMemberLimit int64 `protobuf:"varint,1,opt,name=MaxMemberLimit,proto3" json:"MaxMemberLimit,omitempty"`
	LinkType       int64 `protobuf:"varint,2,opt,name=LinkType,proto3" json:"LinkType,omitempty"`
	Scene          int64 `protobuf:"varint,3,opt,name=Scene,proto3" json:"Scene,omitempty"`
	OwnerUserId    int64 `protobuf:"varint,4,opt,name=OwnerUserId,proto3" json:"OwnerUserId,omitempty"`
	OwnerRoomId    int64 `protobuf:"varint,5,opt,name=OwnerRoomId,proto3" json:"OwnerRoomId,omitempty"`
	Vendor         int64 `protobuf:"varint,6,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
}

func (x *LinkerSetting) Reset() {
	*x = LinkerSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerSetting) ProtoMessage() {}

func (x *LinkerSetting) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerSetting.ProtoReflect.Descriptor instead.
func (*LinkerSetting) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{45}
}

func (x *LinkerSetting) GetMaxMemberLimit() int64 {
	if x != nil {
		return x.MaxMemberLimit
	}
	return 0
}

func (x *LinkerSetting) GetLinkType() int64 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

func (x *LinkerSetting) GetScene() int64 {
	if x != nil {
		return x.Scene
	}
	return 0
}

func (x *LinkerSetting) GetOwnerUserId() int64 {
	if x != nil {
		return x.OwnerUserId
	}
	return 0
}

func (x *LinkerSetting) GetOwnerRoomId() int64 {
	if x != nil {
		return x.OwnerRoomId
	}
	return 0
}

func (x *LinkerSetting) GetVendor() int64 {
	if x != nil {
		return x.Vendor
	}
	return 0
}

type LinkerSysKickOutContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	LinkmicIdStr string `protobuf:"bytes,2,opt,name=linkmicIdStr,proto3" json:"linkmicIdStr,omitempty"`
}

func (x *LinkerSysKickOutContent) Reset() {
	*x = LinkerSysKickOutContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerSysKickOutContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerSysKickOutContent) ProtoMessage() {}

func (x *LinkerSysKickOutContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerSysKickOutContent.ProtoReflect.Descriptor instead.
func (*LinkerSysKickOutContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{46}
}

func (x *LinkerSysKickOutContent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LinkerSysKickOutContent) GetLinkmicIdStr() string {
	if x != nil {
		return x.LinkmicIdStr
	}
	return ""
}

type LinkmicUserToastContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RoomId      int64 `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	DisplayText *Text `protobuf:"bytes,3,opt,name=displayText,proto3" json:"displayText,omitempty"`
}

func (x *LinkmicUserToastContent) Reset() {
	*x = LinkmicUserToastContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkmicUserToastContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkmicUserToastContent) ProtoMessage() {}

func (x *LinkmicUserToastContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkmicUserToastContent.ProtoReflect.Descriptor instead.
func (*LinkmicUserToastContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{47}
}

func (x *LinkmicUserToastContent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LinkmicUserToastContent) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *LinkmicUserToastContent) GetDisplayText() *Text {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

type LinkerUpdateUserContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserId int64 `protobuf:"varint,1,opt,name=fromUserId,proto3" json:"fromUserId,omitempty"`
	ToUserId   int64 `protobuf:"varint,2,opt,name=toUserId,proto3" json:"toUserId,omitempty"`
}

func (x *LinkerUpdateUserContent) Reset() {
	*x = LinkerUpdateUserContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerUpdateUserContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerUpdateUserContent) ProtoMessage() {}

func (x *LinkerUpdateUserContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerUpdateUserContent.ProtoReflect.Descriptor instead.
func (*LinkerUpdateUserContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{48}
}

func (x *LinkerUpdateUserContent) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *LinkerUpdateUserContent) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

// Empty
type LinkerUpdateUserSettingContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkerUpdateUserSettingContent) Reset() {
	*x = LinkerUpdateUserSettingContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerUpdateUserSettingContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerUpdateUserSettingContent) ProtoMessage() {}

func (x *LinkerUpdateUserSettingContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerUpdateUserSettingContent.ProtoReflect.Descriptor instead.
func (*LinkerUpdateUserSettingContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{49}
}

// Empty
type LinkerWaitingListChangeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkerWaitingListChangeContent) Reset() {
	*x = LinkerWaitingListChangeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerWaitingListChangeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerWaitingListChangeContent) ProtoMessage() {}

func (x *LinkerWaitingListChangeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerWaitingListChangeContent.ProtoReflect.Descriptor instead.
func (*LinkerWaitingListChangeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{50}
}

type LinkmicUserSettingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                       int64                     `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Layout                       int64                     `protobuf:"varint,2,opt,name=layout,proto3" json:"layout,omitempty"`                                                        // @warning Enum not found, should be Layout
	FixMicNum                    int64                     `protobuf:"varint,3,opt,name=fixMicNum,proto3" json:"fixMicNum,omitempty"`                                                  // @warning Enum not found, should be FixMicNum
	AllowRequestFromUser         int64                     `protobuf:"varint,4,opt,name=allowRequestFromUser,proto3" json:"allowRequestFromUser,omitempty"`                            // @warning Enum not found, should be AllowRequestFromUser
	AllowRequestFromFollowerOnly int64                     `protobuf:"varint,5,opt,name=allowRequestFromFollowerOnly,proto3" json:"allowRequestFromFollowerOnly,omitempty"`            // @warning Enum not found, should be AllowRequestFromFollowerOnly
	ApplierSortSetting           LinkmicApplierSortSetting `protobuf:"varint,7,opt,name=applierSortSetting,proto3,enum=LinkmicApplierSortSetting" json:"applierSortSetting,omitempty"` // Enum
}

func (x *LinkmicUserSettingInfo) Reset() {
	*x = LinkmicUserSettingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkmicUserSettingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkmicUserSettingInfo) ProtoMessage() {}

func (x *LinkmicUserSettingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkmicUserSettingInfo.ProtoReflect.Descriptor instead.
func (*LinkmicUserSettingInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{51}
}

func (x *LinkmicUserSettingInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LinkmicUserSettingInfo) GetLayout() int64 {
	if x != nil {
		return x.Layout
	}
	return 0
}

func (x *LinkmicUserSettingInfo) GetFixMicNum() int64 {
	if x != nil {
		return x.FixMicNum
	}
	return 0
}

func (x *LinkmicUserSettingInfo) GetAllowRequestFromUser() int64 {
	if x != nil {
		return x.AllowRequestFromUser
	}
	return 0
}

func (x *LinkmicUserSettingInfo) GetAllowRequestFromFollowerOnly() int64 {
	if x != nil {
		return x.AllowRequestFromFollowerOnly
	}
	return 0
}

func (x *LinkmicUserSettingInfo) GetApplierSortSetting() LinkmicApplierSortSetting {
	if x != nil {
		return x.ApplierSortSetting
	}
	return LinkmicApplierSortSetting_LINKMIC_APPLIER_SORT_SETTING_NONE
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId int64 `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{52}
}

func (x *Player) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Player) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AllListUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkedList  []*LinkLayerListUser `protobuf:"bytes,2,rep,name=linkedList,proto3" json:"linkedList,omitempty"`
	AppliedList []*LinkLayerListUser `protobuf:"bytes,3,rep,name=appliedList,proto3" json:"appliedList,omitempty"`
	InvitedList []*LinkLayerListUser `protobuf:"bytes,4,rep,name=invitedList,proto3" json:"invitedList,omitempty"`
	ReadyList   []*LinkLayerListUser `protobuf:"bytes,5,rep,name=readyList,proto3" json:"readyList,omitempty"`
}

func (x *AllListUser) Reset() {
	*x = AllListUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllListUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllListUser) ProtoMessage() {}

func (x *AllListUser) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllListUser.ProtoReflect.Descriptor instead.
func (*AllListUser) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{53}
}

func (x *AllListUser) GetLinkedList() []*LinkLayerListUser {
	if x != nil {
		return x.LinkedList
	}
	return nil
}

func (x *AllListUser) GetAppliedList() []*LinkLayerListUser {
	if x != nil {
		return x.AppliedList
	}
	return nil
}

func (x *AllListUser) GetInvitedList() []*LinkLayerListUser {
	if x != nil {
		return x.InvitedList
	}
	return nil
}

func (x *AllListUser) GetReadyList() []*LinkLayerListUser {
	if x != nil {
		return x.ReadyList
	}
	return nil
}

type LinkLayerListUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User           *User     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	LinkmicId      int64     `protobuf:"varint,2,opt,name=linkmicId,proto3" json:"linkmicId,omitempty"`
	Pos            *Position `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	LinkedTimeNano int64     `protobuf:"varint,4,opt,name=linkedTimeNano,proto3" json:"linkedTimeNano,omitempty"`
	AppVersion     string    `protobuf:"bytes,5,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	MagicNumber1   int64     `protobuf:"varint,7,opt,name=magicNumber1,proto3" json:"magicNumber1,omitempty"`
}

func (x *LinkLayerListUser) Reset() {
	*x = LinkLayerListUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkLayerListUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkLayerListUser) ProtoMessage() {}

func (x *LinkLayerListUser) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkLayerListUser.ProtoReflect.Descriptor instead.
func (*LinkLayerListUser) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{54}
}

func (x *LinkLayerListUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LinkLayerListUser) GetLinkmicId() int64 {
	if x != nil {
		return x.LinkmicId
	}
	return 0
}

func (x *LinkLayerListUser) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *LinkLayerListUser) GetLinkedTimeNano() int64 {
	if x != nil {
		return x.LinkedTimeNano
	}
	return 0
}

func (x *LinkLayerListUser) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *LinkLayerListUser) GetMagicNumber1() int64 {
	if x != nil {
		return x.MagicNumber1
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32         `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Link *LinkPosition `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{55}
}

func (x *Position) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Position) GetLink() *LinkPosition {
	if x != nil {
		return x.Link
	}
	return nil
}

type LinkPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Opt      int32 `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (x *LinkPosition) Reset() {
	*x = LinkPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkPosition) ProtoMessage() {}

func (x *LinkPosition) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkPosition.ProtoReflect.Descriptor instead.
func (*LinkPosition) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{56}
}

func (x *LinkPosition) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *LinkPosition) GetOpt() int32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type GroupPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int64 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	User      *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GroupPlayer) Reset() {
	*x = GroupPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPlayer) ProtoMessage() {}

func (x *GroupPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPlayer.ProtoReflect.Descriptor instead.
func (*GroupPlayer) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{57}
}

func (x *GroupPlayer) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GroupPlayer) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DSLConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneVersion int32  `protobuf:"varint,1,opt,name=sceneVersion,proto3" json:"sceneVersion,omitempty"`
	LayoutId     string `protobuf:"bytes,2,opt,name=layoutId,proto3" json:"layoutId,omitempty"`
}

func (x *DSLConfig) Reset() {
	*x = DSLConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSLConfig) ProtoMessage() {}

func (x *DSLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSLConfig.ProtoReflect.Descriptor instead.
func (*DSLConfig) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{58}
}

func (x *DSLConfig) GetSceneVersion() int32 {
	if x != nil {
		return x.SceneVersion
	}
	return 0
}

func (x *DSLConfig) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

type GroupChannelAllUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupChannelId int64               `protobuf:"varint,1,opt,name=groupChannelId,proto3" json:"groupChannelId,omitempty"`
	UserList       []*GroupChannelUser `protobuf:"bytes,2,rep,name=userList,proto3" json:"userList,omitempty"`
}

func (x *GroupChannelAllUser) Reset() {
	*x = GroupChannelAllUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChannelAllUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChannelAllUser) ProtoMessage() {}

func (x *GroupChannelAllUser) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChannelAllUser.ProtoReflect.Descriptor instead.
func (*GroupChannelAllUser) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{59}
}

func (x *GroupChannelAllUser) GetGroupChannelId() int64 {
	if x != nil {
		return x.GroupChannelId
	}
	return 0
}

func (x *GroupChannelAllUser) GetUserList() []*GroupChannelUser {
	if x != nil {
		return x.UserList
	}
	return nil
}

type GroupChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int64        `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Status     GroupStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=GroupStatus" json:"status,omitempty"` // Enum
	Type       TextType     `protobuf:"varint,3,opt,name=type,proto3,enum=TextType" json:"type,omitempty"`        // Enum
	AllUser    *AllListUser `protobuf:"bytes,4,opt,name=allUser,proto3" json:"allUser,omitempty"`
	JoinTime   int64        `protobuf:"varint,5,opt,name=joinTime,proto3" json:"joinTime,omitempty"`
	LinkedTime int64        `protobuf:"varint,6,opt,name=linkedTime,proto3" json:"linkedTime,omitempty"`
	OwnerUser  *GroupPlayer `protobuf:"bytes,7,opt,name=ownerUser,proto3" json:"ownerUser,omitempty"`
}

func (x *GroupChannelUser) Reset() {
	*x = GroupChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChannelUser) ProtoMessage() {}

func (x *GroupChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChannelUser.ProtoReflect.Descriptor instead.
func (*GroupChannelUser) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{60}
}

func (x *GroupChannelUser) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GroupChannelUser) GetStatus() GroupStatus {
	if x != nil {
		return x.Status
	}
	return GroupStatus_GROUP_STATUS_UNKNOWN
}

func (x *GroupChannelUser) GetType() TextType {
	if x != nil {
		return x.Type
	}
	return TextType_DISPLAY_TEXT
}

func (x *GroupChannelUser) GetAllUser() *AllListUser {
	if x != nil {
		return x.AllUser
	}
	return nil
}

func (x *GroupChannelUser) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *GroupChannelUser) GetLinkedTime() int64 {
	if x != nil {
		return x.LinkedTime
	}
	return 0
}

func (x *GroupChannelUser) GetOwnerUser() *GroupPlayer {
	if x != nil {
		return x.OwnerUser
	}
	return nil
}

type RTCExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveRtcEngineConfig   *RTCExtraInfo_RTCEngineConfig     `protobuf:"bytes,1,opt,name=liveRtcEngineConfig,proto3" json:"liveRtcEngineConfig,omitempty"`
	LiveRtcVideoParamList []*RTCExtraInfo_RTCLiveVideoParam `protobuf:"bytes,2,rep,name=liveRtcVideoParamList,proto3" json:"liveRtcVideoParamList,omitempty"`
	RtcBitrateMap         *RTCExtraInfo_RTCBitrateMap       `protobuf:"bytes,3,opt,name=rtcBitrateMap,proto3" json:"rtcBitrateMap,omitempty"`
	RtcFps                int32                             `protobuf:"varint,4,opt,name=rtcFps,proto3" json:"rtcFps,omitempty"`
	RtcBusinessId         string                            `protobuf:"bytes,8,opt,name=rtcBusinessId,proto3" json:"rtcBusinessId,omitempty"`
	InteractClientType    int32                             `protobuf:"varint,10,opt,name=interactClientType,proto3" json:"interactClientType,omitempty"`
}

func (x *RTCExtraInfo) Reset() {
	*x = RTCExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTCExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCExtraInfo) ProtoMessage() {}

func (x *RTCExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCExtraInfo.ProtoReflect.Descriptor instead.
func (*RTCExtraInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{61}
}

func (x *RTCExtraInfo) GetLiveRtcEngineConfig() *RTCExtraInfo_RTCEngineConfig {
	if x != nil {
		return x.LiveRtcEngineConfig
	}
	return nil
}

func (x *RTCExtraInfo) GetLiveRtcVideoParamList() []*RTCExtraInfo_RTCLiveVideoParam {
	if x != nil {
		return x.LiveRtcVideoParamList
	}
	return nil
}

func (x *RTCExtraInfo) GetRtcBitrateMap() *RTCExtraInfo_RTCBitrateMap {
	if x != nil {
		return x.RtcBitrateMap
	}
	return nil
}

func (x *RTCExtraInfo) GetRtcFps() int32 {
	if x != nil {
		return x.RtcFps
	}
	return 0
}

func (x *RTCExtraInfo) GetRtcBusinessId() string {
	if x != nil {
		return x.RtcBusinessId
	}
	return ""
}

func (x *RTCExtraInfo) GetInteractClientType() int32 {
	if x != nil {
		return x.InteractClientType
	}
	return 0
}

type CreateChannelContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner          *Player `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	OwnerLinkMicId string  `protobuf:"bytes,2,opt,name=ownerLinkMicId,proto3" json:"ownerLinkMicId,omitempty"`
}

func (x *CreateChannelContent) Reset() {
	*x = CreateChannelContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelContent) ProtoMessage() {}

func (x *CreateChannelContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelContent.ProtoReflect.Descriptor instead.
func (*CreateChannelContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{62}
}

func (x *CreateChannelContent) GetOwner() *Player {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateChannelContent) GetOwnerLinkMicId() string {
	if x != nil {
		return x.OwnerLinkMicId
	}
	return ""
}

type ListChangeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TextType     `protobuf:"varint,1,opt,name=type,proto3,enum=TextType" json:"type,omitempty"` // Enum
	List *AllListUser `protobuf:"bytes,2,opt,name=list,proto3" json:"list,omitempty"`
}

func (x *ListChangeContent) Reset() {
	*x = ListChangeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChangeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChangeContent) ProtoMessage() {}

func (x *ListChangeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChangeContent.ProtoReflect.Descriptor instead.
func (*ListChangeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{63}
}

func (x *ListChangeContent) GetType() TextType {
	if x != nil {
		return x.Type
	}
	return TextType_DISPLAY_TEXT
}

func (x *ListChangeContent) GetList() *AllListUser {
	if x != nil {
		return x.List
	}
	return nil
}

type MultiLiveContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteBizContent  *MultiLiveContent_InviteBizContent  `protobuf:"bytes,2,opt,name=inviteBizContent,proto3" json:"inviteBizContent,omitempty"`
	ReplyBizContent   *MultiLiveContent_ReplyBizContent   `protobuf:"bytes,3,opt,name=replyBizContent,proto3" json:"replyBizContent,omitempty"`
	PermitBizContent  *MultiLiveContent_PermitBizContent  `protobuf:"bytes,4,opt,name=permitBizContent,proto3" json:"permitBizContent,omitempty"`
	KickOutBizContent *MultiLiveContent_KickOutBizContent `protobuf:"bytes,6,opt,name=kickOutBizContent,proto3" json:"kickOutBizContent,omitempty"`
}

func (x *MultiLiveContent) Reset() {
	*x = MultiLiveContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLiveContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLiveContent) ProtoMessage() {}

func (x *MultiLiveContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLiveContent.ProtoReflect.Descriptor instead.
func (*MultiLiveContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{64}
}

func (x *MultiLiveContent) GetInviteBizContent() *MultiLiveContent_InviteBizContent {
	if x != nil {
		return x.InviteBizContent
	}
	return nil
}

func (x *MultiLiveContent) GetReplyBizContent() *MultiLiveContent_ReplyBizContent {
	if x != nil {
		return x.ReplyBizContent
	}
	return nil
}

func (x *MultiLiveContent) GetPermitBizContent() *MultiLiveContent_PermitBizContent {
	if x != nil {
		return x.PermitBizContent
	}
	return nil
}

func (x *MultiLiveContent) GetKickOutBizContent() *MultiLiveContent_KickOutBizContent {
	if x != nil {
		return x.KickOutBizContent
	}
	return nil
}

type InviteContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitor           *Player       `protobuf:"bytes,1,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InviteeRtcExtInfo *RTCExtraInfo `protobuf:"bytes,2,opt,name=inviteeRtcExtInfo,proto3" json:"inviteeRtcExtInfo,omitempty"`
	InvitorLinkMicId  string        `protobuf:"bytes,3,opt,name=invitorLinkMicId,proto3" json:"invitorLinkMicId,omitempty"`
	InviteeLinkMicId  string        `protobuf:"bytes,4,opt,name=inviteeLinkMicId,proto3" json:"inviteeLinkMicId,omitempty"`
	IsOwner           bool          `protobuf:"varint,5,opt,name=isOwner,proto3" json:"isOwner,omitempty"`
	Pos               *Position     `protobuf:"bytes,6,opt,name=pos,proto3" json:"pos,omitempty"`
	Dsl               *DSLConfig    `protobuf:"bytes,7,opt,name=dsl,proto3" json:"dsl,omitempty"`
	Invitee           *User         `protobuf:"bytes,8,opt,name=invitee,proto3" json:"invitee,omitempty"`
	Operator          *User         `protobuf:"bytes,9,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *InviteContent) Reset() {
	*x = InviteContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteContent) ProtoMessage() {}

func (x *InviteContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteContent.ProtoReflect.Descriptor instead.
func (*InviteContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{65}
}

func (x *InviteContent) GetInvitor() *Player {
	if x != nil {
		return x.Invitor
	}
	return nil
}

func (x *InviteContent) GetInviteeRtcExtInfo() *RTCExtraInfo {
	if x != nil {
		return x.InviteeRtcExtInfo
	}
	return nil
}

func (x *InviteContent) GetInvitorLinkMicId() string {
	if x != nil {
		return x.InvitorLinkMicId
	}
	return ""
}

func (x *InviteContent) GetInviteeLinkMicId() string {
	if x != nil {
		return x.InviteeLinkMicId
	}
	return ""
}

func (x *InviteContent) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

func (x *InviteContent) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *InviteContent) GetDsl() *DSLConfig {
	if x != nil {
		return x.Dsl
	}
	return nil
}

func (x *InviteContent) GetInvitee() *User {
	if x != nil {
		return x.Invitee
	}
	return nil
}

func (x *InviteContent) GetOperator() *User {
	if x != nil {
		return x.Operator
	}
	return nil
}

// @ApplyContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type ApplyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applier          *Player `protobuf:"bytes,1,opt,name=applier,proto3" json:"applier,omitempty"`
	ApplierLinkMicId string  `protobuf:"bytes,2,opt,name=applierLinkMicId,proto3" json:"applierLinkMicId,omitempty"`
}

func (x *ApplyContent) Reset() {
	*x = ApplyContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyContent) ProtoMessage() {}

func (x *ApplyContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyContent.ProtoReflect.Descriptor instead.
func (*ApplyContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{66}
}

func (x *ApplyContent) GetApplier() *Player {
	if x != nil {
		return x.Applier
	}
	return nil
}

func (x *ApplyContent) GetApplierLinkMicId() string {
	if x != nil {
		return x.ApplierLinkMicId
	}
	return ""
}

// @PermitApplyContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type PermitApplyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permiter          *Player     `protobuf:"bytes,1,opt,name=permiter,proto3" json:"permiter,omitempty"`
	PermiterLinkMicId string      `protobuf:"bytes,2,opt,name=permiterLinkMicId,proto3" json:"permiterLinkMicId,omitempty"`
	ApplierPos        *Position   `protobuf:"bytes,3,opt,name=applierPos,proto3" json:"applierPos,omitempty"`
	ReplyStatus       ReplyStatus `protobuf:"varint,4,opt,name=replyStatus,proto3,enum=ReplyStatus" json:"replyStatus,omitempty"` // Enum
	Dsl               *DSLConfig  `protobuf:"bytes,5,opt,name=dsl,proto3" json:"dsl,omitempty"`
	Applier           *User       `protobuf:"bytes,6,opt,name=applier,proto3" json:"applier,omitempty"`
	Operator          *User       `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
	ApplierLinkMicId  string      `protobuf:"bytes,8,opt,name=applierLinkMicId,proto3" json:"applierLinkMicId,omitempty"`
}

func (x *PermitApplyContent) Reset() {
	*x = PermitApplyContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermitApplyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermitApplyContent) ProtoMessage() {}

func (x *PermitApplyContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermitApplyContent.ProtoReflect.Descriptor instead.
func (*PermitApplyContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{67}
}

func (x *PermitApplyContent) GetPermiter() *Player {
	if x != nil {
		return x.Permiter
	}
	return nil
}

func (x *PermitApplyContent) GetPermiterLinkMicId() string {
	if x != nil {
		return x.PermiterLinkMicId
	}
	return ""
}

func (x *PermitApplyContent) GetApplierPos() *Position {
	if x != nil {
		return x.ApplierPos
	}
	return nil
}

func (x *PermitApplyContent) GetReplyStatus() ReplyStatus {
	if x != nil {
		return x.ReplyStatus
	}
	return ReplyStatus_REPLY_STATUS_UNKNOWN
}

func (x *PermitApplyContent) GetDsl() *DSLConfig {
	if x != nil {
		return x.Dsl
	}
	return nil
}

func (x *PermitApplyContent) GetApplier() *User {
	if x != nil {
		return x.Applier
	}
	return nil
}

func (x *PermitApplyContent) GetOperator() *User {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *PermitApplyContent) GetApplierLinkMicId() string {
	if x != nil {
		return x.ApplierLinkMicId
	}
	return ""
}

// @ReplyInviteContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type ReplyInviteContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitee            *Player     `protobuf:"bytes,1,opt,name=invitee,proto3" json:"invitee,omitempty"`
	ReplyStatus        ReplyStatus `protobuf:"varint,2,opt,name=replyStatus,proto3,enum=ReplyStatus" json:"replyStatus,omitempty"` // Enum
	InviteeLinkMicId   string      `protobuf:"bytes,3,opt,name=inviteeLinkMicId,proto3" json:"inviteeLinkMicId,omitempty"`
	InviteePos         *Position   `protobuf:"bytes,4,opt,name=inviteePos,proto3" json:"inviteePos,omitempty"`
	InviteOperatorUser *Player     `protobuf:"bytes,5,opt,name=inviteOperatorUser,proto3" json:"inviteOperatorUser,omitempty"`
}

func (x *ReplyInviteContent) Reset() {
	*x = ReplyInviteContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyInviteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyInviteContent) ProtoMessage() {}

func (x *ReplyInviteContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyInviteContent.ProtoReflect.Descriptor instead.
func (*ReplyInviteContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{68}
}

func (x *ReplyInviteContent) GetInvitee() *Player {
	if x != nil {
		return x.Invitee
	}
	return nil
}

func (x *ReplyInviteContent) GetReplyStatus() ReplyStatus {
	if x != nil {
		return x.ReplyStatus
	}
	return ReplyStatus_REPLY_STATUS_UNKNOWN
}

func (x *ReplyInviteContent) GetInviteeLinkMicId() string {
	if x != nil {
		return x.InviteeLinkMicId
	}
	return ""
}

func (x *ReplyInviteContent) GetInviteePos() *Position {
	if x != nil {
		return x.InviteePos
	}
	return nil
}

func (x *ReplyInviteContent) GetInviteOperatorUser() *Player {
	if x != nil {
		return x.InviteOperatorUser
	}
	return nil
}

// @KickOutContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type KickOutContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offliner      *Player       `protobuf:"bytes,1,opt,name=offliner,proto3" json:"offliner,omitempty"`
	KickoutReason KickoutReason `protobuf:"varint,2,opt,name=kickoutReason,proto3,enum=KickoutReason" json:"kickoutReason,omitempty"` // Enum
}

func (x *KickOutContent) Reset() {
	*x = KickOutContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickOutContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickOutContent) ProtoMessage() {}

func (x *KickOutContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickOutContent.ProtoReflect.Descriptor instead.
func (*KickOutContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{69}
}

func (x *KickOutContent) GetOffliner() *Player {
	if x != nil {
		return x.Offliner
	}
	return nil
}

func (x *KickOutContent) GetKickoutReason() KickoutReason {
	if x != nil {
		return x.KickoutReason
	}
	return KickoutReason_KICKOUT_REASON_UNKNOWN
}

// @CancelApplyContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type CancelApplyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applier          *Player `protobuf:"bytes,1,opt,name=applier,proto3" json:"applier,omitempty"`
	ApplierLinkMicId string  `protobuf:"bytes,2,opt,name=applierLinkMicId,proto3" json:"applierLinkMicId,omitempty"`
}

func (x *CancelApplyContent) Reset() {
	*x = CancelApplyContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelApplyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelApplyContent) ProtoMessage() {}

func (x *CancelApplyContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelApplyContent.ProtoReflect.Descriptor instead.
func (*CancelApplyContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{70}
}

func (x *CancelApplyContent) GetApplier() *Player {
	if x != nil {
		return x.Applier
	}
	return nil
}

func (x *CancelApplyContent) GetApplierLinkMicId() string {
	if x != nil {
		return x.ApplierLinkMicId
	}
	return ""
}

// @CancelInviteContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type CancelInviteContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitor          *Player `protobuf:"bytes,1,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InvitorLinkMicId string  `protobuf:"bytes,2,opt,name=invitorLinkMicId,proto3" json:"invitorLinkMicId,omitempty"`
	InviteeLinkMicId string  `protobuf:"bytes,3,opt,name=inviteeLinkMicId,proto3" json:"inviteeLinkMicId,omitempty"`
	InviteSeqId      int64   `protobuf:"varint,4,opt,name=inviteSeqId,proto3" json:"inviteSeqId,omitempty"`
	Invitee          *Player `protobuf:"bytes,5,opt,name=invitee,proto3" json:"invitee,omitempty"`
}

func (x *CancelInviteContent) Reset() {
	*x = CancelInviteContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInviteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInviteContent) ProtoMessage() {}

func (x *CancelInviteContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInviteContent.ProtoReflect.Descriptor instead.
func (*CancelInviteContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{71}
}

func (x *CancelInviteContent) GetInvitor() *Player {
	if x != nil {
		return x.Invitor
	}
	return nil
}

func (x *CancelInviteContent) GetInvitorLinkMicId() string {
	if x != nil {
		return x.InvitorLinkMicId
	}
	return ""
}

func (x *CancelInviteContent) GetInviteeLinkMicId() string {
	if x != nil {
		return x.InviteeLinkMicId
	}
	return ""
}

func (x *CancelInviteContent) GetInviteSeqId() int64 {
	if x != nil {
		return x.InviteSeqId
	}
	return 0
}

func (x *CancelInviteContent) GetInvitee() *Player {
	if x != nil {
		return x.Invitee
	}
	return nil
}

// @LeaveContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type LeaveContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaver      *Player `protobuf:"bytes,1,opt,name=leaver,proto3" json:"leaver,omitempty"`
	LeaveReason int64   `protobuf:"varint,2,opt,name=leaveReason,proto3" json:"leaveReason,omitempty"`
}

func (x *LeaveContent) Reset() {
	*x = LeaveContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveContent) ProtoMessage() {}

func (x *LeaveContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveContent.ProtoReflect.Descriptor instead.
func (*LeaveContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{72}
}

func (x *LeaveContent) GetLeaver() *Player {
	if x != nil {
		return x.Leaver
	}
	return nil
}

func (x *LeaveContent) GetLeaveReason() int64 {
	if x != nil {
		return x.LeaveReason
	}
	return 0
}

// @FinishChannelContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type FinishChannelContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner        *Player `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	FinishReason int64   `protobuf:"varint,2,opt,name=finishReason,proto3" json:"finishReason,omitempty"`
}

func (x *FinishChannelContent) Reset() {
	*x = FinishChannelContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishChannelContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishChannelContent) ProtoMessage() {}

func (x *FinishChannelContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishChannelContent.ProtoReflect.Descriptor instead.
func (*FinishChannelContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{73}
}

func (x *FinishChannelContent) GetOwner() *Player {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *FinishChannelContent) GetFinishReason() int64 {
	if x != nil {
		return x.FinishReason
	}
	return 0
}

// @JoinDirectContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type JoinDirectContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Joiner   *LinkLayerListUser `protobuf:"bytes,1,opt,name=joiner,proto3" json:"joiner,omitempty"`
	AllUsers *AllListUser       `protobuf:"bytes,2,opt,name=allUsers,proto3" json:"allUsers,omitempty"`
}

func (x *JoinDirectContent) Reset() {
	*x = JoinDirectContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinDirectContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinDirectContent) ProtoMessage() {}

func (x *JoinDirectContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinDirectContent.ProtoReflect.Descriptor instead.
func (*JoinDirectContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{74}
}

func (x *JoinDirectContent) GetJoiner() *LinkLayerListUser {
	if x != nil {
		return x.Joiner
	}
	return nil
}

func (x *JoinDirectContent) GetAllUsers() *AllListUser {
	if x != nil {
		return x.AllUsers
	}
	return nil
}

// @LeaveJoinGroupContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type LeaveJoinGroupContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator       *GroupPlayer `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	GroupChannelId int64        `protobuf:"varint,2,opt,name=groupChannelId,proto3" json:"groupChannelId,omitempty"`
	LeaveSource    string       `protobuf:"bytes,3,opt,name=leaveSource,proto3" json:"leaveSource,omitempty"`
}

func (x *LeaveJoinGroupContent) Reset() {
	*x = LeaveJoinGroupContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveJoinGroupContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveJoinGroupContent) ProtoMessage() {}

func (x *LeaveJoinGroupContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveJoinGroupContent.ProtoReflect.Descriptor instead.
func (*LeaveJoinGroupContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{75}
}

func (x *LeaveJoinGroupContent) GetOperator() *GroupPlayer {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *LeaveJoinGroupContent) GetGroupChannelId() int64 {
	if x != nil {
		return x.GroupChannelId
	}
	return 0
}

func (x *LeaveJoinGroupContent) GetLeaveSource() string {
	if x != nil {
		return x.LeaveSource
	}
	return ""
}

// @PermitJoinGroupContent
// proto.webcast.im
type PermitJoinGroupContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approver         *GroupPlayer         `protobuf:"bytes,1,opt,name=approver,proto3" json:"approver,omitempty"`
	AgreeStatus      AgreeStatus          `protobuf:"varint,2,opt,name=agreeStatus,proto3,enum=AgreeStatus" json:"agreeStatus,omitempty"` // Enum
	Type             TextType             `protobuf:"varint,3,opt,name=type,proto3,enum=TextType" json:"type,omitempty"`                  // Enum
	GroupExtInfoList []*RTCExtraInfo      `protobuf:"bytes,4,rep,name=groupExtInfoList,proto3" json:"groupExtInfoList,omitempty"`
	GroupUser        *GroupChannelAllUser `protobuf:"bytes,5,opt,name=groupUser,proto3" json:"groupUser,omitempty"`
}

func (x *PermitJoinGroupContent) Reset() {
	*x = PermitJoinGroupContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermitJoinGroupContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermitJoinGroupContent) ProtoMessage() {}

func (x *PermitJoinGroupContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermitJoinGroupContent.ProtoReflect.Descriptor instead.
func (*PermitJoinGroupContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{76}
}

func (x *PermitJoinGroupContent) GetApprover() *GroupPlayer {
	if x != nil {
		return x.Approver
	}
	return nil
}

func (x *PermitJoinGroupContent) GetAgreeStatus() AgreeStatus {
	if x != nil {
		return x.AgreeStatus
	}
	return AgreeStatus_AGREE_UNKNOWN
}

func (x *PermitJoinGroupContent) GetType() TextType {
	if x != nil {
		return x.Type
	}
	return TextType_DISPLAY_TEXT
}

func (x *PermitJoinGroupContent) GetGroupExtInfoList() []*RTCExtraInfo {
	if x != nil {
		return x.GroupExtInfoList
	}
	return nil
}

func (x *PermitJoinGroupContent) GetGroupUser() *GroupChannelAllUser {
	if x != nil {
		return x.GroupUser
	}
	return nil
}

// @CancelJoinGroupContent
// proto.webcast.im
type CancelJoinGroupContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaverList []*GroupPlayer `protobuf:"bytes,1,rep,name=leaverList,proto3" json:"leaverList,omitempty"`
	Operator   *GroupPlayer   `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Type       TextType       `protobuf:"varint,3,opt,name=type,proto3,enum=TextType" json:"type,omitempty"` // Enum
}

func (x *CancelJoinGroupContent) Reset() {
	*x = CancelJoinGroupContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJoinGroupContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJoinGroupContent) ProtoMessage() {}

func (x *CancelJoinGroupContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJoinGroupContent.ProtoReflect.Descriptor instead.
func (*CancelJoinGroupContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{77}
}

func (x *CancelJoinGroupContent) GetLeaverList() []*GroupPlayer {
	if x != nil {
		return x.LeaverList
	}
	return nil
}

func (x *CancelJoinGroupContent) GetOperator() *GroupPlayer {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *CancelJoinGroupContent) GetType() TextType {
	if x != nil {
		return x.Type
	}
	return TextType_DISPLAY_TEXT
}

type P2PGroupChangeContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupExtInfoList []*RTCExtraInfo      `protobuf:"bytes,1,rep,name=groupExtInfoList,proto3" json:"groupExtInfoList,omitempty"`
	GroupUser        *GroupChannelAllUser `protobuf:"bytes,2,opt,name=groupUser,proto3" json:"groupUser,omitempty"`
}

func (x *P2PGroupChangeContent) Reset() {
	*x = P2PGroupChangeContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PGroupChangeContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PGroupChangeContent) ProtoMessage() {}

func (x *P2PGroupChangeContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PGroupChangeContent.ProtoReflect.Descriptor instead.
func (*P2PGroupChangeContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{78}
}

func (x *P2PGroupChangeContent) GetGroupExtInfoList() []*RTCExtraInfo {
	if x != nil {
		return x.GroupExtInfoList
	}
	return nil
}

func (x *P2PGroupChangeContent) GetGroupUser() *GroupChannelAllUser {
	if x != nil {
		return x.GroupUser
	}
	return nil
}

type BusinessContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverLength       int64                          `protobuf:"varint,1,opt,name=overLength,proto3" json:"overLength,omitempty"`
	MultiLiveContent *MultiLiveContent              `protobuf:"bytes,100,opt,name=multiLiveContent,proto3" json:"multiLiveContent,omitempty"`
	CohostContent    *BusinessContent_CohostContent `protobuf:"bytes,200,opt,name=cohostContent,proto3" json:"cohostContent,omitempty"`
}

func (x *BusinessContent) Reset() {
	*x = BusinessContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent) ProtoMessage() {}

func (x *BusinessContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent.ProtoReflect.Descriptor instead.
func (*BusinessContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79}
}

func (x *BusinessContent) GetOverLength() int64 {
	if x != nil {
		return x.OverLength
	}
	return 0
}

func (x *BusinessContent) GetMultiLiveContent() *MultiLiveContent {
	if x != nil {
		return x.MultiLiveContent
	}
	return nil
}

func (x *BusinessContent) GetCohostContent() *BusinessContent_CohostContent {
	if x != nil {
		return x.CohostContent
	}
	return nil
}

type JoinGroupContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupUser *GroupChannelAllUser `protobuf:"bytes,1,opt,name=groupUser,proto3" json:"groupUser,omitempty"`
	JoinUser  *GroupPlayer         `protobuf:"bytes,2,opt,name=joinUser,proto3" json:"joinUser,omitempty"`
	Type      TextType             `protobuf:"varint,3,opt,name=type,proto3,enum=TextType" json:"type,omitempty"` // Enum
}

func (x *JoinGroupContent) Reset() {
	*x = JoinGroupContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupContent) ProtoMessage() {}

func (x *JoinGroupContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupContent.ProtoReflect.Descriptor instead.
func (*JoinGroupContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{80}
}

func (x *JoinGroupContent) GetGroupUser() *GroupChannelAllUser {
	if x != nil {
		return x.GroupUser
	}
	return nil
}

func (x *JoinGroupContent) GetJoinUser() *GroupPlayer {
	if x != nil {
		return x.JoinUser
	}
	return nil
}

func (x *JoinGroupContent) GetType() TextType {
	if x != nil {
		return x.Type
	}
	return TextType_DISPLAY_TEXT
}

type Common_LiveMessageSEI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId  *Common_LiveMessageID `protobuf:"bytes,1,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	Timestamp int64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Common_LiveMessageSEI) Reset() {
	*x = Common_LiveMessageSEI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Common_LiveMessageSEI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Common_LiveMessageSEI) ProtoMessage() {}

func (x *Common_LiveMessageSEI) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Common_LiveMessageSEI.ProtoReflect.Descriptor instead.
func (*Common_LiveMessageSEI) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Common_LiveMessageSEI) GetUniqueId() *Common_LiveMessageID {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

func (x *Common_LiveMessageSEI) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Common_LiveMessageID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryId    string `protobuf:"bytes,1,opt,name=primaryId,proto3" json:"primaryId,omitempty"`
	MessageScene string `protobuf:"bytes,2,opt,name=messageScene,proto3" json:"messageScene,omitempty"`
}

func (x *Common_LiveMessageID) Reset() {
	*x = Common_LiveMessageID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Common_LiveMessageID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Common_LiveMessageID) ProtoMessage() {}

func (x *Common_LiveMessageID) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Common_LiveMessageID.ProtoReflect.Descriptor instead.
func (*Common_LiveMessageID) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Common_LiveMessageID) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

func (x *Common_LiveMessageID) GetMessageScene() string {
	if x != nil {
		return x.MessageScene
	}
	return ""
}

type Text_TextPiece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int32            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Format      *Text_TextFormat `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	StringValue string           `protobuf:"bytes,11,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	// Types that are assignable to TextPieceType:
	//
	//	*Text_TextPiece_UserValue
	//	*Text_TextPiece_GiftValue
	TextPieceType   isText_TextPiece_TextPieceType `protobuf_oneof:"textPieceType"`
	PatternRefValue *Text_TextPiecePatternRef      `protobuf:"bytes,24,opt,name=patternRefValue,proto3" json:"patternRefValue,omitempty"`
}

func (x *Text_TextPiece) Reset() {
	*x = Text_TextPiece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text_TextPiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text_TextPiece) ProtoMessage() {}

func (x *Text_TextPiece) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text_TextPiece.ProtoReflect.Descriptor instead.
func (*Text_TextPiece) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Text_TextPiece) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Text_TextPiece) GetFormat() *Text_TextFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *Text_TextPiece) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (m *Text_TextPiece) GetTextPieceType() isText_TextPiece_TextPieceType {
	if m != nil {
		return m.TextPieceType
	}
	return nil
}

func (x *Text_TextPiece) GetUserValue() *Text_TextPieceUser {
	if x, ok := x.GetTextPieceType().(*Text_TextPiece_UserValue); ok {
		return x.UserValue
	}
	return nil
}

func (x *Text_TextPiece) GetGiftValue() *Text_TextPieceGift {
	if x, ok := x.GetTextPieceType().(*Text_TextPiece_GiftValue); ok {
		return x.GiftValue
	}
	return nil
}

func (x *Text_TextPiece) GetPatternRefValue() *Text_TextPiecePatternRef {
	if x != nil {
		return x.PatternRefValue
	}
	return nil
}

type isText_TextPiece_TextPieceType interface {
	isText_TextPiece_TextPieceType()
}

type Text_TextPiece_UserValue struct {
	UserValue *Text_TextPieceUser `protobuf:"bytes,21,opt,name=userValue,proto3,oneof"`
}

type Text_TextPiece_GiftValue struct {
	GiftValue *Text_TextPieceGift `protobuf:"bytes,22,opt,name=giftValue,proto3,oneof"`
}

func (*Text_TextPiece_UserValue) isText_TextPiece_TextPieceType() {}

func (*Text_TextPiece_GiftValue) isText_TextPiece_TextPieceType() {}

type Text_TextFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color              string `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Bold               bool   `protobuf:"varint,2,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic             bool   `protobuf:"varint,3,opt,name=italic,proto3" json:"italic,omitempty"`
	Weight             int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	ItalicAngle        int32  `protobuf:"varint,5,opt,name=italicAngle,proto3" json:"italicAngle,omitempty"`
	FontSize           int32  `protobuf:"varint,6,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	UseHeighLightColor bool   `protobuf:"varint,7,opt,name=useHeighLightColor,proto3" json:"useHeighLightColor,omitempty"`
	UseRemoteClor      bool   `protobuf:"varint,8,opt,name=useRemoteClor,proto3" json:"useRemoteClor,omitempty"`
}

func (x *Text_TextFormat) Reset() {
	*x = Text_TextFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text_TextFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text_TextFormat) ProtoMessage() {}

func (x *Text_TextFormat) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text_TextFormat.ProtoReflect.Descriptor instead.
func (*Text_TextFormat) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Text_TextFormat) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Text_TextFormat) GetBold() bool {
	if x != nil {
		return x.Bold
	}
	return false
}

func (x *Text_TextFormat) GetItalic() bool {
	if x != nil {
		return x.Italic
	}
	return false
}

func (x *Text_TextFormat) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Text_TextFormat) GetItalicAngle() int32 {
	if x != nil {
		return x.ItalicAngle
	}
	return 0
}

func (x *Text_TextFormat) GetFontSize() int32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *Text_TextFormat) GetUseHeighLightColor() bool {
	if x != nil {
		return x.UseHeighLightColor
	}
	return false
}

func (x *Text_TextFormat) GetUseRemoteClor() bool {
	if x != nil {
		return x.UseRemoteClor
	}
	return false
}

type Text_TextPieceGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId int32 `protobuf:"varint,1,opt,name=giftId,proto3" json:"giftId,omitempty"`
	// PatternRef nameRef = 2;
	// ShowType showType = 3; // Enum
	ColorId int64 `protobuf:"varint,4,opt,name=colorId,proto3" json:"colorId,omitempty"`
}

func (x *Text_TextPieceGift) Reset() {
	*x = Text_TextPieceGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text_TextPieceGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text_TextPieceGift) ProtoMessage() {}

func (x *Text_TextPieceGift) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text_TextPieceGift.ProtoReflect.Descriptor instead.
func (*Text_TextPieceGift) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Text_TextPieceGift) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *Text_TextPieceGift) GetColorId() int64 {
	if x != nil {
		return x.ColorId
	}
	return 0
}

type Text_TextPiecePatternRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultPattern string `protobuf:"bytes,2,opt,name=defaultPattern,proto3" json:"defaultPattern,omitempty"`
}

func (x *Text_TextPiecePatternRef) Reset() {
	*x = Text_TextPiecePatternRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text_TextPiecePatternRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text_TextPiecePatternRef) ProtoMessage() {}

func (x *Text_TextPiecePatternRef) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text_TextPiecePatternRef.ProtoReflect.Descriptor instead.
func (*Text_TextPiecePatternRef) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Text_TextPiecePatternRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Text_TextPiecePatternRef) GetDefaultPattern() string {
	if x != nil {
		return x.DefaultPattern
	}
	return ""
}

type Text_TextPieceUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	WithColon bool  `protobuf:"varint,2,opt,name=withColon,proto3" json:"withColon,omitempty"`
}

func (x *Text_TextPieceUser) Reset() {
	*x = Text_TextPieceUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text_TextPieceUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text_TextPieceUser) ProtoMessage() {}

func (x *Text_TextPieceUser) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text_TextPieceUser.ProtoReflect.Descriptor instead.
func (*Text_TextPieceUser) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Text_TextPieceUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Text_TextPieceUser) GetWithColon() bool {
	if x != nil {
		return x.WithColon
	}
	return false
}

type BadgeStruct_CombineBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon *Image                 `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Text *BadgeStruct_TextBadge `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Str  string                 `protobuf:"bytes,4,opt,name=str,proto3" json:"str,omitempty"`
	// repeated PaddingInfo padding = 5;
	// FontStyle fontStyle = 6;
	ProfileCardPanel                *BadgeStruct_ProfileCardPanel       `protobuf:"bytes,7,opt,name=profileCardPanel,proto3" json:"profileCardPanel,omitempty"`
	Background                      *BadgeStruct_CombineBadgeBackground `protobuf:"bytes,11,opt,name=background,proto3" json:"background,omitempty"`
	BackgroundDarkMode              *BadgeStruct_CombineBadgeBackground `protobuf:"bytes,12,opt,name=backgroundDarkMode,proto3" json:"backgroundDarkMode,omitempty"`
	IconAutoMirrored                bool                                `protobuf:"varint,13,opt,name=iconAutoMirrored,proto3" json:"iconAutoMirrored,omitempty"`
	BackgroundAutoMirrored          bool                                `protobuf:"varint,14,opt,name=backgroundAutoMirrored,proto3" json:"backgroundAutoMirrored,omitempty"`
	PublicScreenShowStyle           int32                               `protobuf:"varint,15,opt,name=publicScreenShowStyle,proto3" json:"publicScreenShowStyle,omitempty"`
	PersonalCardShowStyle           int32                               `protobuf:"varint,16,opt,name=personalCardShowStyle,proto3" json:"personalCardShowStyle,omitempty"`
	RanklistOnlineAudienceShowStyle int32                               `protobuf:"varint,17,opt,name=ranklistOnlineAudienceShowStyle,proto3" json:"ranklistOnlineAudienceShowStyle,omitempty"`
	MultiGuestShowStyle             int32                               `protobuf:"varint,18,opt,name=multiGuestShowStyle,proto3" json:"multiGuestShowStyle,omitempty"` //  repeated PaddingInfo paddingNewFont = 20;
}

func (x *BadgeStruct_CombineBadge) Reset() {
	*x = BadgeStruct_CombineBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_CombineBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_CombineBadge) ProtoMessage() {}

func (x *BadgeStruct_CombineBadge) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_CombineBadge.ProtoReflect.Descriptor instead.
func (*BadgeStruct_CombineBadge) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 0}
}

func (x *BadgeStruct_CombineBadge) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *BadgeStruct_CombineBadge) GetText() *BadgeStruct_TextBadge {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *BadgeStruct_CombineBadge) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *BadgeStruct_CombineBadge) GetProfileCardPanel() *BadgeStruct_ProfileCardPanel {
	if x != nil {
		return x.ProfileCardPanel
	}
	return nil
}

func (x *BadgeStruct_CombineBadge) GetBackground() *BadgeStruct_CombineBadgeBackground {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *BadgeStruct_CombineBadge) GetBackgroundDarkMode() *BadgeStruct_CombineBadgeBackground {
	if x != nil {
		return x.BackgroundDarkMode
	}
	return nil
}

func (x *BadgeStruct_CombineBadge) GetIconAutoMirrored() bool {
	if x != nil {
		return x.IconAutoMirrored
	}
	return false
}

func (x *BadgeStruct_CombineBadge) GetBackgroundAutoMirrored() bool {
	if x != nil {
		return x.BackgroundAutoMirrored
	}
	return false
}

func (x *BadgeStruct_CombineBadge) GetPublicScreenShowStyle() int32 {
	if x != nil {
		return x.PublicScreenShowStyle
	}
	return 0
}

func (x *BadgeStruct_CombineBadge) GetPersonalCardShowStyle() int32 {
	if x != nil {
		return x.PersonalCardShowStyle
	}
	return 0
}

func (x *BadgeStruct_CombineBadge) GetRanklistOnlineAudienceShowStyle() int32 {
	if x != nil {
		return x.RanklistOnlineAudienceShowStyle
	}
	return 0
}

func (x *BadgeStruct_CombineBadge) GetMultiGuestShowStyle() int32 {
	if x != nil {
		return x.MultiGuestShowStyle
	}
	return 0
}

type BadgeStruct_ProfileContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseContent   bool                      `protobuf:"varint,1,opt,name=useContent,proto3" json:"useContent,omitempty"`
	IconList     []*BadgeStruct_IconConfig `protobuf:"bytes,2,rep,name=iconList,proto3" json:"iconList,omitempty"`
	NumberConfig *BadgeStruct_NumberConfig `protobuf:"bytes,3,opt,name=numberConfig,proto3" json:"numberConfig,omitempty"`
}

func (x *BadgeStruct_ProfileContent) Reset() {
	*x = BadgeStruct_ProfileContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_ProfileContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_ProfileContent) ProtoMessage() {}

func (x *BadgeStruct_ProfileContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_ProfileContent.ProtoReflect.Descriptor instead.
func (*BadgeStruct_ProfileContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 1}
}

func (x *BadgeStruct_ProfileContent) GetUseContent() bool {
	if x != nil {
		return x.UseContent
	}
	return false
}

func (x *BadgeStruct_ProfileContent) GetIconList() []*BadgeStruct_IconConfig {
	if x != nil {
		return x.IconList
	}
	return nil
}

func (x *BadgeStruct_ProfileContent) GetNumberConfig() *BadgeStruct_NumberConfig {
	if x != nil {
		return x.NumberConfig
	}
	return nil
}

type BadgeStruct_ProjectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseProjection bool   `protobuf:"varint,1,opt,name=useProjection,proto3" json:"useProjection,omitempty"`
	Icon          *Image `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *BadgeStruct_ProjectionConfig) Reset() {
	*x = BadgeStruct_ProjectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_ProjectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_ProjectionConfig) ProtoMessage() {}

func (x *BadgeStruct_ProjectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_ProjectionConfig.ProtoReflect.Descriptor instead.
func (*BadgeStruct_ProjectionConfig) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 2}
}

func (x *BadgeStruct_ProjectionConfig) GetUseProjection() bool {
	if x != nil {
		return x.UseProjection
	}
	return false
}

func (x *BadgeStruct_ProjectionConfig) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

type BadgeStruct_NumberConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// FontStyle fontStyle = 2;
	Background *BadgeStruct_CombineBadgeBackground `protobuf:"bytes,3,opt,name=background,proto3" json:"background,omitempty"`
}

func (x *BadgeStruct_NumberConfig) Reset() {
	*x = BadgeStruct_NumberConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_NumberConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_NumberConfig) ProtoMessage() {}

func (x *BadgeStruct_NumberConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_NumberConfig.ProtoReflect.Descriptor instead.
func (*BadgeStruct_NumberConfig) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 3}
}

func (x *BadgeStruct_NumberConfig) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BadgeStruct_NumberConfig) GetBackground() *BadgeStruct_CombineBadgeBackground {
	if x != nil {
		return x.Background
	}
	return nil
}

type BadgeStruct_ProfileCardPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseNewProfileCardStyle bool `protobuf:"varint,1,opt,name=useNewProfileCardStyle,proto3" json:"useNewProfileCardStyle,omitempty"`
	// BadgeTextPosition badgeTextPosition = 2; // Enum
	ProjectionConfig *BadgeStruct_ProjectionConfig `protobuf:"bytes,3,opt,name=projectionConfig,proto3" json:"projectionConfig,omitempty"`
	ProfileContent   *BadgeStruct_ProfileContent   `protobuf:"bytes,4,opt,name=profileContent,proto3" json:"profileContent,omitempty"`
}

func (x *BadgeStruct_ProfileCardPanel) Reset() {
	*x = BadgeStruct_ProfileCardPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_ProfileCardPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_ProfileCardPanel) ProtoMessage() {}

func (x *BadgeStruct_ProfileCardPanel) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_ProfileCardPanel.ProtoReflect.Descriptor instead.
func (*BadgeStruct_ProfileCardPanel) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 4}
}

func (x *BadgeStruct_ProfileCardPanel) GetUseNewProfileCardStyle() bool {
	if x != nil {
		return x.UseNewProfileCardStyle
	}
	return false
}

func (x *BadgeStruct_ProfileCardPanel) GetProjectionConfig() *BadgeStruct_ProjectionConfig {
	if x != nil {
		return x.ProjectionConfig
	}
	return nil
}

func (x *BadgeStruct_ProfileCardPanel) GetProfileContent() *BadgeStruct_ProfileContent {
	if x != nil {
		return x.ProfileContent
	}
	return nil
}

type BadgeStruct_CombineBadgeBackground struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image               *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	BackgroundColorCode string `protobuf:"bytes,2,opt,name=backgroundColorCode,proto3" json:"backgroundColorCode,omitempty"`
	BorderColorCode     string `protobuf:"bytes,3,opt,name=borderColorCode,proto3" json:"borderColorCode,omitempty"`
}

func (x *BadgeStruct_CombineBadgeBackground) Reset() {
	*x = BadgeStruct_CombineBadgeBackground{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_CombineBadgeBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_CombineBadgeBackground) ProtoMessage() {}

func (x *BadgeStruct_CombineBadgeBackground) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_CombineBadgeBackground.ProtoReflect.Descriptor instead.
func (*BadgeStruct_CombineBadgeBackground) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 5}
}

func (x *BadgeStruct_CombineBadgeBackground) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *BadgeStruct_CombineBadgeBackground) GetBackgroundColorCode() string {
	if x != nil {
		return x.BackgroundColorCode
	}
	return ""
}

func (x *BadgeStruct_CombineBadgeBackground) GetBorderColorCode() string {
	if x != nil {
		return x.BorderColorCode
	}
	return ""
}

type BadgeStruct_ImageBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *Image `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *BadgeStruct_ImageBadge) Reset() {
	*x = BadgeStruct_ImageBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_ImageBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_ImageBadge) ProtoMessage() {}

func (x *BadgeStruct_ImageBadge) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_ImageBadge.ProtoReflect.Descriptor instead.
func (*BadgeStruct_ImageBadge) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 6}
}

func (x *BadgeStruct_ImageBadge) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type BadgeStruct_TextBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultPattern string `protobuf:"bytes,3,opt,name=defaultPattern,proto3" json:"defaultPattern,omitempty"`
}

func (x *BadgeStruct_TextBadge) Reset() {
	*x = BadgeStruct_TextBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_TextBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_TextBadge) ProtoMessage() {}

func (x *BadgeStruct_TextBadge) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_TextBadge.ProtoReflect.Descriptor instead.
func (*BadgeStruct_TextBadge) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 7}
}

func (x *BadgeStruct_TextBadge) GetDefaultPattern() string {
	if x != nil {
		return x.DefaultPattern
	}
	return ""
}

type BadgeStruct_IconConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon       *Image                              `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Background *BadgeStruct_CombineBadgeBackground `protobuf:"bytes,2,opt,name=background,proto3" json:"background,omitempty"`
}

func (x *BadgeStruct_IconConfig) Reset() {
	*x = BadgeStruct_IconConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_IconConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_IconConfig) ProtoMessage() {}

func (x *BadgeStruct_IconConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_IconConfig.ProtoReflect.Descriptor instead.
func (*BadgeStruct_IconConfig) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 8}
}

func (x *BadgeStruct_IconConfig) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *BadgeStruct_IconConfig) GetBackground() *BadgeStruct_CombineBadgeBackground {
	if x != nil {
		return x.Background
	}
	return nil
}

type BadgeStruct_StringBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *BadgeStruct_StringBadge) Reset() {
	*x = BadgeStruct_StringBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeStruct_StringBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeStruct_StringBadge) ProtoMessage() {}

func (x *BadgeStruct_StringBadge) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeStruct_StringBadge.ProtoReflect.Descriptor instead.
func (*BadgeStruct_StringBadge) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 9}
}

func (x *BadgeStruct_StringBadge) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

// @GiftPanelBanner
// proto.webcast.data.GiftStruct
type GiftStruct_GiftPanelBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayText       *Text    `protobuf:"bytes,1,opt,name=displayText,proto3" json:"displayText,omitempty"`
	LeftIcon          *Image   `protobuf:"bytes,2,opt,name=leftIcon,proto3" json:"leftIcon,omitempty"`
	SchemaUrl         string   `protobuf:"bytes,3,opt,name=schemaUrl,proto3" json:"schemaUrl,omitempty"`
	BgColorValuesList []string `protobuf:"bytes,5,rep,name=bgColorValuesList,proto3" json:"bgColorValuesList,omitempty"`
	BannerLynxUrl     string   `protobuf:"bytes,6,opt,name=bannerLynxUrl,proto3" json:"bannerLynxUrl,omitempty"`
}

func (x *GiftStruct_GiftPanelBanner) Reset() {
	*x = GiftStruct_GiftPanelBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftStruct_GiftPanelBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftStruct_GiftPanelBanner) ProtoMessage() {}

func (x *GiftStruct_GiftPanelBanner) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftStruct_GiftPanelBanner.ProtoReflect.Descriptor instead.
func (*GiftStruct_GiftPanelBanner) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GiftStruct_GiftPanelBanner) GetDisplayText() *Text {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

func (x *GiftStruct_GiftPanelBanner) GetLeftIcon() *Image {
	if x != nil {
		return x.LeftIcon
	}
	return nil
}

func (x *GiftStruct_GiftPanelBanner) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *GiftStruct_GiftPanelBanner) GetBgColorValuesList() []string {
	if x != nil {
		return x.BgColorValuesList
	}
	return nil
}

func (x *GiftStruct_GiftPanelBanner) GetBannerLynxUrl() string {
	if x != nil {
		return x.BannerLynxUrl
	}
	return ""
}

// @GiftRandomEffectInfo
// proto.webcast.data.GiftStruct
type GiftStruct_GiftRandomEffectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomGiftPanelBanner *GiftStruct_RandomGiftPanelBanner `protobuf:"bytes,1,opt,name=randomGiftPanelBanner,proto3" json:"randomGiftPanelBanner,omitempty"`
	EffectIdsList         []int64                           `protobuf:"varint,2,rep,packed,name=effectIdsList,proto3" json:"effectIdsList,omitempty"`
	HostKey               string                            `protobuf:"bytes,3,opt,name=hostKey,proto3" json:"hostKey,omitempty"`
	AudienceKey           string                            `protobuf:"bytes,4,opt,name=audienceKey,proto3" json:"audienceKey,omitempty"`
	RandomGiftBubble      *GiftStruct_RandomGiftBubble      `protobuf:"bytes,5,opt,name=randomGiftBubble,proto3" json:"randomGiftBubble,omitempty"`
}

func (x *GiftStruct_GiftRandomEffectInfo) Reset() {
	*x = GiftStruct_GiftRandomEffectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftStruct_GiftRandomEffectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftStruct_GiftRandomEffectInfo) ProtoMessage() {}

func (x *GiftStruct_GiftRandomEffectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftStruct_GiftRandomEffectInfo.ProtoReflect.Descriptor instead.
func (*GiftStruct_GiftRandomEffectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GiftStruct_GiftRandomEffectInfo) GetRandomGiftPanelBanner() *GiftStruct_RandomGiftPanelBanner {
	if x != nil {
		return x.RandomGiftPanelBanner
	}
	return nil
}

func (x *GiftStruct_GiftRandomEffectInfo) GetEffectIdsList() []int64 {
	if x != nil {
		return x.EffectIdsList
	}
	return nil
}

func (x *GiftStruct_GiftRandomEffectInfo) GetHostKey() string {
	if x != nil {
		return x.HostKey
	}
	return ""
}

func (x *GiftStruct_GiftRandomEffectInfo) GetAudienceKey() string {
	if x != nil {
		return x.AudienceKey
	}
	return ""
}

func (x *GiftStruct_GiftRandomEffectInfo) GetRandomGiftBubble() *GiftStruct_RandomGiftBubble {
	if x != nil {
		return x.RandomGiftBubble
	}
	return nil
}

// @RandomGiftBubble
// proto.webcast.data.GiftStruct
type GiftStruct_RandomGiftBubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayText       string `protobuf:"bytes,1,opt,name=displayText,proto3" json:"displayText,omitempty"`
	IconDynamicEffect *Image `protobuf:"bytes,2,opt,name=iconDynamicEffect,proto3" json:"iconDynamicEffect,omitempty"`
}

func (x *GiftStruct_RandomGiftBubble) Reset() {
	*x = GiftStruct_RandomGiftBubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftStruct_RandomGiftBubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftStruct_RandomGiftBubble) ProtoMessage() {}

func (x *GiftStruct_RandomGiftBubble) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftStruct_RandomGiftBubble.ProtoReflect.Descriptor instead.
func (*GiftStruct_RandomGiftBubble) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 2}
}

func (x *GiftStruct_RandomGiftBubble) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *GiftStruct_RandomGiftBubble) GetIconDynamicEffect() *Image {
	if x != nil {
		return x.IconDynamicEffect
	}
	return nil
}

// @RandomGiftPanelBanner
// proto.webcast.data.GiftStruct
type GiftStruct_RandomGiftPanelBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgImage           *Image   `protobuf:"bytes,1,opt,name=bgImage,proto3" json:"bgImage,omitempty"`
	ShadingImage      *Image   `protobuf:"bytes,2,opt,name=shadingImage,proto3" json:"shadingImage,omitempty"`
	TargetNum         int64    `protobuf:"varint,3,opt,name=targetNum,proto3" json:"targetNum,omitempty"`
	CollectNum        int64    `protobuf:"varint,4,opt,name=collectNum,proto3" json:"collectNum,omitempty"`
	DisplayText       string   `protobuf:"bytes,5,opt,name=displayText,proto3" json:"displayText,omitempty"`
	LeftIcon          *Image   `protobuf:"bytes,6,opt,name=leftIcon,proto3" json:"leftIcon,omitempty"`
	SchemaUrl         string   `protobuf:"bytes,7,opt,name=schemaUrl,proto3" json:"schemaUrl,omitempty"`
	BgColorValuesList []string `protobuf:"bytes,8,rep,name=bgColorValuesList,proto3" json:"bgColorValuesList,omitempty"`
	Round             int64    `protobuf:"varint,9,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *GiftStruct_RandomGiftPanelBanner) Reset() {
	*x = GiftStruct_RandomGiftPanelBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftStruct_RandomGiftPanelBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftStruct_RandomGiftPanelBanner) ProtoMessage() {}

func (x *GiftStruct_RandomGiftPanelBanner) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftStruct_RandomGiftPanelBanner.ProtoReflect.Descriptor instead.
func (*GiftStruct_RandomGiftPanelBanner) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 3}
}

func (x *GiftStruct_RandomGiftPanelBanner) GetBgImage() *Image {
	if x != nil {
		return x.BgImage
	}
	return nil
}

func (x *GiftStruct_RandomGiftPanelBanner) GetShadingImage() *Image {
	if x != nil {
		return x.ShadingImage
	}
	return nil
}

func (x *GiftStruct_RandomGiftPanelBanner) GetTargetNum() int64 {
	if x != nil {
		return x.TargetNum
	}
	return 0
}

func (x *GiftStruct_RandomGiftPanelBanner) GetCollectNum() int64 {
	if x != nil {
		return x.CollectNum
	}
	return 0
}

func (x *GiftStruct_RandomGiftPanelBanner) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *GiftStruct_RandomGiftPanelBanner) GetLeftIcon() *Image {
	if x != nil {
		return x.LeftIcon
	}
	return nil
}

func (x *GiftStruct_RandomGiftPanelBanner) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *GiftStruct_RandomGiftPanelBanner) GetBgColorValuesList() []string {
	if x != nil {
		return x.BgColorValuesList
	}
	return nil
}

func (x *GiftStruct_RandomGiftPanelBanner) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

type User_LiveEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       int64  `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	StartTime     int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration      int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Title         string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description   string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	HasSubscribed bool   `protobuf:"varint,6,opt,name=hasSubscribed,proto3" json:"hasSubscribed,omitempty"`
	IsPaidEvent   bool   `protobuf:"varint,7,opt,name=isPaidEvent,proto3" json:"isPaidEvent,omitempty"`
	TicketAmount  int64  `protobuf:"varint,8,opt,name=ticketAmount,proto3" json:"ticketAmount,omitempty"`
	PayMethod     int64  `protobuf:"varint,9,opt,name=payMethod,proto3" json:"payMethod,omitempty"` // @warning Enum not found, should be PayMethod
}

func (x *User_LiveEventInfo) Reset() {
	*x = User_LiveEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_LiveEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_LiveEventInfo) ProtoMessage() {}

func (x *User_LiveEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_LiveEventInfo.ProtoReflect.Descriptor instead.
func (*User_LiveEventInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 0}
}

func (x *User_LiveEventInfo) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *User_LiveEventInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *User_LiveEventInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *User_LiveEventInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *User_LiveEventInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *User_LiveEventInfo) GetHasSubscribed() bool {
	if x != nil {
		return x.HasSubscribed
	}
	return false
}

func (x *User_LiveEventInfo) GetIsPaidEvent() bool {
	if x != nil {
		return x.IsPaidEvent
	}
	return false
}

func (x *User_LiveEventInfo) GetTicketAmount() int64 {
	if x != nil {
		return x.TicketAmount
	}
	return 0
}

func (x *User_LiveEventInfo) GetPayMethod() int64 {
	if x != nil {
		return x.PayMethod
	}
	return 0
}

// @ActivityInfo
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_ActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Badge    *Image `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
	Storytag *Image `protobuf:"bytes,2,opt,name=storytag,proto3" json:"storytag,omitempty"`
}

func (x *User_ActivityInfo) Reset() {
	*x = User_ActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_ActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_ActivityInfo) ProtoMessage() {}

func (x *User_ActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_ActivityInfo.ProtoReflect.Descriptor instead.
func (*User_ActivityInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 1}
}

func (x *User_ActivityInfo) GetBadge() *Image {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *User_ActivityInfo) GetStorytag() *Image {
	if x != nil {
		return x.Storytag
	}
	return nil
}

// @AnchorLevel
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_AnchorLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                      int64  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Experience                 int64  `protobuf:"varint,2,opt,name=experience,proto3" json:"experience,omitempty"`
	LowestExperienceThisLevel  int64  `protobuf:"varint,3,opt,name=lowestExperienceThisLevel,proto3" json:"lowestExperienceThisLevel,omitempty"`
	HighestExperienceThisLevel int64  `protobuf:"varint,4,opt,name=highestExperienceThisLevel,proto3" json:"highestExperienceThisLevel,omitempty"`
	TaskStartExperience        int64  `protobuf:"varint,5,opt,name=taskStartExperience,proto3" json:"taskStartExperience,omitempty"`
	TaskStartTime              int64  `protobuf:"varint,6,opt,name=taskStartTime,proto3" json:"taskStartTime,omitempty"`
	TaskDecreaseExperience     int64  `protobuf:"varint,7,opt,name=taskDecreaseExperience,proto3" json:"taskDecreaseExperience,omitempty"`
	TaskTargetExperience       int64  `protobuf:"varint,8,opt,name=taskTargetExperience,proto3" json:"taskTargetExperience,omitempty"`
	TaskEndTime                int64  `protobuf:"varint,9,opt,name=taskEndTime,proto3" json:"taskEndTime,omitempty"`
	ProfileDialogBg            *Image `protobuf:"bytes,10,opt,name=profileDialogBg,proto3" json:"profileDialogBg,omitempty"`
	ProfileDialogBgBack        *Image `protobuf:"bytes,11,opt,name=profileDialogBgBack,proto3" json:"profileDialogBgBack,omitempty"`
	StageLevel                 *Image `protobuf:"bytes,12,opt,name=stageLevel,proto3" json:"stageLevel,omitempty"`
	SmallIcon                  *Image `protobuf:"bytes,13,opt,name=smallIcon,proto3" json:"smallIcon,omitempty"`
}

func (x *User_AnchorLevel) Reset() {
	*x = User_AnchorLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_AnchorLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_AnchorLevel) ProtoMessage() {}

func (x *User_AnchorLevel) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_AnchorLevel.ProtoReflect.Descriptor instead.
func (*User_AnchorLevel) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 2}
}

func (x *User_AnchorLevel) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *User_AnchorLevel) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *User_AnchorLevel) GetLowestExperienceThisLevel() int64 {
	if x != nil {
		return x.LowestExperienceThisLevel
	}
	return 0
}

func (x *User_AnchorLevel) GetHighestExperienceThisLevel() int64 {
	if x != nil {
		return x.HighestExperienceThisLevel
	}
	return 0
}

func (x *User_AnchorLevel) GetTaskStartExperience() int64 {
	if x != nil {
		return x.TaskStartExperience
	}
	return 0
}

func (x *User_AnchorLevel) GetTaskStartTime() int64 {
	if x != nil {
		return x.TaskStartTime
	}
	return 0
}

func (x *User_AnchorLevel) GetTaskDecreaseExperience() int64 {
	if x != nil {
		return x.TaskDecreaseExperience
	}
	return 0
}

func (x *User_AnchorLevel) GetTaskTargetExperience() int64 {
	if x != nil {
		return x.TaskTargetExperience
	}
	return 0
}

func (x *User_AnchorLevel) GetTaskEndTime() int64 {
	if x != nil {
		return x.TaskEndTime
	}
	return 0
}

func (x *User_AnchorLevel) GetProfileDialogBg() *Image {
	if x != nil {
		return x.ProfileDialogBg
	}
	return nil
}

func (x *User_AnchorLevel) GetProfileDialogBgBack() *Image {
	if x != nil {
		return x.ProfileDialogBgBack
	}
	return nil
}

func (x *User_AnchorLevel) GetStageLevel() *Image {
	if x != nil {
		return x.StageLevel
	}
	return nil
}

func (x *User_AnchorLevel) GetSmallIcon() *Image {
	if x != nil {
		return x.SmallIcon
	}
	return nil
}

// @AuthenticationInfo
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_AuthenticationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomVerify           string `protobuf:"bytes,1,opt,name=customVerify,proto3" json:"customVerify,omitempty"`
	EnterpriseVerifyReason string `protobuf:"bytes,2,opt,name=enterpriseVerifyReason,proto3" json:"enterpriseVerifyReason,omitempty"`
	AuthenticationBadge    *Image `protobuf:"bytes,3,opt,name=authenticationBadge,proto3" json:"authenticationBadge,omitempty"`
}

func (x *User_AuthenticationInfo) Reset() {
	*x = User_AuthenticationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_AuthenticationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_AuthenticationInfo) ProtoMessage() {}

func (x *User_AuthenticationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_AuthenticationInfo.ProtoReflect.Descriptor instead.
func (*User_AuthenticationInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 3}
}

func (x *User_AuthenticationInfo) GetCustomVerify() string {
	if x != nil {
		return x.CustomVerify
	}
	return ""
}

func (x *User_AuthenticationInfo) GetEnterpriseVerifyReason() string {
	if x != nil {
		return x.EnterpriseVerifyReason
	}
	return ""
}

func (x *User_AuthenticationInfo) GetAuthenticationBadge() *Image {
	if x != nil {
		return x.AuthenticationBadge
	}
	return nil
}

// @AuthorStats
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_AuthorStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoTotalCount         int64 `protobuf:"varint,1,opt,name=videoTotalCount,proto3" json:"videoTotalCount,omitempty"`
	VideoTotalPlayCount     int64 `protobuf:"varint,2,opt,name=videoTotalPlayCount,proto3" json:"videoTotalPlayCount,omitempty"`
	VideoTotalShareCount    int64 `protobuf:"varint,3,opt,name=videoTotalShareCount,proto3" json:"videoTotalShareCount,omitempty"`
	VideoTotalSeriesCount   int64 `protobuf:"varint,4,opt,name=videoTotalSeriesCount,proto3" json:"videoTotalSeriesCount,omitempty"`
	VarietyShowPlayCount    int64 `protobuf:"varint,5,opt,name=varietyShowPlayCount,proto3" json:"varietyShowPlayCount,omitempty"`
	VideoTotalFavoriteCount int64 `protobuf:"varint,6,opt,name=videoTotalFavoriteCount,proto3" json:"videoTotalFavoriteCount,omitempty"`
}

func (x *User_AuthorStats) Reset() {
	*x = User_AuthorStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_AuthorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_AuthorStats) ProtoMessage() {}

func (x *User_AuthorStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_AuthorStats.ProtoReflect.Descriptor instead.
func (*User_AuthorStats) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 4}
}

func (x *User_AuthorStats) GetVideoTotalCount() int64 {
	if x != nil {
		return x.VideoTotalCount
	}
	return 0
}

func (x *User_AuthorStats) GetVideoTotalPlayCount() int64 {
	if x != nil {
		return x.VideoTotalPlayCount
	}
	return 0
}

func (x *User_AuthorStats) GetVideoTotalShareCount() int64 {
	if x != nil {
		return x.VideoTotalShareCount
	}
	return 0
}

func (x *User_AuthorStats) GetVideoTotalSeriesCount() int64 {
	if x != nil {
		return x.VideoTotalSeriesCount
	}
	return 0
}

func (x *User_AuthorStats) GetVarietyShowPlayCount() int64 {
	if x != nil {
		return x.VarietyShowPlayCount
	}
	return 0
}

func (x *User_AuthorStats) GetVideoTotalFavoriteCount() int64 {
	if x != nil {
		return x.VideoTotalFavoriteCount
	}
	return 0
}

// @Border
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_Border struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon                        *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Level                       int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Source                      string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	ProfileDecorationRibbon     *Image `protobuf:"bytes,4,opt,name=profileDecorationRibbon,proto3" json:"profileDecorationRibbon,omitempty"`
	AvatarBackgroundColor       string `protobuf:"bytes,7,opt,name=avatarBackgroundColor,proto3" json:"avatarBackgroundColor,omitempty"`
	AvatarBackgroundBorderColor string `protobuf:"bytes,8,opt,name=avatarBackgroundBorderColor,proto3" json:"avatarBackgroundBorderColor,omitempty"`
}

func (x *User_Border) Reset() {
	*x = User_Border{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Border) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Border) ProtoMessage() {}

func (x *User_Border) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Border.ProtoReflect.Descriptor instead.
func (*User_Border) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 5}
}

func (x *User_Border) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *User_Border) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *User_Border) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *User_Border) GetProfileDecorationRibbon() *Image {
	if x != nil {
		return x.ProfileDecorationRibbon
	}
	return nil
}

func (x *User_Border) GetAvatarBackgroundColor() string {
	if x != nil {
		return x.AvatarBackgroundColor
	}
	return ""
}

func (x *User_Border) GetAvatarBackgroundBorderColor() string {
	if x != nil {
		return x.AvatarBackgroundBorderColor
	}
	return ""
}

// @ComboBadgeInfo
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_ComboBadgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon       *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	ComboCount int64  `protobuf:"varint,2,opt,name=comboCount,proto3" json:"comboCount,omitempty"`
}

func (x *User_ComboBadgeInfo) Reset() {
	*x = User_ComboBadgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_ComboBadgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_ComboBadgeInfo) ProtoMessage() {}

func (x *User_ComboBadgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_ComboBadgeInfo.ProtoReflect.Descriptor instead.
func (*User_ComboBadgeInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 6}
}

func (x *User_ComboBadgeInfo) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *User_ComboBadgeInfo) GetComboCount() int64 {
	if x != nil {
		return x.ComboCount
	}
	return 0
}

// @EcommerceEntrance
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntranceType         User_EcommerceEntrance_EntranceType          `protobuf:"varint,1,opt,name=entranceType,proto3,enum=User_EcommerceEntrance_EntranceType" json:"entranceType,omitempty"` // Enum
	CreatorType          User_EcommerceEntrance_CreatorType           `protobuf:"varint,2,opt,name=creatorType,proto3,enum=User_EcommerceEntrance_CreatorType" json:"creatorType,omitempty"`    // Enum
	Schema               string                                       `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	ShopEntranceInfo     *User_EcommerceEntrance_ShopEntranceInfo     `protobuf:"bytes,4,opt,name=shopEntranceInfo,proto3" json:"shopEntranceInfo,omitempty"`
	ShowcaseEntranceInfo *User_EcommerceEntrance_ShowcaseEntranceInfo `protobuf:"bytes,5,opt,name=showcaseEntranceInfo,proto3" json:"showcaseEntranceInfo,omitempty"`
}

func (x *User_EcommerceEntrance) Reset() {
	*x = User_EcommerceEntrance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_EcommerceEntrance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_EcommerceEntrance) ProtoMessage() {}

func (x *User_EcommerceEntrance) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_EcommerceEntrance.ProtoReflect.Descriptor instead.
func (*User_EcommerceEntrance) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7}
}

func (x *User_EcommerceEntrance) GetEntranceType() User_EcommerceEntrance_EntranceType {
	if x != nil {
		return x.EntranceType
	}
	return User_EcommerceEntrance_PROFILE
}

func (x *User_EcommerceEntrance) GetCreatorType() User_EcommerceEntrance_CreatorType {
	if x != nil {
		return x.CreatorType
	}
	return User_EcommerceEntrance_UNDEFINED
}

func (x *User_EcommerceEntrance) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *User_EcommerceEntrance) GetShopEntranceInfo() *User_EcommerceEntrance_ShopEntranceInfo {
	if x != nil {
		return x.ShopEntranceInfo
	}
	return nil
}

func (x *User_EcommerceEntrance) GetShowcaseEntranceInfo() *User_EcommerceEntrance_ShowcaseEntranceInfo {
	if x != nil {
		return x.ShowcaseEntranceInfo
	}
	return nil
}

// @FansClub
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_FansClub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *User_FansClub_FansClubData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *User_FansClub) Reset() {
	*x = User_FansClub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_FansClub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_FansClub) ProtoMessage() {}

func (x *User_FansClub) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_FansClub.ProtoReflect.Descriptor instead.
func (*User_FansClub) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 8}
}

func (x *User_FansClub) GetData() *User_FansClub_FansClubData {
	if x != nil {
		return x.Data
	}
	return nil
}

// @FansClubInfo
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_FansClubInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSleeping bool   `protobuf:"varint,1,opt,name=isSleeping,proto3" json:"isSleeping,omitempty"`
	FansLevel  int64  `protobuf:"varint,2,opt,name=fansLevel,proto3" json:"fansLevel,omitempty"`
	FansScore  int64  `protobuf:"varint,3,opt,name=fansScore,proto3" json:"fansScore,omitempty"`
	Badge      *Image `protobuf:"bytes,4,opt,name=badge,proto3" json:"badge,omitempty"`
	FansCount  int64  `protobuf:"varint,5,opt,name=fansCount,proto3" json:"fansCount,omitempty"`
}

func (x *User_FansClubInfo) Reset() {
	*x = User_FansClubInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_FansClubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_FansClubInfo) ProtoMessage() {}

func (x *User_FansClubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_FansClubInfo.ProtoReflect.Descriptor instead.
func (*User_FansClubInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 9}
}

func (x *User_FansClubInfo) GetIsSleeping() bool {
	if x != nil {
		return x.IsSleeping
	}
	return false
}

func (x *User_FansClubInfo) GetFansLevel() int64 {
	if x != nil {
		return x.FansLevel
	}
	return 0
}

func (x *User_FansClubInfo) GetFansScore() int64 {
	if x != nil {
		return x.FansScore
	}
	return 0
}

func (x *User_FansClubInfo) GetBadge() *Image {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *User_FansClubInfo) GetFansCount() int64 {
	if x != nil {
		return x.FansCount
	}
	return 0
}

// @FollowInfo
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_FollowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowingCount int64 `protobuf:"varint,1,opt,name=followingCount,proto3" json:"followingCount,omitempty"`
	FollowerCount  int64 `protobuf:"varint,2,opt,name=followerCount,proto3" json:"followerCount,omitempty"`
	FollowStatus   int64 `protobuf:"varint,3,opt,name=followStatus,proto3" json:"followStatus,omitempty"`
	PushStatus     int64 `protobuf:"varint,4,opt,name=pushStatus,proto3" json:"pushStatus,omitempty"`
}

func (x *User_FollowInfo) Reset() {
	*x = User_FollowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_FollowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_FollowInfo) ProtoMessage() {}

func (x *User_FollowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_FollowInfo.ProtoReflect.Descriptor instead.
func (*User_FollowInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 10}
}

func (x *User_FollowInfo) GetFollowingCount() int64 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *User_FollowInfo) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *User_FollowInfo) GetFollowStatus() int64 {
	if x != nil {
		return x.FollowStatus
	}
	return 0
}

func (x *User_FollowInfo) GetPushStatus() int64 {
	if x != nil {
		return x.PushStatus
	}
	return 0
}

// @OwnRoom
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_OwnRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomIdsList    []int64  `protobuf:"varint,1,rep,packed,name=roomIdsList,proto3" json:"roomIdsList,omitempty"`
	RoomIdsStrList []string `protobuf:"bytes,2,rep,name=roomIdsStrList,proto3" json:"roomIdsStrList,omitempty"`
}

func (x *User_OwnRoom) Reset() {
	*x = User_OwnRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_OwnRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_OwnRoom) ProtoMessage() {}

func (x *User_OwnRoom) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_OwnRoom.ProtoReflect.Descriptor instead.
func (*User_OwnRoom) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 11}
}

func (x *User_OwnRoom) GetRoomIdsList() []int64 {
	if x != nil {
		return x.RoomIdsList
	}
	return nil
}

func (x *User_OwnRoom) GetRoomIdsStrList() []string {
	if x != nil {
		return x.RoomIdsStrList
	}
	return nil
}

// @PayGrade
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_PayGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiamondIcon         *Image                     `protobuf:"bytes,2,opt,name=diamondIcon,proto3" json:"diamondIcon,omitempty"`
	Name                string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon                *Image                     `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	NextName            string                     `protobuf:"bytes,5,opt,name=nextName,proto3" json:"nextName,omitempty"`
	Level               int64                      `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	NextIcon            *Image                     `protobuf:"bytes,7,opt,name=nextIcon,proto3" json:"nextIcon,omitempty"`
	GradeDescribe       string                     `protobuf:"bytes,13,opt,name=gradeDescribe,proto3" json:"gradeDescribe,omitempty"`
	GradeIconList       []*User_PayGrade_GradeIcon `protobuf:"bytes,14,rep,name=gradeIconList,proto3" json:"gradeIconList,omitempty"`
	ScreenChatType      int64                      `protobuf:"varint,15,opt,name=screenChatType,proto3" json:"screenChatType,omitempty"`
	ImIcon              *Image                     `protobuf:"bytes,16,opt,name=imIcon,proto3" json:"imIcon,omitempty"`
	ImIconWithLevel     *Image                     `protobuf:"bytes,17,opt,name=imIconWithLevel,proto3" json:"imIconWithLevel,omitempty"`
	LiveIcon            *Image                     `protobuf:"bytes,18,opt,name=liveIcon,proto3" json:"liveIcon,omitempty"`
	NewImIconWithLevel  *Image                     `protobuf:"bytes,19,opt,name=newImIconWithLevel,proto3" json:"newImIconWithLevel,omitempty"`
	NewLiveIcon         *Image                     `protobuf:"bytes,20,opt,name=newLiveIcon,proto3" json:"newLiveIcon,omitempty"`
	UpgradeNeedConsume  int64                      `protobuf:"varint,21,opt,name=upgradeNeedConsume,proto3" json:"upgradeNeedConsume,omitempty"`
	NextPrivileges      string                     `protobuf:"bytes,22,opt,name=nextPrivileges,proto3" json:"nextPrivileges,omitempty"`
	Background          *Image                     `protobuf:"bytes,23,opt,name=background,proto3" json:"background,omitempty"`
	BackgroundBack      *Image                     `protobuf:"bytes,24,opt,name=backgroundBack,proto3" json:"backgroundBack,omitempty"`
	Score               int64                      `protobuf:"varint,25,opt,name=score,proto3" json:"score,omitempty"`
	GradeBanner         string                     `protobuf:"bytes,1001,opt,name=gradeBanner,proto3" json:"gradeBanner,omitempty"`
	ProfileDialogBg     *Image                     `protobuf:"bytes,1002,opt,name=profileDialogBg,proto3" json:"profileDialogBg,omitempty"`
	ProfileDialogBgBack *Image                     `protobuf:"bytes,1003,opt,name=profileDialogBgBack,proto3" json:"profileDialogBgBack,omitempty"`
}

func (x *User_PayGrade) Reset() {
	*x = User_PayGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_PayGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_PayGrade) ProtoMessage() {}

func (x *User_PayGrade) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_PayGrade.ProtoReflect.Descriptor instead.
func (*User_PayGrade) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 12}
}

func (x *User_PayGrade) GetDiamondIcon() *Image {
	if x != nil {
		return x.DiamondIcon
	}
	return nil
}

func (x *User_PayGrade) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User_PayGrade) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *User_PayGrade) GetNextName() string {
	if x != nil {
		return x.NextName
	}
	return ""
}

func (x *User_PayGrade) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *User_PayGrade) GetNextIcon() *Image {
	if x != nil {
		return x.NextIcon
	}
	return nil
}

func (x *User_PayGrade) GetGradeDescribe() string {
	if x != nil {
		return x.GradeDescribe
	}
	return ""
}

func (x *User_PayGrade) GetGradeIconList() []*User_PayGrade_GradeIcon {
	if x != nil {
		return x.GradeIconList
	}
	return nil
}

func (x *User_PayGrade) GetScreenChatType() int64 {
	if x != nil {
		return x.ScreenChatType
	}
	return 0
}

func (x *User_PayGrade) GetImIcon() *Image {
	if x != nil {
		return x.ImIcon
	}
	return nil
}

func (x *User_PayGrade) GetImIconWithLevel() *Image {
	if x != nil {
		return x.ImIconWithLevel
	}
	return nil
}

func (x *User_PayGrade) GetLiveIcon() *Image {
	if x != nil {
		return x.LiveIcon
	}
	return nil
}

func (x *User_PayGrade) GetNewImIconWithLevel() *Image {
	if x != nil {
		return x.NewImIconWithLevel
	}
	return nil
}

func (x *User_PayGrade) GetNewLiveIcon() *Image {
	if x != nil {
		return x.NewLiveIcon
	}
	return nil
}

func (x *User_PayGrade) GetUpgradeNeedConsume() int64 {
	if x != nil {
		return x.UpgradeNeedConsume
	}
	return 0
}

func (x *User_PayGrade) GetNextPrivileges() string {
	if x != nil {
		return x.NextPrivileges
	}
	return ""
}

func (x *User_PayGrade) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *User_PayGrade) GetBackgroundBack() *Image {
	if x != nil {
		return x.BackgroundBack
	}
	return nil
}

func (x *User_PayGrade) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *User_PayGrade) GetGradeBanner() string {
	if x != nil {
		return x.GradeBanner
	}
	return ""
}

func (x *User_PayGrade) GetProfileDialogBg() *Image {
	if x != nil {
		return x.ProfileDialogBg
	}
	return nil
}

func (x *User_PayGrade) GetProfileDialogBgBack() *Image {
	if x != nil {
		return x.ProfileDialogBgBack
	}
	return nil
}

// @SubscribeBadge
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_SubscribeBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginImg  *Image `protobuf:"bytes,3,opt,name=originImg,proto3" json:"originImg,omitempty"`
	PreviewImg *Image `protobuf:"bytes,4,opt,name=previewImg,proto3" json:"previewImg,omitempty"`
}

func (x *User_SubscribeBadge) Reset() {
	*x = User_SubscribeBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_SubscribeBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_SubscribeBadge) ProtoMessage() {}

func (x *User_SubscribeBadge) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_SubscribeBadge.ProtoReflect.Descriptor instead.
func (*User_SubscribeBadge) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 13}
}

func (x *User_SubscribeBadge) GetOriginImg() *Image {
	if x != nil {
		return x.OriginImg
	}
	return nil
}

func (x *User_SubscribeBadge) GetPreviewImg() *Image {
	if x != nil {
		return x.PreviewImg
	}
	return nil
}

// @SubscribeInfo
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_SubscribeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualification        bool                 `protobuf:"varint,1,opt,name=qualification,proto3" json:"qualification,omitempty"`
	IsSubscribe          bool                 `protobuf:"varint,2,opt,name=isSubscribe,proto3" json:"isSubscribe,omitempty"`
	Badge                *User_SubscribeBadge `protobuf:"bytes,3,opt,name=badge,proto3" json:"badge,omitempty"`
	EnableSubscription   bool                 `protobuf:"varint,4,opt,name=enableSubscription,proto3" json:"enableSubscription,omitempty"`
	SubscriberCount      int64                `protobuf:"varint,5,opt,name=subscriberCount,proto3" json:"subscriberCount,omitempty"`
	IsInGracePeriod      bool                 `protobuf:"varint,6,opt,name=isInGracePeriod,proto3" json:"isInGracePeriod,omitempty"`
	IsSubscribedToAnchor bool                 `protobuf:"varint,7,opt,name=isSubscribedToAnchor,proto3" json:"isSubscribedToAnchor,omitempty"`
	UserGiftSubAuth      bool                 `protobuf:"varint,9,opt,name=userGiftSubAuth,proto3" json:"userGiftSubAuth,omitempty"`
	AnchorGiftSubAuth    bool                 `protobuf:"varint,10,opt,name=anchorGiftSubAuth,proto3" json:"anchorGiftSubAuth,omitempty"`
}

func (x *User_SubscribeInfo) Reset() {
	*x = User_SubscribeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_SubscribeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_SubscribeInfo) ProtoMessage() {}

func (x *User_SubscribeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_SubscribeInfo.ProtoReflect.Descriptor instead.
func (*User_SubscribeInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 14}
}

func (x *User_SubscribeInfo) GetQualification() bool {
	if x != nil {
		return x.Qualification
	}
	return false
}

func (x *User_SubscribeInfo) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *User_SubscribeInfo) GetBadge() *User_SubscribeBadge {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *User_SubscribeInfo) GetEnableSubscription() bool {
	if x != nil {
		return x.EnableSubscription
	}
	return false
}

func (x *User_SubscribeInfo) GetSubscriberCount() int64 {
	if x != nil {
		return x.SubscriberCount
	}
	return 0
}

func (x *User_SubscribeInfo) GetIsInGracePeriod() bool {
	if x != nil {
		return x.IsInGracePeriod
	}
	return false
}

func (x *User_SubscribeInfo) GetIsSubscribedToAnchor() bool {
	if x != nil {
		return x.IsSubscribedToAnchor
	}
	return false
}

func (x *User_SubscribeInfo) GetUserGiftSubAuth() bool {
	if x != nil {
		return x.UserGiftSubAuth
	}
	return false
}

func (x *User_SubscribeInfo) GetAnchorGiftSubAuth() bool {
	if x != nil {
		return x.AnchorGiftSubAuth
	}
	return false
}

// @UserAttr
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_UserAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMuted      bool  `protobuf:"varint,1,opt,name=isMuted,proto3" json:"isMuted,omitempty"`
	IsAdmin      bool  `protobuf:"varint,2,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	IsSuperAdmin bool  `protobuf:"varint,3,opt,name=isSuperAdmin,proto3" json:"isSuperAdmin,omitempty"`
	MuteDuration int64 `protobuf:"varint,4,opt,name=muteDuration,proto3" json:"muteDuration,omitempty"`
}

func (x *User_UserAttr) Reset() {
	*x = User_UserAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_UserAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_UserAttr) ProtoMessage() {}

func (x *User_UserAttr) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_UserAttr.ProtoReflect.Descriptor instead.
func (*User_UserAttr) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 15}
}

func (x *User_UserAttr) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *User_UserAttr) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *User_UserAttr) GetIsSuperAdmin() bool {
	if x != nil {
		return x.IsSuperAdmin
	}
	return false
}

func (x *User_UserAttr) GetMuteDuration() int64 {
	if x != nil {
		return x.MuteDuration
	}
	return 0
}

// @UserStats
// proto.webcast.data.User
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_UserStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IdStr                string `protobuf:"bytes,2,opt,name=idStr,proto3" json:"idStr,omitempty"`
	FollowingCount       int64  `protobuf:"varint,3,opt,name=followingCount,proto3" json:"followingCount,omitempty"`
	FollowerCount        int64  `protobuf:"varint,4,opt,name=followerCount,proto3" json:"followerCount,omitempty"`
	RecordCount          int64  `protobuf:"varint,5,opt,name=recordCount,proto3" json:"recordCount,omitempty"`
	TotalDuration        int64  `protobuf:"varint,6,opt,name=totalDuration,proto3" json:"totalDuration,omitempty"`
	DailyFanTicketCount  int64  `protobuf:"varint,7,opt,name=dailyFanTicketCount,proto3" json:"dailyFanTicketCount,omitempty"`
	DailyIncome          int64  `protobuf:"varint,8,opt,name=dailyIncome,proto3" json:"dailyIncome,omitempty"`
	ItemCount            int64  `protobuf:"varint,9,opt,name=itemCount,proto3" json:"itemCount,omitempty"`
	FavoriteItemCount    int64  `protobuf:"varint,10,opt,name=favoriteItemCount,proto3" json:"favoriteItemCount,omitempty"`
	DiamondConsumedCount int64  `protobuf:"varint,12,opt,name=diamondConsumedCount,proto3" json:"diamondConsumedCount,omitempty"`
	TuwenItemCount       int64  `protobuf:"varint,13,opt,name=tuwenItemCount,proto3" json:"tuwenItemCount,omitempty"`
}

func (x *User_UserStats) Reset() {
	*x = User_UserStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_UserStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_UserStats) ProtoMessage() {}

func (x *User_UserStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_UserStats.ProtoReflect.Descriptor instead.
func (*User_UserStats) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 16}
}

func (x *User_UserStats) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User_UserStats) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *User_UserStats) GetFollowingCount() int64 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *User_UserStats) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *User_UserStats) GetRecordCount() int64 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

func (x *User_UserStats) GetTotalDuration() int64 {
	if x != nil {
		return x.TotalDuration
	}
	return 0
}

func (x *User_UserStats) GetDailyFanTicketCount() int64 {
	if x != nil {
		return x.DailyFanTicketCount
	}
	return 0
}

func (x *User_UserStats) GetDailyIncome() int64 {
	if x != nil {
		return x.DailyIncome
	}
	return 0
}

func (x *User_UserStats) GetItemCount() int64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *User_UserStats) GetFavoriteItemCount() int64 {
	if x != nil {
		return x.FavoriteItemCount
	}
	return 0
}

func (x *User_UserStats) GetDiamondConsumedCount() int64 {
	if x != nil {
		return x.DiamondConsumedCount
	}
	return 0
}

func (x *User_UserStats) GetTuwenItemCount() int64 {
	if x != nil {
		return x.TuwenItemCount
	}
	return 0
}

// @WalletPackage
// proto.webcast.data.LiveEventInfo
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_LiveEventInfo_WalletPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IapId        string `protobuf:"bytes,1,opt,name=iapId,proto3" json:"iapId,omitempty"`
	UsdPriceShow string `protobuf:"bytes,2,opt,name=usdPriceShow,proto3" json:"usdPriceShow,omitempty"`
}

func (x *User_LiveEventInfo_WalletPackage) Reset() {
	*x = User_LiveEventInfo_WalletPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_LiveEventInfo_WalletPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_LiveEventInfo_WalletPackage) ProtoMessage() {}

func (x *User_LiveEventInfo_WalletPackage) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_LiveEventInfo_WalletPackage.ProtoReflect.Descriptor instead.
func (*User_LiveEventInfo_WalletPackage) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *User_LiveEventInfo_WalletPackage) GetIapId() string {
	if x != nil {
		return x.IapId
	}
	return ""
}

func (x *User_LiveEventInfo_WalletPackage) GetUsdPriceShow() string {
	if x != nil {
		return x.UsdPriceShow
	}
	return ""
}

// @ShopEntranceInfo
// proto.webcast.data.User.EcommerceEntrance
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_ShopEntranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId                string                                              `protobuf:"bytes,1,opt,name=shopId,proto3" json:"shopId,omitempty"`
	ShopName              string                                              `protobuf:"bytes,2,opt,name=shopName,proto3" json:"shopName,omitempty"`
	ShopRating            string                                              `protobuf:"bytes,3,opt,name=shopRating,proto3" json:"shopRating,omitempty"`
	StoreLabel            *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel `protobuf:"bytes,4,opt,name=storeLabel,proto3" json:"storeLabel,omitempty"`
	FormatSoldCount       string                                              `protobuf:"bytes,5,opt,name=formatSoldCount,proto3" json:"formatSoldCount,omitempty"`
	SoldCount             int64                                               `protobuf:"varint,6,opt,name=soldCount,proto3" json:"soldCount,omitempty"`
	ExpRatePercentile     int32                                               `protobuf:"varint,7,opt,name=expRatePercentile,proto3" json:"expRatePercentile,omitempty"`
	ExpRateTopDisplay     string                                              `protobuf:"bytes,8,opt,name=expRateTopDisplay,proto3" json:"expRateTopDisplay,omitempty"`
	RateDisplayStyle      int32                                               `protobuf:"varint,9,opt,name=rateDisplayStyle,proto3" json:"rateDisplayStyle,omitempty"`
	ShowRateNotApplicable bool                                                `protobuf:"varint,10,opt,name=showRateNotApplicable,proto3" json:"showRateNotApplicable,omitempty"`
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) Reset() {
	*x = User_EcommerceEntrance_ShopEntranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_EcommerceEntrance_ShopEntranceInfo) ProtoMessage() {}

func (x *User_EcommerceEntrance_ShopEntranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_EcommerceEntrance_ShopEntranceInfo.ProtoReflect.Descriptor instead.
func (*User_EcommerceEntrance_ShopEntranceInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 0}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetShopId() string {
	if x != nil {
		return x.ShopId
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetShopRating() string {
	if x != nil {
		return x.ShopRating
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetStoreLabel() *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
	if x != nil {
		return x.StoreLabel
	}
	return nil
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetFormatSoldCount() string {
	if x != nil {
		return x.FormatSoldCount
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetSoldCount() int64 {
	if x != nil {
		return x.SoldCount
	}
	return 0
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetExpRatePercentile() int32 {
	if x != nil {
		return x.ExpRatePercentile
	}
	return 0
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetExpRateTopDisplay() string {
	if x != nil {
		return x.ExpRateTopDisplay
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetRateDisplayStyle() int32 {
	if x != nil {
		return x.RateDisplayStyle
	}
	return 0
}

func (x *User_EcommerceEntrance_ShopEntranceInfo) GetShowRateNotApplicable() bool {
	if x != nil {
		return x.ShowRateNotApplicable
	}
	return false
}

// @ShowcaseEntranceInfo
// proto.webcast.data.User.EcommerceEntrance
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_ShowcaseEntranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatSoldCount string `protobuf:"bytes,1,opt,name=formatSoldCount,proto3" json:"formatSoldCount,omitempty"`
	SoldCount       int64  `protobuf:"varint,2,opt,name=soldCount,proto3" json:"soldCount,omitempty"`
}

func (x *User_EcommerceEntrance_ShowcaseEntranceInfo) Reset() {
	*x = User_EcommerceEntrance_ShowcaseEntranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_EcommerceEntrance_ShowcaseEntranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_EcommerceEntrance_ShowcaseEntranceInfo) ProtoMessage() {}

func (x *User_EcommerceEntrance_ShowcaseEntranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_EcommerceEntrance_ShowcaseEntranceInfo.ProtoReflect.Descriptor instead.
func (*User_EcommerceEntrance_ShowcaseEntranceInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 1}
}

func (x *User_EcommerceEntrance_ShowcaseEntranceInfo) GetFormatSoldCount() string {
	if x != nil {
		return x.FormatSoldCount
	}
	return ""
}

func (x *User_EcommerceEntrance_ShowcaseEntranceInfo) GetSoldCount() int64 {
	if x != nil {
		return x.SoldCount
	}
	return 0
}

// @StoreLabel
// proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_ShopEntranceInfo_StoreLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfficialLabel *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel `protobuf:"bytes,1,opt,name=officialLabel,proto3" json:"officialLabel,omitempty"`
	IsBytemall    bool                                                                   `protobuf:"varint,2,opt,name=isBytemall,proto3" json:"isBytemall,omitempty"`
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel) Reset() {
	*x = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel) ProtoMessage() {}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_EcommerceEntrance_ShopEntranceInfo_StoreLabel.ProtoReflect.Descriptor instead.
func (*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 0, 0}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel) GetOfficialLabel() *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
	if x != nil {
		return x.OfficialLabel
	}
	return nil
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel) GetIsBytemall() bool {
	if x != nil {
		return x.IsBytemall
	}
	return false
}

// @StoreOfficialLabel
// proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelImageLight *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage `protobuf:"bytes,1,opt,name=labelImageLight,proto3" json:"labelImageLight,omitempty"`
	LabelImageDark  *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage `protobuf:"bytes,2,opt,name=labelImageDark,proto3" json:"labelImageDark,omitempty"`
	LabelType       int64                                                                                 `protobuf:"varint,3,opt,name=labelType,proto3" json:"labelType,omitempty"` // @warning Enum not found, should be LabelType
	LabelTypeStr    string                                                                                `protobuf:"bytes,4,opt,name=labelTypeStr,proto3" json:"labelTypeStr,omitempty"`
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) Reset() {
	*x = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) ProtoMessage() {}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel.ProtoReflect.Descriptor instead.
func (*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 0, 0, 0}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) GetLabelImageLight() *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
	if x != nil {
		return x.LabelImageLight
	}
	return nil
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) GetLabelImageDark() *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
	if x != nil {
		return x.LabelImageDark
	}
	return nil
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) GetLabelType() int64 {
	if x != nil {
		return x.LabelType
	}
	return 0
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel) GetLabelTypeStr() string {
	if x != nil {
		return x.LabelTypeStr
	}
	return ""
}

// @ShopLabelImage
// proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height       int32    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width        int32    `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Minetype     string   `protobuf:"bytes,3,opt,name=minetype,proto3" json:"minetype,omitempty"`
	ThumbUri     string   `protobuf:"bytes,4,opt,name=thumbUri,proto3" json:"thumbUri,omitempty"`
	ThumbUriList []string `protobuf:"bytes,5,rep,name=thumbUriList,proto3" json:"thumbUriList,omitempty"`
	Uri          string   `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
	UrlList      []string `protobuf:"bytes,7,rep,name=urlList,proto3" json:"urlList,omitempty"`
	Color        string   `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) Reset() {
	*x = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) ProtoMessage() {
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.ProtoReflect.Descriptor instead.
func (*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 7, 0, 0, 0, 0}
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetMinetype() string {
	if x != nil {
		return x.Minetype
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetThumbUri() string {
	if x != nil {
		return x.ThumbUri
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetThumbUriList() []string {
	if x != nil {
		return x.ThumbUriList
	}
	return nil
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

func (x *User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// @FansClubData
// proto.webcast.data.User.FansClub
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_FansClub_FansClubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubName             string                                        `protobuf:"bytes,1,opt,name=clubName,proto3" json:"clubName,omitempty"`
	Level                int32                                         `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	UserFansClubStatus   User_FansClub_FansClubData_UserFansClubStatus `protobuf:"varint,3,opt,name=userFansClubStatus,proto3,enum=User_FansClub_FansClubData_UserFansClubStatus" json:"userFansClubStatus,omitempty"` // Enum
	AvailableGiftIdsList []int64                                       `protobuf:"varint,5,rep,packed,name=availableGiftIdsList,proto3" json:"availableGiftIdsList,omitempty"`
	AnchorId             int64                                         `protobuf:"varint,6,opt,name=anchorId,proto3" json:"anchorId,omitempty"`
}

func (x *User_FansClub_FansClubData) Reset() {
	*x = User_FansClub_FansClubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_FansClub_FansClubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_FansClub_FansClubData) ProtoMessage() {}

func (x *User_FansClub_FansClubData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_FansClub_FansClubData.ProtoReflect.Descriptor instead.
func (*User_FansClub_FansClubData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 8, 0}
}

func (x *User_FansClub_FansClubData) GetClubName() string {
	if x != nil {
		return x.ClubName
	}
	return ""
}

func (x *User_FansClub_FansClubData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *User_FansClub_FansClubData) GetUserFansClubStatus() User_FansClub_FansClubData_UserFansClubStatus {
	if x != nil {
		return x.UserFansClubStatus
	}
	return User_FansClub_FansClubData_NOTJOINED
}

func (x *User_FansClub_FansClubData) GetAvailableGiftIdsList() []int64 {
	if x != nil {
		return x.AvailableGiftIdsList
	}
	return nil
}

func (x *User_FansClub_FansClubData) GetAnchorId() int64 {
	if x != nil {
		return x.AnchorId
	}
	return 0
}

// @GradeIcon
// proto.webcast.data.User.PayGrade
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type User_PayGrade_GradeIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon        *Image `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	IconDiamond int64  `protobuf:"varint,2,opt,name=iconDiamond,proto3" json:"iconDiamond,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	LevelStr    string `protobuf:"bytes,4,opt,name=levelStr,proto3" json:"levelStr,omitempty"`
}

func (x *User_PayGrade_GradeIcon) Reset() {
	*x = User_PayGrade_GradeIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_PayGrade_GradeIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_PayGrade_GradeIcon) ProtoMessage() {}

func (x *User_PayGrade_GradeIcon) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_PayGrade_GradeIcon.ProtoReflect.Descriptor instead.
func (*User_PayGrade_GradeIcon) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5, 12, 0}
}

func (x *User_PayGrade_GradeIcon) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *User_PayGrade_GradeIcon) GetIconDiamond() int64 {
	if x != nil {
		return x.IconDiamond
	}
	return 0
}

func (x *User_PayGrade_GradeIcon) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *User_PayGrade_GradeIcon) GetLevelStr() string {
	if x != nil {
		return x.LevelStr
	}
	return ""
}

type Goal_GoalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCoins       int64 `protobuf:"varint,1,opt,name=totalCoins,proto3" json:"totalCoins,omitempty"`
	TotalContributor int64 `protobuf:"varint,2,opt,name=totalContributor,proto3" json:"totalContributor,omitempty"`
}

func (x *Goal_GoalStats) Reset() {
	*x = Goal_GoalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal_GoalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal_GoalStats) ProtoMessage() {}

func (x *Goal_GoalStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal_GoalStats.ProtoReflect.Descriptor instead.
func (*Goal_GoalStats) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Goal_GoalStats) GetTotalCoins() int64 {
	if x != nil {
		return x.TotalCoins
	}
	return 0
}

func (x *Goal_GoalStats) GetTotalContributor() int64 {
	if x != nil {
		return x.TotalContributor
	}
	return 0
}

type Goal_GoalContributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           int64          `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Avatar           *Image         `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	DisplayId        string         `protobuf:"bytes,3,opt,name=displayId,proto3" json:"displayId,omitempty"`
	Score            int64          `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	UserIdStr        string         `protobuf:"bytes,5,opt,name=userIdStr,proto3" json:"userIdStr,omitempty"`
	InRoom           bool           `protobuf:"varint,6,opt,name=inRoom,proto3" json:"inRoom,omitempty"`
	IsFriend         bool           `protobuf:"varint,7,opt,name=isFriend,proto3" json:"isFriend,omitempty"`
	BadgeList        []*BadgeStruct `protobuf:"bytes,8,rep,name=badgeList,proto3" json:"badgeList,omitempty"`
	FollowByOwner    bool           `protobuf:"varint,9,opt,name=followByOwner,proto3" json:"followByOwner,omitempty"`
	IsFistContribute bool           `protobuf:"varint,10,opt,name=isFistContribute,proto3" json:"isFistContribute,omitempty"`
}

func (x *Goal_GoalContributor) Reset() {
	*x = Goal_GoalContributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal_GoalContributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal_GoalContributor) ProtoMessage() {}

func (x *Goal_GoalContributor) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal_GoalContributor.ProtoReflect.Descriptor instead.
func (*Goal_GoalContributor) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Goal_GoalContributor) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Goal_GoalContributor) GetAvatar() *Image {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *Goal_GoalContributor) GetDisplayId() string {
	if x != nil {
		return x.DisplayId
	}
	return ""
}

func (x *Goal_GoalContributor) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Goal_GoalContributor) GetUserIdStr() string {
	if x != nil {
		return x.UserIdStr
	}
	return ""
}

func (x *Goal_GoalContributor) GetInRoom() bool {
	if x != nil {
		return x.InRoom
	}
	return false
}

func (x *Goal_GoalContributor) GetIsFriend() bool {
	if x != nil {
		return x.IsFriend
	}
	return false
}

func (x *Goal_GoalContributor) GetBadgeList() []*BadgeStruct {
	if x != nil {
		return x.BadgeList
	}
	return nil
}

func (x *Goal_GoalContributor) GetFollowByOwner() bool {
	if x != nil {
		return x.FollowByOwner
	}
	return false
}

func (x *Goal_GoalContributor) GetIsFistContribute() bool {
	if x != nil {
		return x.IsFistContribute
	}
	return false
}

type LinkMicArmiesItems_LinkMicArmiesGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users  []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Points uint32  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *LinkMicArmiesItems_LinkMicArmiesGroup) Reset() {
	*x = LinkMicArmiesItems_LinkMicArmiesGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMicArmiesItems_LinkMicArmiesGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMicArmiesItems_LinkMicArmiesGroup) ProtoMessage() {}

func (x *LinkMicArmiesItems_LinkMicArmiesGroup) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMicArmiesItems_LinkMicArmiesGroup.ProtoReflect.Descriptor instead.
func (*LinkMicArmiesItems_LinkMicArmiesGroup) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{20, 0}
}

func (x *LinkMicArmiesItems_LinkMicArmiesGroup) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *LinkMicArmiesItems_LinkMicArmiesGroup) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type LinkerReplyContent_LinkmicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey      string `protobuf:"bytes,1,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	LinkMicId      int64  `protobuf:"varint,2,opt,name=linkMicId,proto3" json:"linkMicId,omitempty"`
	Joinable       bool   `protobuf:"varint,3,opt,name=joinable,proto3" json:"joinable,omitempty"`
	ConfluenceType int32  `protobuf:"varint,4,opt,name=confluenceType,proto3" json:"confluenceType,omitempty"`
	RtcExtInfo     string `protobuf:"bytes,5,opt,name=rtcExtInfo,proto3" json:"rtcExtInfo,omitempty"`
	RtcAppId       string `protobuf:"bytes,6,opt,name=rtcAppId,proto3" json:"rtcAppId,omitempty"`
	RtcAppSign     string `protobuf:"bytes,7,opt,name=rtcAppSign,proto3" json:"rtcAppSign,omitempty"`
	LinkmicIdStr   string `protobuf:"bytes,8,opt,name=linkmicIdStr,proto3" json:"linkmicIdStr,omitempty"`
	Vendor         int64  `protobuf:"varint,9,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *LinkerReplyContent_LinkmicInfo) Reset() {
	*x = LinkerReplyContent_LinkmicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkerReplyContent_LinkmicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkerReplyContent_LinkmicInfo) ProtoMessage() {}

func (x *LinkerReplyContent_LinkmicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkerReplyContent_LinkmicInfo.ProtoReflect.Descriptor instead.
func (*LinkerReplyContent_LinkmicInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{44, 0}
}

func (x *LinkerReplyContent_LinkmicInfo) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *LinkerReplyContent_LinkmicInfo) GetLinkMicId() int64 {
	if x != nil {
		return x.LinkMicId
	}
	return 0
}

func (x *LinkerReplyContent_LinkmicInfo) GetJoinable() bool {
	if x != nil {
		return x.Joinable
	}
	return false
}

func (x *LinkerReplyContent_LinkmicInfo) GetConfluenceType() int32 {
	if x != nil {
		return x.ConfluenceType
	}
	return 0
}

func (x *LinkerReplyContent_LinkmicInfo) GetRtcExtInfo() string {
	if x != nil {
		return x.RtcExtInfo
	}
	return ""
}

func (x *LinkerReplyContent_LinkmicInfo) GetRtcAppId() string {
	if x != nil {
		return x.RtcAppId
	}
	return ""
}

func (x *LinkerReplyContent_LinkmicInfo) GetRtcAppSign() string {
	if x != nil {
		return x.RtcAppSign
	}
	return ""
}

func (x *LinkerReplyContent_LinkmicInfo) GetLinkmicIdStr() string {
	if x != nil {
		return x.LinkmicIdStr
	}
	return ""
}

func (x *LinkerReplyContent_LinkmicInfo) GetVendor() int64 {
	if x != nil {
		return x.Vendor
	}
	return 0
}

type RTCExtraInfo_RTCEngineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtcAppId     string `protobuf:"bytes,1,opt,name=rtcAppId,proto3" json:"rtcAppId,omitempty"`
	RtcUserId    string `protobuf:"bytes,2,opt,name=rtcUserId,proto3" json:"rtcUserId,omitempty"`
	RtcToken     string `protobuf:"bytes,3,opt,name=rtcToken,proto3" json:"rtcToken,omitempty"`
	RtcChannelId int64  `protobuf:"varint,4,opt,name=rtcChannelId,proto3" json:"rtcChannelId,omitempty"`
}

func (x *RTCExtraInfo_RTCEngineConfig) Reset() {
	*x = RTCExtraInfo_RTCEngineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTCExtraInfo_RTCEngineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCExtraInfo_RTCEngineConfig) ProtoMessage() {}

func (x *RTCExtraInfo_RTCEngineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCExtraInfo_RTCEngineConfig.ProtoReflect.Descriptor instead.
func (*RTCExtraInfo_RTCEngineConfig) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{61, 0}
}

func (x *RTCExtraInfo_RTCEngineConfig) GetRtcAppId() string {
	if x != nil {
		return x.RtcAppId
	}
	return ""
}

func (x *RTCExtraInfo_RTCEngineConfig) GetRtcUserId() string {
	if x != nil {
		return x.RtcUserId
	}
	return ""
}

func (x *RTCExtraInfo_RTCEngineConfig) GetRtcToken() string {
	if x != nil {
		return x.RtcToken
	}
	return ""
}

func (x *RTCExtraInfo_RTCEngineConfig) GetRtcChannelId() int64 {
	if x != nil {
		return x.RtcChannelId
	}
	return 0
}

type RTCExtraInfo_RTCLiveVideoParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyId int32                       `protobuf:"varint,1,opt,name=strategyId,proto3" json:"strategyId,omitempty"`
	Params     *RTCExtraInfo_RTCVideoParam `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *RTCExtraInfo_RTCLiveVideoParam) Reset() {
	*x = RTCExtraInfo_RTCLiveVideoParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTCExtraInfo_RTCLiveVideoParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCExtraInfo_RTCLiveVideoParam) ProtoMessage() {}

func (x *RTCExtraInfo_RTCLiveVideoParam) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCExtraInfo_RTCLiveVideoParam.ProtoReflect.Descriptor instead.
func (*RTCExtraInfo_RTCLiveVideoParam) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{61, 1}
}

func (x *RTCExtraInfo_RTCLiveVideoParam) GetStrategyId() int32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *RTCExtraInfo_RTCLiveVideoParam) GetParams() *RTCExtraInfo_RTCVideoParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type RTCExtraInfo_RTCVideoParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width       int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height      int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Fps         int32 `protobuf:"varint,3,opt,name=fps,proto3" json:"fps,omitempty"`
	BitrateKbps int32 `protobuf:"varint,4,opt,name=bitrateKbps,proto3" json:"bitrateKbps,omitempty"`
}

func (x *RTCExtraInfo_RTCVideoParam) Reset() {
	*x = RTCExtraInfo_RTCVideoParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTCExtraInfo_RTCVideoParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCExtraInfo_RTCVideoParam) ProtoMessage() {}

func (x *RTCExtraInfo_RTCVideoParam) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCExtraInfo_RTCVideoParam.ProtoReflect.Descriptor instead.
func (*RTCExtraInfo_RTCVideoParam) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{61, 2}
}

func (x *RTCExtraInfo_RTCVideoParam) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RTCExtraInfo_RTCVideoParam) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RTCExtraInfo_RTCVideoParam) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *RTCExtraInfo_RTCVideoParam) GetBitrateKbps() int32 {
	if x != nil {
		return x.BitrateKbps
	}
	return 0
}

type RTCExtraInfo_RTCBitrateMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xx1 int32 `protobuf:"varint,1,opt,name=xx1,proto3" json:"xx1,omitempty"`
	Xx2 int32 `protobuf:"varint,2,opt,name=xx2,proto3" json:"xx2,omitempty"`
	Xx3 int32 `protobuf:"varint,3,opt,name=xx3,proto3" json:"xx3,omitempty"`
	Xx4 int32 `protobuf:"varint,4,opt,name=xx4,proto3" json:"xx4,omitempty"`
}

func (x *RTCExtraInfo_RTCBitrateMap) Reset() {
	*x = RTCExtraInfo_RTCBitrateMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTCExtraInfo_RTCBitrateMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCExtraInfo_RTCBitrateMap) ProtoMessage() {}

func (x *RTCExtraInfo_RTCBitrateMap) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCExtraInfo_RTCBitrateMap.ProtoReflect.Descriptor instead.
func (*RTCExtraInfo_RTCBitrateMap) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{61, 3}
}

func (x *RTCExtraInfo_RTCBitrateMap) GetXx1() int32 {
	if x != nil {
		return x.Xx1
	}
	return 0
}

func (x *RTCExtraInfo_RTCBitrateMap) GetXx2() int32 {
	if x != nil {
		return x.Xx2
	}
	return 0
}

func (x *RTCExtraInfo_RTCBitrateMap) GetXx3() int32 {
	if x != nil {
		return x.Xx3
	}
	return 0
}

func (x *RTCExtraInfo_RTCBitrateMap) GetXx4() int32 {
	if x != nil {
		return x.Xx4
	}
	return 0
}

type MultiLiveContent_InviteBizContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorSettingInfo     *LinkmicUserSettingInfo `protobuf:"bytes,1,opt,name=anchorSettingInfo,proto3" json:"anchorSettingInfo,omitempty"`
	InviteSource          int64                   `protobuf:"varint,2,opt,name=inviteSource,proto3" json:"inviteSource,omitempty"` // @warning Enum not found, should be InviteSource
	OperatorUserInfo      *User                   `protobuf:"bytes,3,opt,name=operatorUserInfo,proto3" json:"operatorUserInfo,omitempty"`
	OperatorLinkAdminType int64                   `protobuf:"varint,4,opt,name=operatorLinkAdminType,proto3" json:"operatorLinkAdminType,omitempty"` // @warning Enum not found, should be OperatorLinkAdminType
	InviteeUserInfo       *User                   `protobuf:"bytes,5,opt,name=inviteeUserInfo,proto3" json:"inviteeUserInfo,omitempty"`
}

func (x *MultiLiveContent_InviteBizContent) Reset() {
	*x = MultiLiveContent_InviteBizContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLiveContent_InviteBizContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLiveContent_InviteBizContent) ProtoMessage() {}

func (x *MultiLiveContent_InviteBizContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLiveContent_InviteBizContent.ProtoReflect.Descriptor instead.
func (*MultiLiveContent_InviteBizContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{64, 0}
}

func (x *MultiLiveContent_InviteBizContent) GetAnchorSettingInfo() *LinkmicUserSettingInfo {
	if x != nil {
		return x.AnchorSettingInfo
	}
	return nil
}

func (x *MultiLiveContent_InviteBizContent) GetInviteSource() int64 {
	if x != nil {
		return x.InviteSource
	}
	return 0
}

func (x *MultiLiveContent_InviteBizContent) GetOperatorUserInfo() *User {
	if x != nil {
		return x.OperatorUserInfo
	}
	return nil
}

func (x *MultiLiveContent_InviteBizContent) GetOperatorLinkAdminType() int64 {
	if x != nil {
		return x.OperatorLinkAdminType
	}
	return 0
}

func (x *MultiLiveContent_InviteBizContent) GetInviteeUserInfo() *User {
	if x != nil {
		return x.InviteeUserInfo
	}
	return nil
}

type MultiLiveContent_ReplyBizContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkType            int32 `protobuf:"varint,1,opt,name=linkType,proto3" json:"linkType,omitempty"`
	IsTurnOffInvitation int32 `protobuf:"varint,2,opt,name=isTurnOffInvitation,proto3" json:"isTurnOffInvitation,omitempty"`
	ReplyUserInfo       *User `protobuf:"bytes,3,opt,name=replyUserInfo,proto3" json:"replyUserInfo,omitempty"`
}

func (x *MultiLiveContent_ReplyBizContent) Reset() {
	*x = MultiLiveContent_ReplyBizContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLiveContent_ReplyBizContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLiveContent_ReplyBizContent) ProtoMessage() {}

func (x *MultiLiveContent_ReplyBizContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLiveContent_ReplyBizContent.ProtoReflect.Descriptor instead.
func (*MultiLiveContent_ReplyBizContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{64, 1}
}

func (x *MultiLiveContent_ReplyBizContent) GetLinkType() int32 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

func (x *MultiLiveContent_ReplyBizContent) GetIsTurnOffInvitation() int32 {
	if x != nil {
		return x.IsTurnOffInvitation
	}
	return 0
}

func (x *MultiLiveContent_ReplyBizContent) GetReplyUserInfo() *User {
	if x != nil {
		return x.ReplyUserInfo
	}
	return nil
}

type MultiLiveContent_PermitBizContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorSettingInfo     *LinkmicUserSettingInfo `protobuf:"bytes,1,opt,name=anchorSettingInfo,proto3" json:"anchorSettingInfo,omitempty"`
	ExpireTimestamp       int64                   `protobuf:"varint,2,opt,name=expireTimestamp,proto3" json:"expireTimestamp,omitempty"`
	OperatorUserInfo      *User                   `protobuf:"bytes,3,opt,name=operatorUserInfo,proto3" json:"operatorUserInfo,omitempty"`
	OperatorLinkAdminType int64                   `protobuf:"varint,4,opt,name=operatorLinkAdminType,proto3" json:"operatorLinkAdminType,omitempty"` // @warning Enum not found, should be OperatorLinkAdminType
}

func (x *MultiLiveContent_PermitBizContent) Reset() {
	*x = MultiLiveContent_PermitBizContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLiveContent_PermitBizContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLiveContent_PermitBizContent) ProtoMessage() {}

func (x *MultiLiveContent_PermitBizContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLiveContent_PermitBizContent.ProtoReflect.Descriptor instead.
func (*MultiLiveContent_PermitBizContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{64, 2}
}

func (x *MultiLiveContent_PermitBizContent) GetAnchorSettingInfo() *LinkmicUserSettingInfo {
	if x != nil {
		return x.AnchorSettingInfo
	}
	return nil
}

func (x *MultiLiveContent_PermitBizContent) GetExpireTimestamp() int64 {
	if x != nil {
		return x.ExpireTimestamp
	}
	return 0
}

func (x *MultiLiveContent_PermitBizContent) GetOperatorUserInfo() *User {
	if x != nil {
		return x.OperatorUserInfo
	}
	return nil
}

func (x *MultiLiveContent_PermitBizContent) GetOperatorLinkAdminType() int64 {
	if x != nil {
		return x.OperatorLinkAdminType
	}
	return 0
}

type MultiLiveContent_KickOutBizContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorUserInfo      *User `protobuf:"bytes,1,opt,name=operatorUserInfo,proto3" json:"operatorUserInfo,omitempty"`
	OperatorLinkAdminType int64 `protobuf:"varint,2,opt,name=operatorLinkAdminType,proto3" json:"operatorLinkAdminType,omitempty"` // @warning Enum not found, should be OperatorLinkAdminType
	KickPlayerUserInfo    *User `protobuf:"bytes,3,opt,name=kickPlayerUserInfo,proto3" json:"kickPlayerUserInfo,omitempty"`
}

func (x *MultiLiveContent_KickOutBizContent) Reset() {
	*x = MultiLiveContent_KickOutBizContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLiveContent_KickOutBizContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLiveContent_KickOutBizContent) ProtoMessage() {}

func (x *MultiLiveContent_KickOutBizContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLiveContent_KickOutBizContent.ProtoReflect.Descriptor instead.
func (*MultiLiveContent_KickOutBizContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{64, 3}
}

func (x *MultiLiveContent_KickOutBizContent) GetOperatorUserInfo() *User {
	if x != nil {
		return x.OperatorUserInfo
	}
	return nil
}

func (x *MultiLiveContent_KickOutBizContent) GetOperatorLinkAdminType() int64 {
	if x != nil {
		return x.OperatorLinkAdminType
	}
	return 0
}

func (x *MultiLiveContent_KickOutBizContent) GetKickPlayerUserInfo() *User {
	if x != nil {
		return x.KickPlayerUserInfo
	}
	return nil
}

type BusinessContent_CohostContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinGroupBizContent *BusinessContent_JoinGroupBizContent `protobuf:"bytes,1,opt,name=joinGroupBizContent,proto3" json:"joinGroupBizContent,omitempty"`
}

func (x *BusinessContent_CohostContent) Reset() {
	*x = BusinessContent_CohostContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_CohostContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_CohostContent) ProtoMessage() {}

func (x *BusinessContent_CohostContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_CohostContent.ProtoReflect.Descriptor instead.
func (*BusinessContent_CohostContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 0}
}

func (x *BusinessContent_CohostContent) GetJoinGroupBizContent() *BusinessContent_JoinGroupBizContent {
	if x != nil {
		return x.JoinGroupBizContent
	}
	return nil
}

type BusinessContent_JoinGroupBizContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromRoomAgeRestricted int32                                  `protobuf:"varint,1,opt,name=fromRoomAgeRestricted,proto3" json:"fromRoomAgeRestricted,omitempty"`
	FromTag               *BusinessContent_Tag                   `protobuf:"bytes,2,opt,name=fromTag,proto3" json:"fromTag,omitempty"`
	Dialog                *BusinessContent_PerceptionDialogInfo  `protobuf:"bytes,3,opt,name=dialog,proto3" json:"dialog,omitempty"`
	PunishInfo            *PunishEventInfo                       `protobuf:"bytes,4,opt,name=punishInfo,proto3" json:"punishInfo,omitempty"`
	JoinGroupMsgExtra     *BusinessContent_JoinGroupMessageExtra `protobuf:"bytes,101,opt,name=joinGroupMsgExtra,proto3" json:"joinGroupMsgExtra,omitempty"`
}

func (x *BusinessContent_JoinGroupBizContent) Reset() {
	*x = BusinessContent_JoinGroupBizContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_JoinGroupBizContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_JoinGroupBizContent) ProtoMessage() {}

func (x *BusinessContent_JoinGroupBizContent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_JoinGroupBizContent.ProtoReflect.Descriptor instead.
func (*BusinessContent_JoinGroupBizContent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 1}
}

func (x *BusinessContent_JoinGroupBizContent) GetFromRoomAgeRestricted() int32 {
	if x != nil {
		return x.FromRoomAgeRestricted
	}
	return 0
}

func (x *BusinessContent_JoinGroupBizContent) GetFromTag() *BusinessContent_Tag {
	if x != nil {
		return x.FromTag
	}
	return nil
}

func (x *BusinessContent_JoinGroupBizContent) GetDialog() *BusinessContent_PerceptionDialogInfo {
	if x != nil {
		return x.Dialog
	}
	return nil
}

func (x *BusinessContent_JoinGroupBizContent) GetPunishInfo() *PunishEventInfo {
	if x != nil {
		return x.PunishInfo
	}
	return nil
}

func (x *BusinessContent_JoinGroupBizContent) GetJoinGroupMsgExtra() *BusinessContent_JoinGroupMessageExtra {
	if x != nil {
		return x.JoinGroupMsgExtra
	}
	return nil
}

type BusinessContent_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType  int32  `protobuf:"varint,1,opt,name=tagType,proto3" json:"tagType,omitempty"`
	TagValue string `protobuf:"bytes,2,opt,name=tagValue,proto3" json:"tagValue,omitempty"`
	TagText  string `protobuf:"bytes,3,opt,name=tagText,proto3" json:"tagText,omitempty"`
}

func (x *BusinessContent_Tag) Reset() {
	*x = BusinessContent_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_Tag) ProtoMessage() {}

func (x *BusinessContent_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_Tag.ProtoReflect.Descriptor instead.
func (*BusinessContent_Tag) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 2}
}

func (x *BusinessContent_Tag) GetTagType() int32 {
	if x != nil {
		return x.TagType
	}
	return 0
}

func (x *BusinessContent_Tag) GetTagValue() string {
	if x != nil {
		return x.TagValue
	}
	return ""
}

func (x *BusinessContent_Tag) GetTagText() string {
	if x != nil {
		return x.TagText
	}
	return ""
}

type BusinessContent_PerceptionDialogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconType            int64                                       `protobuf:"varint,1,opt,name=iconType,proto3" json:"iconType,omitempty"` // @warning Enum not found, should be IconType
	Title               *Text                                       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	SubTitle            *Text                                       `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"subTitle,omitempty"`
	AdviceActionText    *Text                                       `protobuf:"bytes,4,opt,name=adviceActionText,proto3" json:"adviceActionText,omitempty"`
	DefaultActionText   *Text                                       `protobuf:"bytes,5,opt,name=defaultActionText,proto3" json:"defaultActionText,omitempty"`
	ViolationDetailUrl  string                                      `protobuf:"bytes,6,opt,name=violationDetailUrl,proto3" json:"violationDetailUrl,omitempty"`
	Scene               int32                                       `protobuf:"varint,7,opt,name=scene,proto3" json:"scene,omitempty"`
	TargetUserId        int64                                       `protobuf:"varint,8,opt,name=targetUserId,proto3" json:"targetUserId,omitempty"`
	TargetRoomId        int64                                       `protobuf:"varint,9,opt,name=targetRoomId,proto3" json:"targetRoomId,omitempty"`
	CountDownTime       int64                                       `protobuf:"varint,10,opt,name=countDownTime,proto3" json:"countDownTime,omitempty"`
	ShowFeedback        bool                                        `protobuf:"varint,11,opt,name=showFeedback,proto3" json:"showFeedback,omitempty"`
	FeedbackOptionsList []*BusinessContent_PerceptionFeedbackOption `protobuf:"bytes,12,rep,name=feedbackOptionsList,proto3" json:"feedbackOptionsList,omitempty"`
	PolicyTip           int64                                       `protobuf:"varint,13,opt,name=policyTip,proto3" json:"policyTip,omitempty"`
}

func (x *BusinessContent_PerceptionDialogInfo) Reset() {
	*x = BusinessContent_PerceptionDialogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_PerceptionDialogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_PerceptionDialogInfo) ProtoMessage() {}

func (x *BusinessContent_PerceptionDialogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_PerceptionDialogInfo.ProtoReflect.Descriptor instead.
func (*BusinessContent_PerceptionDialogInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 3}
}

func (x *BusinessContent_PerceptionDialogInfo) GetIconType() int64 {
	if x != nil {
		return x.IconType
	}
	return 0
}

func (x *BusinessContent_PerceptionDialogInfo) GetTitle() *Text {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *BusinessContent_PerceptionDialogInfo) GetSubTitle() *Text {
	if x != nil {
		return x.SubTitle
	}
	return nil
}

func (x *BusinessContent_PerceptionDialogInfo) GetAdviceActionText() *Text {
	if x != nil {
		return x.AdviceActionText
	}
	return nil
}

func (x *BusinessContent_PerceptionDialogInfo) GetDefaultActionText() *Text {
	if x != nil {
		return x.DefaultActionText
	}
	return nil
}

func (x *BusinessContent_PerceptionDialogInfo) GetViolationDetailUrl() string {
	if x != nil {
		return x.ViolationDetailUrl
	}
	return ""
}

func (x *BusinessContent_PerceptionDialogInfo) GetScene() int32 {
	if x != nil {
		return x.Scene
	}
	return 0
}

func (x *BusinessContent_PerceptionDialogInfo) GetTargetUserId() int64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

func (x *BusinessContent_PerceptionDialogInfo) GetTargetRoomId() int64 {
	if x != nil {
		return x.TargetRoomId
	}
	return 0
}

func (x *BusinessContent_PerceptionDialogInfo) GetCountDownTime() int64 {
	if x != nil {
		return x.CountDownTime
	}
	return 0
}

func (x *BusinessContent_PerceptionDialogInfo) GetShowFeedback() bool {
	if x != nil {
		return x.ShowFeedback
	}
	return false
}

func (x *BusinessContent_PerceptionDialogInfo) GetFeedbackOptionsList() []*BusinessContent_PerceptionFeedbackOption {
	if x != nil {
		return x.FeedbackOptionsList
	}
	return nil
}

func (x *BusinessContent_PerceptionDialogInfo) GetPolicyTip() int64 {
	if x != nil {
		return x.PolicyTip
	}
	return 0
}

type BusinessContent_PerceptionFeedbackOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContentKey string `protobuf:"bytes,2,opt,name=contentKey,proto3" json:"contentKey,omitempty"`
}

func (x *BusinessContent_PerceptionFeedbackOption) Reset() {
	*x = BusinessContent_PerceptionFeedbackOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_PerceptionFeedbackOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_PerceptionFeedbackOption) ProtoMessage() {}

func (x *BusinessContent_PerceptionFeedbackOption) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_PerceptionFeedbackOption.ProtoReflect.Descriptor instead.
func (*BusinessContent_PerceptionFeedbackOption) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 4}
}

func (x *BusinessContent_PerceptionFeedbackOption) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessContent_PerceptionFeedbackOption) GetContentKey() string {
	if x != nil {
		return x.ContentKey
	}
	return ""
}

type BusinessContent_JoinGroupMessageExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType     int64                                               `protobuf:"varint,1,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	Extra          *BusinessContent_JoinGroupMessageExtra_RivalExtra   `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	OtherUsersList []*BusinessContent_JoinGroupMessageExtra_RivalExtra `protobuf:"bytes,3,rep,name=otherUsersList,proto3" json:"otherUsersList,omitempty"`
}

func (x *BusinessContent_JoinGroupMessageExtra) Reset() {
	*x = BusinessContent_JoinGroupMessageExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_JoinGroupMessageExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_JoinGroupMessageExtra) ProtoMessage() {}

func (x *BusinessContent_JoinGroupMessageExtra) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_JoinGroupMessageExtra.ProtoReflect.Descriptor instead.
func (*BusinessContent_JoinGroupMessageExtra) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 5}
}

func (x *BusinessContent_JoinGroupMessageExtra) GetSourceType() int64 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *BusinessContent_JoinGroupMessageExtra) GetExtra() *BusinessContent_JoinGroupMessageExtra_RivalExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *BusinessContent_JoinGroupMessageExtra) GetOtherUsersList() []*BusinessContent_JoinGroupMessageExtra_RivalExtra {
	if x != nil {
		return x.OtherUsersList
	}
	return nil
}

type BusinessContent_Hashtag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Image     *Image           `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Namespace HashtagNamespace `protobuf:"varint,4,opt,name=namespace,proto3,enum=HashtagNamespace" json:"namespace,omitempty"` // Enum
}

func (x *BusinessContent_Hashtag) Reset() {
	*x = BusinessContent_Hashtag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_Hashtag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_Hashtag) ProtoMessage() {}

func (x *BusinessContent_Hashtag) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_Hashtag.ProtoReflect.Descriptor instead.
func (*BusinessContent_Hashtag) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 6}
}

func (x *BusinessContent_Hashtag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessContent_Hashtag) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BusinessContent_Hashtag) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *BusinessContent_Hashtag) GetNamespace() HashtagNamespace {
	if x != nil {
		return x.Namespace
	}
	return HashtagNamespace_GLOBAL
}

type BusinessContent_TopHostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType string `protobuf:"bytes,1,opt,name=rankType,proto3" json:"rankType,omitempty"`
	TopIndex int64  `protobuf:"varint,2,opt,name=topIndex,proto3" json:"topIndex,omitempty"`
}

func (x *BusinessContent_TopHostInfo) Reset() {
	*x = BusinessContent_TopHostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_TopHostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_TopHostInfo) ProtoMessage() {}

func (x *BusinessContent_TopHostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_TopHostInfo.ProtoReflect.Descriptor instead.
func (*BusinessContent_TopHostInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 7}
}

func (x *BusinessContent_TopHostInfo) GetRankType() string {
	if x != nil {
		return x.RankType
	}
	return ""
}

func (x *BusinessContent_TopHostInfo) GetTopIndex() int64 {
	if x != nil {
		return x.TopIndex
	}
	return 0
}

// @RivalExtra
// proto.webcast.im.JoinGroupMessageExtra
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type BusinessContent_JoinGroupMessageExtra_RivalExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCount          int64                                                                `protobuf:"varint,4,opt,name=userCount,proto3" json:"userCount,omitempty"`
	AvatarThumb        *Image                                                               `protobuf:"bytes,5,opt,name=avatarThumb,proto3" json:"avatarThumb,omitempty"`
	DisplayId          string                                                               `protobuf:"bytes,6,opt,name=displayId,proto3" json:"displayId,omitempty"`
	AuthenticationInfo *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo `protobuf:"bytes,7,opt,name=authenticationInfo,proto3" json:"authenticationInfo,omitempty"`
	Nickname           string                                                               `protobuf:"bytes,8,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FollowStatus       int64                                                                `protobuf:"varint,9,opt,name=followStatus,proto3" json:"followStatus,omitempty"`
	Hashtag            *BusinessContent_Hashtag                                             `protobuf:"bytes,10,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	TopHostInfo        *BusinessContent_TopHostInfo                                         `protobuf:"bytes,11,opt,name=topHostInfo,proto3" json:"topHostInfo,omitempty"`
	UserId             int64                                                                `protobuf:"varint,12,opt,name=userId,proto3" json:"userId,omitempty"`
	IsBestTeammate     bool                                                                 `protobuf:"varint,13,opt,name=isBestTeammate,proto3" json:"isBestTeammate,omitempty"`
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) Reset() {
	*x = BusinessContent_JoinGroupMessageExtra_RivalExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_JoinGroupMessageExtra_RivalExtra) ProtoMessage() {}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_JoinGroupMessageExtra_RivalExtra.ProtoReflect.Descriptor instead.
func (*BusinessContent_JoinGroupMessageExtra_RivalExtra) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 5, 0}
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetAvatarThumb() *Image {
	if x != nil {
		return x.AvatarThumb
	}
	return nil
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetDisplayId() string {
	if x != nil {
		return x.DisplayId
	}
	return ""
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetAuthenticationInfo() *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
	if x != nil {
		return x.AuthenticationInfo
	}
	return nil
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetFollowStatus() int64 {
	if x != nil {
		return x.FollowStatus
	}
	return 0
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetHashtag() *BusinessContent_Hashtag {
	if x != nil {
		return x.Hashtag
	}
	return nil
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetTopHostInfo() *BusinessContent_TopHostInfo {
	if x != nil {
		return x.TopHostInfo
	}
	return nil
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra) GetIsBestTeammate() bool {
	if x != nil {
		return x.IsBestTeammate
	}
	return false
}

type BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomVerify           string `protobuf:"bytes,1,opt,name=customVerify,proto3" json:"customVerify,omitempty"`
	EnterpriseVerifyReason string `protobuf:"bytes,2,opt,name=enterpriseVerifyReason,proto3" json:"enterpriseVerifyReason,omitempty"`
	AuthenticationBadge    *Image `protobuf:"bytes,3,opt,name=authenticationBadge,proto3" json:"authenticationBadge,omitempty"`
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) Reset() {
	*x = BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) ProtoMessage() {}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo.ProtoReflect.Descriptor instead.
func (*BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79, 5, 0, 0}
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) GetCustomVerify() string {
	if x != nil {
		return x.CustomVerify
	}
	return ""
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) GetEnterpriseVerifyReason() string {
	if x != nil {
		return x.EnterpriseVerifyReason
	}
	return ""
}

func (x *BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo) GetAuthenticationBadge() *Image {
	if x != nil {
		return x.AuthenticationBadge
	}
	return nil
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x0a, 0x0a, 0x06, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x27,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4b, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x56, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x63, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x49, 0x64, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x49, 0x64, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x03, 0x73, 0x65, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x45, 0x49, 0x52, 0x03, 0x73, 0x65, 0x69, 0x12, 0x39, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52,
	0x08, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x72,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x65,
	0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x6f, 0x72, 0x57, 0x65, 0x62, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x46, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x65, 0x62, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x65, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x4d, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x61, 0x0a, 0x0e, 0x4c,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x45, 0x49, 0x12, 0x31, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x51,
	0x0a, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x22, 0x66, 0x0a, 0x12, 0x49, 0x4d, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4d, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47,
	0x59, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x22, 0xb2, 0x07, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x69, 0x65, 0x63, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xab, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a,
	0x0f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65,
	0x66, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x72,
	0x1a, 0x41, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x49, 0x64, 0x1a, 0x4f, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x1a, 0x48, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x59,
	0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x22, 0xbc, 0x11, 0x0a, 0x0b, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x73, 0x74, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x1a, 0x99,
	0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x12, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x63, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x63, 0x6f, 0x6e, 0x41, 0x75,
	0x74, 0x6f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x48,
	0x0a, 0x1f, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x47, 0x75, 0x65, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x63,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x54, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x1a, 0x6b, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x1a, 0xda, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x73, 0x65,
	0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x1a, 0x92, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x2a, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x1a, 0x33, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a, 0x6d, 0x0a, 0x0a, 0x49, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x1f, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x22, 0x47, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x14,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54,
	0x52, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x10, 0x17,
	0x22, 0xa2, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x44, 0x47, 0x45, 0x44, 0x49,
	0x53, 0x50, 0x4c, 0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x44, 0x47, 0x45, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x41, 0x44, 0x47, 0x45, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41,
	0x44, 0x47, 0x45, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x44, 0x47, 0x45,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42,
	0x49, 0x4e, 0x45, 0x10, 0x04, 0x22, 0x44, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x42, 0x0b, 0x0a, 0x09, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x0d, 0x0a, 0x0a, 0x47, 0x69, 0x66,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f,
	0x6d, 0x62, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x45, 0x0a, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x47, 0x69, 0x66, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x65, 0x66, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x42, 0x65, 0x66, 0x76, 0x69, 0x65, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x78, 0x47, 0x69, 0x66, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x78, 0x47, 0x69, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x61, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x47,
	0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x1a, 0xd0, 0x01, 0x0a, 0x0f, 0x47, 0x69, 0x66, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x79, 0x6e,
	0x78, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x4c, 0x79, 0x6e, 0x78, 0x55, 0x72, 0x6c, 0x1a, 0x9b, 0x02, 0x0a, 0x14, 0x47, 0x69,
	0x66, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x57, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a,
	0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x42,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69, 0x66,
	0x74, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x1a, 0x6a, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x47, 0x69, 0x66, 0x74, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a,
	0x11, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x11, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x1a, 0xcb, 0x02, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69,
	0x66, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x07, 0x62, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x62, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x73,
	0x68, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0xb2, 0x54, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x69, 0x6f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x69, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x69, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55,
	0x72, 0x69, 0x12, 0x2e, 0x0a, 0x0e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x08, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c,
	0x75, 0x62, 0x52, 0x08, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x24, 0x0a, 0x06,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x11, 0x72, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x11, 0x72,
	0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x6f, 0x70, 0x56, 0x69, 0x70, 0x4e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x6f, 0x70, 0x56, 0x69, 0x70, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4f, 0x77, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x77,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x46, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x12, 0x77, 0x65, 0x62, 0x63, 0x61,
	0x73, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x12, 0x77, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x74, 0x6f, 0x70,
	0x46, 0x61, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x46, 0x61, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x55, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x48,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x57, 0x65,
	0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x65, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x41,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x73, 0x43,
	0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x51, 0x0a, 0x23, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x68, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x57, 0x68, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x35, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xed, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18, 0xee,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77,
	0x49, 0x6e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x2d, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xef, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf0,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x12, 0x34,
	0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xf3, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4a, 0x70,
	0x67, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4a, 0x70, 0x67, 0x12, 0x1b, 0x0a, 0x08, 0x62,
	0x67, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x67, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0xf9,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x63, 0x68, 0x61, 0x74, 0x18, 0xfb, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x6d, 0x67, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x11, 0x0a, 0x03, 0x65,
	0x78, 0x70, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x27,
	0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x66, 0x6f, 0x6c, 0x64, 0x53,
	0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x18, 0xff, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x11, 0x69, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x83,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x69, 0x64, 0x53, 0x74,
	0x72, 0x18, 0x84, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x1f, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x85, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18,
	0x86, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x87, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x6e, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x88, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x11, 0x70, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x89, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x75, 0x73,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x44, 0x69, 0x67, 0x67, 0x18, 0x8a, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x44, 0x69, 0x67, 0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x70,
	0x75, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x8b, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x2b, 0x0a, 0x10,
	0x70, 0x75, 0x73, 0x68, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x8c, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x75, 0x73,
	0x68, 0x49, 0x63, 0x68, 0x61, 0x74, 0x18, 0x8d, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70,
	0x75, 0x73, 0x68, 0x49, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8e, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x75, 0x73,
	0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x18, 0x8f, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x12, 0x70, 0x75, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x90, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70,
	0x75, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x91, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x93, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1b, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x94, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x95, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x63, 0x6d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x96, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63,
	0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x97, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x98, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0xce, 0x03, 0x0a, 0x0d, 0x4c, 0x69,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x61, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x1a, 0x49, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x61, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x75, 0x73, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x22, 0x5c, 0x0a, 0x0e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x43, 0x4f, 0x49, 0x4e, 0x53,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x43, 0x41, 0x53, 0x48, 0x10, 0x02, 0x1a, 0x50, 0x0a, 0x0c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x05, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x74, 0x61, 0x67, 0x1a, 0xe1, 0x04, 0x0a,
	0x0b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x12, 0x38, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x42, 0x61,
	0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e,
	0x1a, 0xaa, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x1a, 0xc1, 0x02,
	0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x53, 0x68,
	0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x8c, 0x02, 0x0a, 0x06, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x62, 0x62, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x17, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x1b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x1a, 0x4c, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xf0,
	0x0e, 0x0a, 0x11, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x54, 0x0a,
	0x10, 0x73, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x63,
	0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x14, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xa0, 0x0a, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x53,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x78, 0x70, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x70, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xdc, 0x06, 0x0a, 0x0a, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x6c, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x42, 0x79, 0x74, 0x65,
	0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x79,
	0x74, 0x65, 0x6d, 0x61, 0x6c, 0x6c, 0x1a, 0xb5, 0x04, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x7f, 0x0a,
	0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x7d,
	0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x1a,
	0xdc, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x55, 0x72, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x87,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x56, 0x10,
	0x03, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x5f,
	0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x04, 0x1a, 0x5e, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x53, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x0c,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x4f,
	0x57, 0x43, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x4f, 0x50, 0x10,
	0x02, 0x1a, 0xd7, 0x03, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x2e, 0x46, 0x61, 0x6e,
	0x73, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xe2, 0x02, 0x0a, 0x0c, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c,
	0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x2e, 0x46,
	0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x69, 0x66, 0x74, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x49, 0x64, 0x22, 0x31, 0x0a, 0x09, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x43, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x49,
	0x43, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x3d, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x6e,
	0x73, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x22, 0x35, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x1a, 0xa6, 0x01, 0x0a, 0x0c,
	0x46, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x61, 0x6e, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x61, 0x6e, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61,
	0x6e, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x61, 0x6e, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x9e, 0x01, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x53, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x53, 0x74, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x73, 0x53, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xf4, 0x07, 0x0a, 0x08, 0x50,
	0x61, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69,
	0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0f, 0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x12, 0x6e,
	0x65, 0x77, 0x49, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x12, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x12, 0x39, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67, 0x42, 0x61, 0x63, 0x6b,
	0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x67,
	0x42, 0x61, 0x63, 0x6b, 0x1a, 0x7b, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74,
	0x72, 0x1a, 0x5e, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d,
	0x67, 0x1a, 0x93, 0x03, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x53, 0x75, 0x62, 0x41, 0x75,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x47, 0x69,
	0x66, 0x74, 0x53, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x53, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x53, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x86, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x75, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x75, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xc3, 0x03, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x61,
	0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x75, 0x77, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x75, 0x77, 0x65, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x05, 0x45, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x09,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x10,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0f,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x22, 0xb4, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x47, 0x69, 0x76, 0x65, 0x72,
	0x4f, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x47, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x69, 0x73, 0x4d, 0x75, 0x74,
	0x75, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73,
	0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4f, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xc5, 0x06, 0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x57, 0x0a, 0x09, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x1a,
	0xcd, 0x02, 0x0a, 0x0f, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x79, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x46, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x46, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22,
	0x2d, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x7e,
	0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x49,
	0x0a, 0x0b, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x22, 0x66, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x33, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x69, 0x6b, 0x54,
	0x6f, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x40,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31,
	0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x35,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x36, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x37, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x37, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x38, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x39, 0x22, 0x74, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x33, 0x22, 0x8c,
	0x01, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xcb, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x41, 0x72, 0x6d, 0x69, 0x65, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x69, 0x63, 0x41, 0x72, 0x6d, 0x69, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x41, 0x72, 0x6d, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x1a, 0x49, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x41, 0x72, 0x6d, 0x69, 0x65,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x10,
	0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x7e, 0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x78, 0x12, 0x2d, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x68, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x22, 0x49, 0x0a, 0x16, 0x50, 0x6f,
	0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xf4, 0x01, 0x0a, 0x1a, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x69, 0x63, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x46,
	0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x61, 0x6e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x77, 0x0a, 0x19,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x32, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x02, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x13, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xd2, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x52, 0x74, 0x63,
	0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x52, 0x74, 0x63, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x74, 0x63, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x74, 0x63, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x4c, 0x69, 0x6e,
	0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x08, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x69,
	0x63, 0x49, 0x64, 0x78, 0x22, 0x6c, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4b, 0x69,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d,
	0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x17,
	0x43, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x69, 0x63,
	0x49, 0x64, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x43, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xf0, 0x05, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x11, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x74, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x06, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0xa5, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x74, 0x63, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x74, 0x63, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x74, 0x63, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x74, 0x63, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x74, 0x63, 0x41, 0x70, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x74, 0x63, 0x41, 0x70, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x53, 0x74, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e,
	0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x22, 0x55, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x79, 0x73, 0x4b,
	0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e,
	0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x72, 0x0a, 0x17, 0x4c, 0x69, 0x6e,
	0x6b, 0x6d, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0x55, 0x0a,
	0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x6e,
	0x6b, 0x6d, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x4d, 0x69, 0x63, 0x4e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x78, 0x4d, 0x69, 0x63, 0x4e, 0x75,
	0x6d, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x38, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xdf, 0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x31, 0x22, 0x41, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3c, 0x0a, 0x0c,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x46, 0x0a, 0x0b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x4b, 0x0a, 0x09, 0x44, 0x53, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x22,
	0x6c, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x02,
	0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x22, 0xab, 0x06, 0x0a, 0x0c, 0x52, 0x54, 0x43, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x74,
	0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x54, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x52, 0x54, 0x43, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x74, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x15, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x74, 0x63, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x54, 0x43, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x54, 0x43, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x15, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x74, 0x63,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x0d, 0x72, 0x74, 0x63, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x54, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x54, 0x43, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x0d, 0x72, 0x74, 0x63, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x74, 0x63, 0x46, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x74, 0x63, 0x46, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x74, 0x63,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x74, 0x63, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x8b, 0x01, 0x0a, 0x0f, 0x52, 0x54, 0x43, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x74, 0x63, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x74, 0x63, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x74, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x74, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x74, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x74, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x74, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x74, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x68, 0x0a,
	0x11, 0x52, 0x54, 0x43, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x54, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x52, 0x54, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x71, 0x0a, 0x0d, 0x52, 0x54, 0x43, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x1a, 0x57, 0x0a, 0x0d, 0x52, 0x54,
	0x43, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x78,
	0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x78, 0x78, 0x31, 0x12, 0x10, 0x0a,
	0x03, 0x78, 0x78, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x78, 0x78, 0x32, 0x12,
	0x10, 0x0a, 0x03, 0x78, 0x78, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x78, 0x78,
	0x33, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x78, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x78, 0x78, 0x34, 0x22, 0x5d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x09, 0x0a, 0x10, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42,
	0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x42, 0x69,
	0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x6b, 0x69,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6b, 0x69, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x97, 0x02,
	0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x8c, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x54, 0x75, 0x72,
	0x6e, 0x4f, 0x66, 0x66, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x66, 0x66, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xec, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x11, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x12, 0x6b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x12, 0x6b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe0, 0x02, 0x0a, 0x0d,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x3b, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52, 0x74, 0x63, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x54,
	0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x65, 0x52, 0x74, 0x63, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x03,
	0x64, 0x73, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x53, 0x4c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5d,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x22, 0xd0, 0x02,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x44, 0x53, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x64, 0x73, 0x6c,
	0x12, 0x1f, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64,
	0x22, 0xf7, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x50, 0x6f,
	0x73, 0x12, 0x37, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x0e, 0x4b, 0x69,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x08,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a,
	0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x65, 0x71, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x22, 0x51, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x8b, 0x01,
	0x0a, 0x15, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x16,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x0b, 0x61, 0x67, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x67, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x54, 0x43, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x22, 0x8f,
	0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x15, 0x50, 0x32, 0x50, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x54, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x22, 0xe9, 0x12, 0x0a, 0x0f, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a,
	0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0d,
	0x63, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0x67, 0x0a, 0x0d, 0x43, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x7a,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xc2, 0x02, 0x0a,
	0x13, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x7a, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d,
	0x41, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x06, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x11, 0x6a,
	0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x11,
	0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x55, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x1a, 0xad, 0x04, 0x0a, 0x14, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x10, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x33, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5b, 0x0a,
	0x13, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x69, 0x70, 0x1a, 0x4a, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x1a, 0xe7, 0x06, 0x0a, 0x15, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x59, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x89, 0x05, 0x0a, 0x0a, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61,
	0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x42,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74,
	0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x16,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x1a, 0x7e,
	0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x45,
	0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x67, 0x6f, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x6c, 0x69, 0x76, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 149)
var file_data_proto_goTypes = []any{
	(Common_IMDispatchStrategy)(0),                                              // 0: Common.IMDispatchStrategy
	(BadgeStruct_DataCase)(0),                                                   // 1: BadgeStruct.DataCase
	(BadgeStruct_BadgeDisplayType)(0),                                           // 2: BadgeStruct.BadgeDisplayType
	(BadgeStruct_Position)(0),                                                   // 3: BadgeStruct.Position
	(User_LiveEventInfo_EventPayMethod)(0),                                      // 4: User.LiveEventInfo.EventPayMethod
	(User_EcommerceEntrance_CreatorType)(0),                                     // 5: User.EcommerceEntrance.CreatorType
	(User_EcommerceEntrance_EntranceType)(0),                                    // 6: User.EcommerceEntrance.EntranceType
	(User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType)(0), // 7: User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreBrandLabelType
	(User_FansClub_PreferntialType)(0),                                          // 8: User.FansClub.PreferntialType
	(User_FansClub_FansClubData_BadgeIcon)(0),                                   // 9: User.FansClub.FansClubData.BadgeIcon
	(User_FansClub_FansClubData_UserFansClubStatus)(0),                          // 10: User.FansClub.FansClubData.UserFansClubStatus
	(ListUser_LinkType)(0),                                                      // 11: ListUser.LinkType
	(*Common)(nil),                                                              // 12: Common
	(*Text)(nil),                                                                // 13: Text
	(*Image)(nil),                                                               // 14: Image
	(*BadgeStruct)(nil),                                                         // 15: BadgeStruct
	(*GiftStruct)(nil),                                                          // 16: GiftStruct
	(*User)(nil),                                                                // 17: User
	(*Emote)(nil),                                                               // 18: Emote
	(*PunishEventInfo)(nil),                                                     // 19: PunishEventInfo
	(*MsgFilter)(nil),                                                           // 20: MsgFilter
	(*UserIdentity)(nil),                                                        // 21: UserIdentity
	(*Goal)(nil),                                                                // 22: Goal
	(*Indicator)(nil),                                                           // 23: Indicator
	(*Ranking)(nil),                                                             // 24: Ranking
	(*TikTokColor)(nil),                                                         // 25: TikTokColor
	(*ValueLabel)(nil),                                                          // 26: ValueLabel
	(*MessageDetails)(nil),                                                      // 27: MessageDetails
	(*UserContainer)(nil),                                                       // 28: UserContainer
	(*DataContainer)(nil),                                                       // 29: DataContainer
	(*TimeStampContainer)(nil),                                                  // 30: TimeStampContainer
	(*MemberMessageData)(nil),                                                   // 31: MemberMessageData
	(*LinkMicArmiesItems)(nil),                                                  // 32: LinkMicArmiesItems
	(*PollStartContent)(nil),                                                    // 33: PollStartContent
	(*PollEndContent)(nil),                                                      // 34: PollEndContent
	(*PollOptionInfo)(nil),                                                      // 35: PollOptionInfo
	(*VoteUser)(nil),                                                            // 36: VoteUser
	(*PollUpdateVotesContent)(nil),                                              // 37: PollUpdateVotesContent
	(*UserFanTicket)(nil),                                                       // 38: UserFanTicket
	(*FanTicketRoomNoticeContent)(nil),                                          // 39: FanTicketRoomNoticeContent
	(*LinkerAcceptNoticeContent)(nil),                                           // 40: LinkerAcceptNoticeContent
	(*LinkerCancelContent)(nil),                                                 // 41: LinkerCancelContent
	(*ListUser)(nil),                                                            // 42: ListUser
	(*LinkerCloseContent)(nil),                                                  // 43: LinkerCloseContent
	(*LinkerCreateContent)(nil),                                                 // 44: LinkerCreateContent
	(*LinkerEnterContent)(nil),                                                  // 45: LinkerEnterContent
	(*LinkerInviteContent)(nil),                                                 // 46: LinkerInviteContent
	(*LinkerKickOutContent)(nil),                                                // 47: LinkerKickOutContent
	(*LinkerLeaveContent)(nil),                                                  // 48: LinkerLeaveContent
	(*LinkerLinkedListChangeContent)(nil),                                       // 49: LinkerLinkedListChangeContent
	(*CohostListChangeContent)(nil),                                             // 50: CohostListChangeContent
	(*LinkerListChangeContent)(nil),                                             // 51: LinkerListChangeContent
	(*LinkerMediaChangeContent)(nil),                                            // 52: LinkerMediaChangeContent
	(*LinkerMicIdxUpdateContent)(nil),                                           // 53: LinkerMicIdxUpdateContent
	(*LinkerMuteContent)(nil),                                                   // 54: LinkerMuteContent
	(*LinkerRandomMatchContent)(nil),                                            // 55: LinkerRandomMatchContent
	(*LinkerReplyContent)(nil),                                                  // 56: LinkerReplyContent
	(*LinkerSetting)(nil),                                                       // 57: LinkerSetting
	(*LinkerSysKickOutContent)(nil),                                             // 58: LinkerSysKickOutContent
	(*LinkmicUserToastContent)(nil),                                             // 59: LinkmicUserToastContent
	(*LinkerUpdateUserContent)(nil),                                             // 60: LinkerUpdateUserContent
	(*LinkerUpdateUserSettingContent)(nil),                                      // 61: LinkerUpdateUserSettingContent
	(*LinkerWaitingListChangeContent)(nil),                                      // 62: LinkerWaitingListChangeContent
	(*LinkmicUserSettingInfo)(nil),                                              // 63: LinkmicUserSettingInfo
	(*Player)(nil),                                                              // 64: Player
	(*AllListUser)(nil),                                                         // 65: AllListUser
	(*LinkLayerListUser)(nil),                                                   // 66: LinkLayerListUser
	(*Position)(nil),                                                            // 67: Position
	(*LinkPosition)(nil),                                                        // 68: LinkPosition
	(*GroupPlayer)(nil),                                                         // 69: GroupPlayer
	(*DSLConfig)(nil),                                                           // 70: DSLConfig
	(*GroupChannelAllUser)(nil),                                                 // 71: GroupChannelAllUser
	(*GroupChannelUser)(nil),                                                    // 72: GroupChannelUser
	(*RTCExtraInfo)(nil),                                                        // 73: RTCExtraInfo
	(*CreateChannelContent)(nil),                                                // 74: CreateChannelContent
	(*ListChangeContent)(nil),                                                   // 75: ListChangeContent
	(*MultiLiveContent)(nil),                                                    // 76: MultiLiveContent
	(*InviteContent)(nil),                                                       // 77: InviteContent
	(*ApplyContent)(nil),                                                        // 78: ApplyContent
	(*PermitApplyContent)(nil),                                                  // 79: PermitApplyContent
	(*ReplyInviteContent)(nil),                                                  // 80: ReplyInviteContent
	(*KickOutContent)(nil),                                                      // 81: KickOutContent
	(*CancelApplyContent)(nil),                                                  // 82: CancelApplyContent
	(*CancelInviteContent)(nil),                                                 // 83: CancelInviteContent
	(*LeaveContent)(nil),                                                        // 84: LeaveContent
	(*FinishChannelContent)(nil),                                                // 85: FinishChannelContent
	(*JoinDirectContent)(nil),                                                   // 86: JoinDirectContent
	(*LeaveJoinGroupContent)(nil),                                               // 87: LeaveJoinGroupContent
	(*PermitJoinGroupContent)(nil),                                              // 88: PermitJoinGroupContent
	(*CancelJoinGroupContent)(nil),                                              // 89: CancelJoinGroupContent
	(*P2PGroupChangeContent)(nil),                                               // 90: P2PGroupChangeContent
	(*BusinessContent)(nil),                                                     // 91: BusinessContent
	(*JoinGroupContent)(nil),                                                    // 92: JoinGroupContent
	(*Common_LiveMessageSEI)(nil),                                               // 93: Common.LiveMessageSEI
	(*Common_LiveMessageID)(nil),                                                // 94: Common.LiveMessageID
	(*Text_TextPiece)(nil),                                                      // 95: Text.TextPiece
	(*Text_TextFormat)(nil),                                                     // 96: Text.TextFormat
	(*Text_TextPieceGift)(nil),                                                  // 97: Text.TextPieceGift
	(*Text_TextPiecePatternRef)(nil),                                            // 98: Text.TextPiecePatternRef
	(*Text_TextPieceUser)(nil),                                                  // 99: Text.TextPieceUser
	(*BadgeStruct_CombineBadge)(nil),                                            // 100: BadgeStruct.CombineBadge
	(*BadgeStruct_ProfileContent)(nil),                                          // 101: BadgeStruct.ProfileContent
	(*BadgeStruct_ProjectionConfig)(nil),                                        // 102: BadgeStruct.ProjectionConfig
	(*BadgeStruct_NumberConfig)(nil),                                            // 103: BadgeStruct.NumberConfig
	(*BadgeStruct_ProfileCardPanel)(nil),                                        // 104: BadgeStruct.ProfileCardPanel
	(*BadgeStruct_CombineBadgeBackground)(nil),                                  // 105: BadgeStruct.CombineBadgeBackground
	(*BadgeStruct_ImageBadge)(nil),                                              // 106: BadgeStruct.ImageBadge
	(*BadgeStruct_TextBadge)(nil),                                               // 107: BadgeStruct.TextBadge
	(*BadgeStruct_IconConfig)(nil),                                              // 108: BadgeStruct.IconConfig
	(*BadgeStruct_StringBadge)(nil),                                             // 109: BadgeStruct.StringBadge
	(*GiftStruct_GiftPanelBanner)(nil),                                          // 110: GiftStruct.GiftPanelBanner
	(*GiftStruct_GiftRandomEffectInfo)(nil),                                     // 111: GiftStruct.GiftRandomEffectInfo
	(*GiftStruct_RandomGiftBubble)(nil),                                         // 112: GiftStruct.RandomGiftBubble
	(*GiftStruct_RandomGiftPanelBanner)(nil),                                    // 113: GiftStruct.RandomGiftPanelBanner
	(*User_LiveEventInfo)(nil),                                                  // 114: User.LiveEventInfo
	(*User_ActivityInfo)(nil),                                                   // 115: User.ActivityInfo
	(*User_AnchorLevel)(nil),                                                    // 116: User.AnchorLevel
	(*User_AuthenticationInfo)(nil),                                             // 117: User.AuthenticationInfo
	(*User_AuthorStats)(nil),                                                    // 118: User.AuthorStats
	(*User_Border)(nil),                                                         // 119: User.Border
	(*User_ComboBadgeInfo)(nil),                                                 // 120: User.ComboBadgeInfo
	(*User_EcommerceEntrance)(nil),                                              // 121: User.EcommerceEntrance
	(*User_FansClub)(nil),                                                       // 122: User.FansClub
	(*User_FansClubInfo)(nil),                                                   // 123: User.FansClubInfo
	(*User_FollowInfo)(nil),                                                     // 124: User.FollowInfo
	(*User_OwnRoom)(nil),                                                        // 125: User.OwnRoom
	(*User_PayGrade)(nil),                                                       // 126: User.PayGrade
	(*User_SubscribeBadge)(nil),                                                 // 127: User.SubscribeBadge
	(*User_SubscribeInfo)(nil),                                                  // 128: User.SubscribeInfo
	(*User_UserAttr)(nil),                                                       // 129: User.UserAttr
	(*User_UserStats)(nil),                                                      // 130: User.UserStats
	(*User_LiveEventInfo_WalletPackage)(nil),                                    // 131: User.LiveEventInfo.WalletPackage
	(*User_EcommerceEntrance_ShopEntranceInfo)(nil),                             // 132: User.EcommerceEntrance.ShopEntranceInfo
	(*User_EcommerceEntrance_ShowcaseEntranceInfo)(nil),                         // 133: User.EcommerceEntrance.ShowcaseEntranceInfo
	(*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel)(nil),                  // 134: User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
	(*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel)(nil),                // 135: User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel
	(*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage)(nil), // 136: User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel.ShopLabelImage
	(*User_FansClub_FansClubData)(nil),                                                           // 137: User.FansClub.FansClubData
	(*User_PayGrade_GradeIcon)(nil),                                                              // 138: User.PayGrade.GradeIcon
	(*Goal_GoalStats)(nil),                                                                       // 139: Goal.GoalStats
	(*Goal_GoalContributor)(nil),                                                                 // 140: Goal.GoalContributor
	(*LinkMicArmiesItems_LinkMicArmiesGroup)(nil),                                                // 141: LinkMicArmiesItems.LinkMicArmiesGroup
	(*LinkerReplyContent_LinkmicInfo)(nil),                                                       // 142: LinkerReplyContent.LinkmicInfo
	(*RTCExtraInfo_RTCEngineConfig)(nil),                                                         // 143: RTCExtraInfo.RTCEngineConfig
	(*RTCExtraInfo_RTCLiveVideoParam)(nil),                                                       // 144: RTCExtraInfo.RTCLiveVideoParam
	(*RTCExtraInfo_RTCVideoParam)(nil),                                                           // 145: RTCExtraInfo.RTCVideoParam
	(*RTCExtraInfo_RTCBitrateMap)(nil),                                                           // 146: RTCExtraInfo.RTCBitrateMap
	(*MultiLiveContent_InviteBizContent)(nil),                                                    // 147: MultiLiveContent.InviteBizContent
	(*MultiLiveContent_ReplyBizContent)(nil),                                                     // 148: MultiLiveContent.ReplyBizContent
	(*MultiLiveContent_PermitBizContent)(nil),                                                    // 149: MultiLiveContent.PermitBizContent
	(*MultiLiveContent_KickOutBizContent)(nil),                                                   // 150: MultiLiveContent.KickOutBizContent
	(*BusinessContent_CohostContent)(nil),                                                        // 151: BusinessContent.CohostContent
	(*BusinessContent_JoinGroupBizContent)(nil),                                                  // 152: BusinessContent.JoinGroupBizContent
	(*BusinessContent_Tag)(nil),                                                                  // 153: BusinessContent.Tag
	(*BusinessContent_PerceptionDialogInfo)(nil),                                                 // 154: BusinessContent.PerceptionDialogInfo
	(*BusinessContent_PerceptionFeedbackOption)(nil),                                             // 155: BusinessContent.PerceptionFeedbackOption
	(*BusinessContent_JoinGroupMessageExtra)(nil),                                                // 156: BusinessContent.JoinGroupMessageExtra
	(*BusinessContent_Hashtag)(nil),                                                              // 157: BusinessContent.Hashtag
	(*BusinessContent_TopHostInfo)(nil),                                                          // 158: BusinessContent.TopHostInfo
	(*BusinessContent_JoinGroupMessageExtra_RivalExtra)(nil),                                     // 159: BusinessContent.JoinGroupMessageExtra.RivalExtra
	(*BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo)(nil),                  // 160: BusinessContent.JoinGroupMessageExtra.RivalExtra.AuthenticationInfo
	(LinkmicStatus)(0),                                                                           // 161: LinkmicStatus
	(AuditStatus)(0),                                                                             // 162: AuditStatus
	(EmoteType)(0),                                                                               // 163: EmoteType
	(ContentSource)(0),                                                                           // 164: ContentSource
	(EmotePrivateType)(0),                                                                        // 165: EmotePrivateType
	(KickoutReason)(0),                                                                           // 166: KickoutReason
	(LinkmicApplierSortSetting)(0),                                                               // 167: LinkmicApplierSortSetting
	(GroupStatus)(0),                                                                             // 168: GroupStatus
	(TextType)(0),                                                                                // 169: TextType
	(ReplyStatus)(0),                                                                             // 170: ReplyStatus
	(AgreeStatus)(0),                                                                             // 171: AgreeStatus
	(HashtagNamespace)(0),                                                                        // 172: HashtagNamespace
}
var file_data_proto_depIdxs = []int32{
	13,  // 0: Common.displayText:type_name -> Text
	93,  // 1: Common.sei:type_name -> Common.LiveMessageSEI
	94,  // 2: Common.dependRootId:type_name -> Common.LiveMessageID
	94,  // 3: Common.dependId:type_name -> Common.LiveMessageID
	0,   // 4: Common.dispatchStrategy:type_name -> Common.IMDispatchStrategy
	96,  // 5: Text.defaultFormat:type_name -> Text.TextFormat
	95,  // 6: Text.piecesList:type_name -> Text.TextPiece
	2,   // 7: BadgeStruct.displayType:type_name -> BadgeStruct.BadgeDisplayType
	106, // 8: BadgeStruct.image:type_name -> BadgeStruct.ImageBadge
	107, // 9: BadgeStruct.text:type_name -> BadgeStruct.TextBadge
	109, // 10: BadgeStruct.str:type_name -> BadgeStruct.StringBadge
	100, // 11: BadgeStruct.combine:type_name -> BadgeStruct.CombineBadge
	14,  // 12: GiftStruct.image:type_name -> Image
	14,  // 13: GiftStruct.giftLabelIcon:type_name -> Image
	14,  // 14: GiftStruct.icon:type_name -> Image
	14,  // 15: GiftStruct.previewImage:type_name -> Image
	110, // 16: GiftStruct.giftPanelBanner:type_name -> GiftStruct.GiftPanelBanner
	14,  // 17: User.avatarThumb:type_name -> Image
	14,  // 18: User.avatarMedium:type_name -> Image
	14,  // 19: User.avatarLarge:type_name -> Image
	14,  // 20: User.badgeImageList:type_name -> Image
	124, // 21: User.followInfo:type_name -> User.FollowInfo
	126, // 22: User.payGrade:type_name -> User.PayGrade
	122, // 23: User.fansClub:type_name -> User.FansClub
	119, // 24: User.border:type_name -> User.Border
	14,  // 25: User.avatarBorder:type_name -> Image
	14,  // 26: User.medal:type_name -> Image
	14,  // 27: User.realTimeIconsList:type_name -> Image
	14,  // 28: User.newRealTimeIconsList:type_name -> Image
	129, // 29: User.userAttr:type_name -> User.UserAttr
	125, // 30: User.ownRoom:type_name -> User.OwnRoom
	161, // 31: User.linkMicStats:type_name -> LinkmicStatus
	116, // 32: User.webcastAnchorLevel:type_name -> User.AnchorLevel
	118, // 33: User.authorStats:type_name -> User.AuthorStats
	17,  // 34: User.topFansList:type_name -> User
	115, // 35: User.activityReward:type_name -> User.ActivityInfo
	14,  // 36: User.personalCard:type_name -> Image
	117, // 37: User.authenticationInfo:type_name -> User.AuthenticationInfo
	14,  // 38: User.mediaBadgeImageList:type_name -> Image
	119, // 39: User.borderList:type_name -> User.Border
	120, // 40: User.comboBadgeInfo:type_name -> User.ComboBadgeInfo
	128, // 41: User.subscribeInfo:type_name -> User.SubscribeInfo
	15,  // 42: User.badgeList:type_name -> BadgeStruct
	123, // 43: User.fansClubInfo:type_name -> User.FansClubInfo
	116, // 44: User.anchorLevel:type_name -> User.AnchorLevel
	14,  // 45: User.avatarJpg:type_name -> Image
	130, // 46: User.stats:type_name -> User.UserStats
	114, // 47: User.upcomingEventList:type_name -> User.LiveEventInfo
	121, // 48: User.ecommerceEntrance:type_name -> User.EcommerceEntrance
	14,  // 49: Emote.image:type_name -> Image
	162, // 50: Emote.auditStatus:type_name -> AuditStatus
	163, // 51: Emote.emoteType:type_name -> EmoteType
	164, // 52: Emote.contentSource:type_name -> ContentSource
	165, // 53: Emote.emotePrivateType:type_name -> EmotePrivateType
	140, // 54: Goal.contributorsList:type_name -> Goal.GoalContributor
	139, // 55: Goal.stats:type_name -> Goal.GoalStats
	25,  // 56: Ranking.color:type_name -> TikTokColor
	26,  // 57: Ranking.details:type_name -> ValueLabel
	25,  // 58: MessageDetails.color:type_name -> TikTokColor
	28,  // 59: MessageDetails.user:type_name -> UserContainer
	17,  // 60: UserContainer.user:type_name -> User
	25,  // 61: MemberMessageData.color:type_name -> TikTokColor
	27,  // 62: MemberMessageData.details:type_name -> MessageDetails
	141, // 63: LinkMicArmiesItems.battleGroups:type_name -> LinkMicArmiesItems.LinkMicArmiesGroup
	35,  // 64: PollStartContent.OptionList:type_name -> PollOptionInfo
	17,  // 65: PollStartContent.Operator:type_name -> User
	35,  // 66: PollEndContent.OptionList:type_name -> PollOptionInfo
	17,  // 67: PollEndContent.Operator:type_name -> User
	36,  // 68: PollOptionInfo.VoteUserList:type_name -> VoteUser
	14,  // 69: VoteUser.AvatarThumb:type_name -> Image
	35,  // 70: PollUpdateVotesContent.OptionList:type_name -> PollOptionInfo
	38,  // 71: FanTicketRoomNoticeContent.UserFanTicketList:type_name -> UserFanTicket
	17,  // 72: ListUser.user:type_name -> User
	11,  // 73: ListUser.linkType:type_name -> ListUser.LinkType
	42,  // 74: LinkerEnterContent.linkedUsersList:type_name -> ListUser
	63,  // 75: LinkerEnterContent.anchorSettingInfo:type_name -> LinkmicUserSettingInfo
	17,  // 76: LinkerInviteContent.fromUser:type_name -> User
	166, // 77: LinkerKickOutContent.kickoutReason:type_name -> KickoutReason
	42,  // 78: LinkerListChangeContent.linkedUsers:type_name -> ListUser
	42,  // 79: LinkerListChangeContent.appliedUsers:type_name -> ListUser
	42,  // 80: LinkerListChangeContent.connectingUsers:type_name -> ListUser
	17,  // 81: LinkerRandomMatchContent.user:type_name -> User
	142, // 82: LinkerReplyContent.fromUserLinkmicInfo:type_name -> LinkerReplyContent.LinkmicInfo
	142, // 83: LinkerReplyContent.toUserLinkmicInfo:type_name -> LinkerReplyContent.LinkmicInfo
	57,  // 84: LinkerReplyContent.linkerSetting:type_name -> LinkerSetting
	17,  // 85: LinkerReplyContent.fromUser:type_name -> User
	17,  // 86: LinkerReplyContent.toUser:type_name -> User
	13,  // 87: LinkmicUserToastContent.displayText:type_name -> Text
	167, // 88: LinkmicUserSettingInfo.applierSortSetting:type_name -> LinkmicApplierSortSetting
	66,  // 89: AllListUser.linkedList:type_name -> LinkLayerListUser
	66,  // 90: AllListUser.appliedList:type_name -> LinkLayerListUser
	66,  // 91: AllListUser.invitedList:type_name -> LinkLayerListUser
	66,  // 92: AllListUser.readyList:type_name -> LinkLayerListUser
	17,  // 93: LinkLayerListUser.user:type_name -> User
	67,  // 94: LinkLayerListUser.pos:type_name -> Position
	68,  // 95: Position.link:type_name -> LinkPosition
	17,  // 96: GroupPlayer.user:type_name -> User
	72,  // 97: GroupChannelAllUser.userList:type_name -> GroupChannelUser
	168, // 98: GroupChannelUser.status:type_name -> GroupStatus
	169, // 99: GroupChannelUser.type:type_name -> TextType
	65,  // 100: GroupChannelUser.allUser:type_name -> AllListUser
	69,  // 101: GroupChannelUser.ownerUser:type_name -> GroupPlayer
	143, // 102: RTCExtraInfo.liveRtcEngineConfig:type_name -> RTCExtraInfo.RTCEngineConfig
	144, // 103: RTCExtraInfo.liveRtcVideoParamList:type_name -> RTCExtraInfo.RTCLiveVideoParam
	146, // 104: RTCExtraInfo.rtcBitrateMap:type_name -> RTCExtraInfo.RTCBitrateMap
	64,  // 105: CreateChannelContent.owner:type_name -> Player
	169, // 106: ListChangeContent.type:type_name -> TextType
	65,  // 107: ListChangeContent.list:type_name -> AllListUser
	147, // 108: MultiLiveContent.inviteBizContent:type_name -> MultiLiveContent.InviteBizContent
	148, // 109: MultiLiveContent.replyBizContent:type_name -> MultiLiveContent.ReplyBizContent
	149, // 110: MultiLiveContent.permitBizContent:type_name -> MultiLiveContent.PermitBizContent
	150, // 111: MultiLiveContent.kickOutBizContent:type_name -> MultiLiveContent.KickOutBizContent
	64,  // 112: InviteContent.invitor:type_name -> Player
	73,  // 113: InviteContent.inviteeRtcExtInfo:type_name -> RTCExtraInfo
	67,  // 114: InviteContent.pos:type_name -> Position
	70,  // 115: InviteContent.dsl:type_name -> DSLConfig
	17,  // 116: InviteContent.invitee:type_name -> User
	17,  // 117: InviteContent.operator:type_name -> User
	64,  // 118: ApplyContent.applier:type_name -> Player
	64,  // 119: PermitApplyContent.permiter:type_name -> Player
	67,  // 120: PermitApplyContent.applierPos:type_name -> Position
	170, // 121: PermitApplyContent.replyStatus:type_name -> ReplyStatus
	70,  // 122: PermitApplyContent.dsl:type_name -> DSLConfig
	17,  // 123: PermitApplyContent.applier:type_name -> User
	17,  // 124: PermitApplyContent.operator:type_name -> User
	64,  // 125: ReplyInviteContent.invitee:type_name -> Player
	170, // 126: ReplyInviteContent.replyStatus:type_name -> ReplyStatus
	67,  // 127: ReplyInviteContent.inviteePos:type_name -> Position
	64,  // 128: ReplyInviteContent.inviteOperatorUser:type_name -> Player
	64,  // 129: KickOutContent.offliner:type_name -> Player
	166, // 130: KickOutContent.kickoutReason:type_name -> KickoutReason
	64,  // 131: CancelApplyContent.applier:type_name -> Player
	64,  // 132: CancelInviteContent.invitor:type_name -> Player
	64,  // 133: CancelInviteContent.invitee:type_name -> Player
	64,  // 134: LeaveContent.leaver:type_name -> Player
	64,  // 135: FinishChannelContent.owner:type_name -> Player
	66,  // 136: JoinDirectContent.joiner:type_name -> LinkLayerListUser
	65,  // 137: JoinDirectContent.allUsers:type_name -> AllListUser
	69,  // 138: LeaveJoinGroupContent.operator:type_name -> GroupPlayer
	69,  // 139: PermitJoinGroupContent.approver:type_name -> GroupPlayer
	171, // 140: PermitJoinGroupContent.agreeStatus:type_name -> AgreeStatus
	169, // 141: PermitJoinGroupContent.type:type_name -> TextType
	73,  // 142: PermitJoinGroupContent.groupExtInfoList:type_name -> RTCExtraInfo
	71,  // 143: PermitJoinGroupContent.groupUser:type_name -> GroupChannelAllUser
	69,  // 144: CancelJoinGroupContent.leaverList:type_name -> GroupPlayer
	69,  // 145: CancelJoinGroupContent.operator:type_name -> GroupPlayer
	169, // 146: CancelJoinGroupContent.type:type_name -> TextType
	73,  // 147: P2PGroupChangeContent.groupExtInfoList:type_name -> RTCExtraInfo
	71,  // 148: P2PGroupChangeContent.groupUser:type_name -> GroupChannelAllUser
	76,  // 149: BusinessContent.multiLiveContent:type_name -> MultiLiveContent
	151, // 150: BusinessContent.cohostContent:type_name -> BusinessContent.CohostContent
	71,  // 151: JoinGroupContent.groupUser:type_name -> GroupChannelAllUser
	69,  // 152: JoinGroupContent.joinUser:type_name -> GroupPlayer
	169, // 153: JoinGroupContent.type:type_name -> TextType
	94,  // 154: Common.LiveMessageSEI.uniqueId:type_name -> Common.LiveMessageID
	96,  // 155: Text.TextPiece.format:type_name -> Text.TextFormat
	99,  // 156: Text.TextPiece.userValue:type_name -> Text.TextPieceUser
	97,  // 157: Text.TextPiece.giftValue:type_name -> Text.TextPieceGift
	98,  // 158: Text.TextPiece.patternRefValue:type_name -> Text.TextPiecePatternRef
	17,  // 159: Text.TextPieceUser.user:type_name -> User
	14,  // 160: BadgeStruct.CombineBadge.icon:type_name -> Image
	107, // 161: BadgeStruct.CombineBadge.text:type_name -> BadgeStruct.TextBadge
	104, // 162: BadgeStruct.CombineBadge.profileCardPanel:type_name -> BadgeStruct.ProfileCardPanel
	105, // 163: BadgeStruct.CombineBadge.background:type_name -> BadgeStruct.CombineBadgeBackground
	105, // 164: BadgeStruct.CombineBadge.backgroundDarkMode:type_name -> BadgeStruct.CombineBadgeBackground
	108, // 165: BadgeStruct.ProfileContent.iconList:type_name -> BadgeStruct.IconConfig
	103, // 166: BadgeStruct.ProfileContent.numberConfig:type_name -> BadgeStruct.NumberConfig
	14,  // 167: BadgeStruct.ProjectionConfig.icon:type_name -> Image
	105, // 168: BadgeStruct.NumberConfig.background:type_name -> BadgeStruct.CombineBadgeBackground
	102, // 169: BadgeStruct.ProfileCardPanel.projectionConfig:type_name -> BadgeStruct.ProjectionConfig
	101, // 170: BadgeStruct.ProfileCardPanel.profileContent:type_name -> BadgeStruct.ProfileContent
	14,  // 171: BadgeStruct.CombineBadgeBackground.image:type_name -> Image
	14,  // 172: BadgeStruct.ImageBadge.image:type_name -> Image
	14,  // 173: BadgeStruct.IconConfig.icon:type_name -> Image
	105, // 174: BadgeStruct.IconConfig.background:type_name -> BadgeStruct.CombineBadgeBackground
	13,  // 175: GiftStruct.GiftPanelBanner.displayText:type_name -> Text
	14,  // 176: GiftStruct.GiftPanelBanner.leftIcon:type_name -> Image
	113, // 177: GiftStruct.GiftRandomEffectInfo.randomGiftPanelBanner:type_name -> GiftStruct.RandomGiftPanelBanner
	112, // 178: GiftStruct.GiftRandomEffectInfo.randomGiftBubble:type_name -> GiftStruct.RandomGiftBubble
	14,  // 179: GiftStruct.RandomGiftBubble.iconDynamicEffect:type_name -> Image
	14,  // 180: GiftStruct.RandomGiftPanelBanner.bgImage:type_name -> Image
	14,  // 181: GiftStruct.RandomGiftPanelBanner.shadingImage:type_name -> Image
	14,  // 182: GiftStruct.RandomGiftPanelBanner.leftIcon:type_name -> Image
	14,  // 183: User.ActivityInfo.badge:type_name -> Image
	14,  // 184: User.ActivityInfo.storytag:type_name -> Image
	14,  // 185: User.AnchorLevel.profileDialogBg:type_name -> Image
	14,  // 186: User.AnchorLevel.profileDialogBgBack:type_name -> Image
	14,  // 187: User.AnchorLevel.stageLevel:type_name -> Image
	14,  // 188: User.AnchorLevel.smallIcon:type_name -> Image
	14,  // 189: User.AuthenticationInfo.authenticationBadge:type_name -> Image
	14,  // 190: User.Border.icon:type_name -> Image
	14,  // 191: User.Border.profileDecorationRibbon:type_name -> Image
	14,  // 192: User.ComboBadgeInfo.icon:type_name -> Image
	6,   // 193: User.EcommerceEntrance.entranceType:type_name -> User.EcommerceEntrance.EntranceType
	5,   // 194: User.EcommerceEntrance.creatorType:type_name -> User.EcommerceEntrance.CreatorType
	132, // 195: User.EcommerceEntrance.shopEntranceInfo:type_name -> User.EcommerceEntrance.ShopEntranceInfo
	133, // 196: User.EcommerceEntrance.showcaseEntranceInfo:type_name -> User.EcommerceEntrance.ShowcaseEntranceInfo
	137, // 197: User.FansClub.data:type_name -> User.FansClub.FansClubData
	14,  // 198: User.FansClubInfo.badge:type_name -> Image
	14,  // 199: User.PayGrade.diamondIcon:type_name -> Image
	14,  // 200: User.PayGrade.icon:type_name -> Image
	14,  // 201: User.PayGrade.nextIcon:type_name -> Image
	138, // 202: User.PayGrade.gradeIconList:type_name -> User.PayGrade.GradeIcon
	14,  // 203: User.PayGrade.imIcon:type_name -> Image
	14,  // 204: User.PayGrade.imIconWithLevel:type_name -> Image
	14,  // 205: User.PayGrade.liveIcon:type_name -> Image
	14,  // 206: User.PayGrade.newImIconWithLevel:type_name -> Image
	14,  // 207: User.PayGrade.newLiveIcon:type_name -> Image
	14,  // 208: User.PayGrade.background:type_name -> Image
	14,  // 209: User.PayGrade.backgroundBack:type_name -> Image
	14,  // 210: User.PayGrade.profileDialogBg:type_name -> Image
	14,  // 211: User.PayGrade.profileDialogBgBack:type_name -> Image
	14,  // 212: User.SubscribeBadge.originImg:type_name -> Image
	14,  // 213: User.SubscribeBadge.previewImg:type_name -> Image
	127, // 214: User.SubscribeInfo.badge:type_name -> User.SubscribeBadge
	134, // 215: User.EcommerceEntrance.ShopEntranceInfo.storeLabel:type_name -> User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
	135, // 216: User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.officialLabel:type_name -> User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel
	136, // 217: User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel.labelImageLight:type_name -> User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel.ShopLabelImage
	136, // 218: User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel.labelImageDark:type_name -> User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel.ShopLabelImage
	10,  // 219: User.FansClub.FansClubData.userFansClubStatus:type_name -> User.FansClub.FansClubData.UserFansClubStatus
	14,  // 220: User.PayGrade.GradeIcon.icon:type_name -> Image
	14,  // 221: Goal.GoalContributor.avatar:type_name -> Image
	15,  // 222: Goal.GoalContributor.badgeList:type_name -> BadgeStruct
	17,  // 223: LinkMicArmiesItems.LinkMicArmiesGroup.users:type_name -> User
	145, // 224: RTCExtraInfo.RTCLiveVideoParam.params:type_name -> RTCExtraInfo.RTCVideoParam
	63,  // 225: MultiLiveContent.InviteBizContent.anchorSettingInfo:type_name -> LinkmicUserSettingInfo
	17,  // 226: MultiLiveContent.InviteBizContent.operatorUserInfo:type_name -> User
	17,  // 227: MultiLiveContent.InviteBizContent.inviteeUserInfo:type_name -> User
	17,  // 228: MultiLiveContent.ReplyBizContent.replyUserInfo:type_name -> User
	63,  // 229: MultiLiveContent.PermitBizContent.anchorSettingInfo:type_name -> LinkmicUserSettingInfo
	17,  // 230: MultiLiveContent.PermitBizContent.operatorUserInfo:type_name -> User
	17,  // 231: MultiLiveContent.KickOutBizContent.operatorUserInfo:type_name -> User
	17,  // 232: MultiLiveContent.KickOutBizContent.kickPlayerUserInfo:type_name -> User
	152, // 233: BusinessContent.CohostContent.joinGroupBizContent:type_name -> BusinessContent.JoinGroupBizContent
	153, // 234: BusinessContent.JoinGroupBizContent.fromTag:type_name -> BusinessContent.Tag
	154, // 235: BusinessContent.JoinGroupBizContent.dialog:type_name -> BusinessContent.PerceptionDialogInfo
	19,  // 236: BusinessContent.JoinGroupBizContent.punishInfo:type_name -> PunishEventInfo
	156, // 237: BusinessContent.JoinGroupBizContent.joinGroupMsgExtra:type_name -> BusinessContent.JoinGroupMessageExtra
	13,  // 238: BusinessContent.PerceptionDialogInfo.title:type_name -> Text
	13,  // 239: BusinessContent.PerceptionDialogInfo.subTitle:type_name -> Text
	13,  // 240: BusinessContent.PerceptionDialogInfo.adviceActionText:type_name -> Text
	13,  // 241: BusinessContent.PerceptionDialogInfo.defaultActionText:type_name -> Text
	155, // 242: BusinessContent.PerceptionDialogInfo.feedbackOptionsList:type_name -> BusinessContent.PerceptionFeedbackOption
	159, // 243: BusinessContent.JoinGroupMessageExtra.extra:type_name -> BusinessContent.JoinGroupMessageExtra.RivalExtra
	159, // 244: BusinessContent.JoinGroupMessageExtra.otherUsersList:type_name -> BusinessContent.JoinGroupMessageExtra.RivalExtra
	14,  // 245: BusinessContent.Hashtag.image:type_name -> Image
	172, // 246: BusinessContent.Hashtag.namespace:type_name -> HashtagNamespace
	14,  // 247: BusinessContent.JoinGroupMessageExtra.RivalExtra.avatarThumb:type_name -> Image
	160, // 248: BusinessContent.JoinGroupMessageExtra.RivalExtra.authenticationInfo:type_name -> BusinessContent.JoinGroupMessageExtra.RivalExtra.AuthenticationInfo
	157, // 249: BusinessContent.JoinGroupMessageExtra.RivalExtra.hashtag:type_name -> BusinessContent.Hashtag
	158, // 250: BusinessContent.JoinGroupMessageExtra.RivalExtra.topHostInfo:type_name -> BusinessContent.TopHostInfo
	14,  // 251: BusinessContent.JoinGroupMessageExtra.RivalExtra.AuthenticationInfo.authenticationBadge:type_name -> Image
	252, // [252:252] is the sub-list for method output_type
	252, // [252:252] is the sub-list for method input_type
	252, // [252:252] is the sub-list for extension type_name
	252, // [252:252] is the sub-list for extension extendee
	0,   // [0:252] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Common); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GiftStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Emote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PunishEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MsgFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UserIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Goal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TikTokColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ValueLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MessageDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UserContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DataContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TimeStampContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MemberMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMicArmiesItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PollStartContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PollEndContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PollOptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*VoteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PollUpdateVotesContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*UserFanTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*FanTicketRoomNoticeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerAcceptNoticeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerCancelContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ListUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerCloseContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerCreateContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerEnterContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerInviteContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerKickOutContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerLeaveContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerLinkedListChangeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CohostListChangeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerListChangeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerMediaChangeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerMicIdxUpdateContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerMuteContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerRandomMatchContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerReplyContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerSysKickOutContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*LinkmicUserToastContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerUpdateUserContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerUpdateUserSettingContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerWaitingListChangeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*LinkmicUserSettingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*AllListUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*LinkLayerListUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*LinkPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*GroupPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*DSLConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*GroupChannelAllUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*GroupChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*RTCExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CreateChannelContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*ListChangeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*MultiLiveContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*InviteContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*ApplyContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*PermitApplyContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*ReplyInviteContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*KickOutContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*CancelApplyContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*CancelInviteContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*LeaveContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*FinishChannelContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*JoinDirectContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*LeaveJoinGroupContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*PermitJoinGroupContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*CancelJoinGroupContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*P2PGroupChangeContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*JoinGroupContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*Common_LiveMessageSEI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*Common_LiveMessageID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*Text_TextPiece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*Text_TextFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*Text_TextPieceGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*Text_TextPiecePatternRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*Text_TextPieceUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_CombineBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_ProfileContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_ProjectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_NumberConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_ProfileCardPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_CombineBadgeBackground); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_ImageBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_TextBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_IconConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*BadgeStruct_StringBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*GiftStruct_GiftPanelBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*GiftStruct_GiftRandomEffectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*GiftStruct_RandomGiftBubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*GiftStruct_RandomGiftPanelBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*User_LiveEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*User_ActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*User_AnchorLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*User_AuthenticationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*User_AuthorStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*User_Border); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*User_ComboBadgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*User_EcommerceEntrance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*User_FansClub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*User_FansClubInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*User_FollowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*User_OwnRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*User_PayGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*User_SubscribeBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*User_SubscribeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*User_UserAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*User_UserStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*User_LiveEventInfo_WalletPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*User_EcommerceEntrance_ShopEntranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*User_EcommerceEntrance_ShowcaseEntranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*User_FansClub_FansClubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*User_PayGrade_GradeIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*Goal_GoalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*Goal_GoalContributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*LinkMicArmiesItems_LinkMicArmiesGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*LinkerReplyContent_LinkmicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*RTCExtraInfo_RTCEngineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*RTCExtraInfo_RTCLiveVideoParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*RTCExtraInfo_RTCVideoParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*RTCExtraInfo_RTCBitrateMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*MultiLiveContent_InviteBizContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*MultiLiveContent_ReplyBizContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*MultiLiveContent_PermitBizContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*MultiLiveContent_KickOutBizContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_CohostContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_JoinGroupBizContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_PerceptionDialogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_PerceptionFeedbackOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_JoinGroupMessageExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_Hashtag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_TopHostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_JoinGroupMessageExtra_RivalExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_data_proto_msgTypes[3].OneofWrappers = []any{
		(*BadgeStruct_Image)(nil),
		(*BadgeStruct_Text)(nil),
		(*BadgeStruct_Str)(nil),
		(*BadgeStruct_Combine)(nil),
	}
	file_data_proto_msgTypes[83].OneofWrappers = []any{
		(*Text_TextPiece_UserValue)(nil),
		(*Text_TextPiece_GiftValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   149,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		EnumInfos:         file_data_proto_enumTypes,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
