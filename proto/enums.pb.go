// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: enums.proto

package gotiktoklive

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuditStatus int32

const (
	AuditStatus_AUDITSTATUSUNKNOWN   AuditStatus = 0
	AuditStatus_AUDITSTATUSPASS      AuditStatus = 1
	AuditStatus_AUDITSTATUSFAILED    AuditStatus = 2
	AuditStatus_AUDITSTATUSREVIEWING AuditStatus = 3
	AuditStatus_AUDITSTATUSFORBIDDEN AuditStatus = 4
)

// Enum value maps for AuditStatus.
var (
	AuditStatus_name = map[int32]string{
		0: "AUDITSTATUSUNKNOWN",
		1: "AUDITSTATUSPASS",
		2: "AUDITSTATUSFAILED",
		3: "AUDITSTATUSREVIEWING",
		4: "AUDITSTATUSFORBIDDEN",
	}
	AuditStatus_value = map[string]int32{
		"AUDITSTATUSUNKNOWN":   0,
		"AUDITSTATUSPASS":      1,
		"AUDITSTATUSFAILED":    2,
		"AUDITSTATUSREVIEWING": 3,
		"AUDITSTATUSFORBIDDEN": 4,
	}
)

func (x AuditStatus) Enum() *AuditStatus {
	p := new(AuditStatus)
	*p = x
	return p
}

func (x AuditStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (AuditStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x AuditStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditStatus.Descriptor instead.
func (AuditStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type EmoteType int32

const (
	EmoteType_EMOTETYPENORMAL      EmoteType = 0
	EmoteType_EMOTETYPEWITHSTICKER EmoteType = 1
)

// Enum value maps for EmoteType.
var (
	EmoteType_name = map[int32]string{
		0: "EMOTETYPENORMAL",
		1: "EMOTETYPEWITHSTICKER",
	}
	EmoteType_value = map[string]int32{
		"EMOTETYPENORMAL":      0,
		"EMOTETYPEWITHSTICKER": 1,
	}
)

func (x EmoteType) Enum() *EmoteType {
	p := new(EmoteType)
	*p = x
	return p
}

func (x EmoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (EmoteType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x EmoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmoteType.Descriptor instead.
func (EmoteType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type ContentSource int32

const (
	ContentSource_CONTENTSOURCEUNKNOWN ContentSource = 0
	ContentSource_CONTENTSOURCENORMAL  ContentSource = 1
	ContentSource_CONTENTSOURCECAMERA  ContentSource = 2
)

// Enum value maps for ContentSource.
var (
	ContentSource_name = map[int32]string{
		0: "CONTENTSOURCEUNKNOWN",
		1: "CONTENTSOURCENORMAL",
		2: "CONTENTSOURCECAMERA",
	}
	ContentSource_value = map[string]int32{
		"CONTENTSOURCEUNKNOWN": 0,
		"CONTENTSOURCENORMAL":  1,
		"CONTENTSOURCECAMERA":  2,
	}
)

func (x ContentSource) Enum() *ContentSource {
	p := new(ContentSource)
	*p = x
	return p
}

func (x ContentSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentSource) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (ContentSource) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x ContentSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentSource.Descriptor instead.
func (ContentSource) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

type EmotePrivateType int32

const (
	EmotePrivateType_EMOTE_PRIVATE_TYPE_NORMAL   EmotePrivateType = 0
	EmotePrivateType_EMOTE_PRIVATE_TYPE_SUB_WAVE EmotePrivateType = 1
)

// Enum value maps for EmotePrivateType.
var (
	EmotePrivateType_name = map[int32]string{
		0: "EMOTE_PRIVATE_TYPE_NORMAL",
		1: "EMOTE_PRIVATE_TYPE_SUB_WAVE",
	}
	EmotePrivateType_value = map[string]int32{
		"EMOTE_PRIVATE_TYPE_NORMAL":   0,
		"EMOTE_PRIVATE_TYPE_SUB_WAVE": 1,
	}
)

func (x EmotePrivateType) Enum() *EmotePrivateType {
	p := new(EmotePrivateType)
	*p = x
	return p
}

func (x EmotePrivateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmotePrivateType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (EmotePrivateType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x EmotePrivateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmotePrivateType.Descriptor instead.
func (EmotePrivateType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

type TextType int32

const (
	TextType_DISPLAY_TEXT TextType = 0
	TextType_CONTENT      TextType = 1
)

// Enum value maps for TextType.
var (
	TextType_name = map[int32]string{
		0: "DISPLAY_TEXT",
		1: "CONTENT",
	}
	TextType_value = map[string]int32{
		"DISPLAY_TEXT": 0,
		"CONTENT":      1,
	}
)

func (x TextType) Enum() *TextType {
	p := new(TextType)
	*p = x
	return p
}

func (x TextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (TextType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x TextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextType.Descriptor instead.
func (TextType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

type LinkmicApplierSortSetting int32

const (
	LinkmicApplierSortSetting_LINKMIC_APPLIER_SORT_SETTING_NONE          LinkmicApplierSortSetting = 0
	LinkmicApplierSortSetting_LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE LinkmicApplierSortSetting = 1
)

// Enum value maps for LinkmicApplierSortSetting.
var (
	LinkmicApplierSortSetting_name = map[int32]string{
		0: "LINKMIC_APPLIER_SORT_SETTING_NONE",
		1: "LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE",
	}
	LinkmicApplierSortSetting_value = map[string]int32{
		"LINKMIC_APPLIER_SORT_SETTING_NONE":          0,
		"LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE": 1,
	}
)

func (x LinkmicApplierSortSetting) Enum() *LinkmicApplierSortSetting {
	p := new(LinkmicApplierSortSetting)
	*p = x
	return p
}

func (x LinkmicApplierSortSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkmicApplierSortSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (LinkmicApplierSortSetting) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x LinkmicApplierSortSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkmicApplierSortSetting.Descriptor instead.
func (LinkmicApplierSortSetting) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

type LinkMicBattleStatus int32

const (
	LinkMicBattleStatus_BATTLE_ARMY_UNKNOWN LinkMicBattleStatus = 0
	LinkMicBattleStatus_ARMY_ONGOING        LinkMicBattleStatus = 1
	LinkMicBattleStatus_ARMY_FINISHED       LinkMicBattleStatus = 2
	LinkMicBattleStatus_BATTLE_ONGOING      LinkMicBattleStatus = 4
	LinkMicBattleStatus_BATTLE_FINISHED     LinkMicBattleStatus = 5
)

// Enum value maps for LinkMicBattleStatus.
var (
	LinkMicBattleStatus_name = map[int32]string{
		0: "BATTLE_ARMY_UNKNOWN",
		1: "ARMY_ONGOING",
		2: "ARMY_FINISHED",
		4: "BATTLE_ONGOING",
		5: "BATTLE_FINISHED",
	}
	LinkMicBattleStatus_value = map[string]int32{
		"BATTLE_ARMY_UNKNOWN": 0,
		"ARMY_ONGOING":        1,
		"ARMY_FINISHED":       2,
		"BATTLE_ONGOING":      4,
		"BATTLE_FINISHED":     5,
	}
)

func (x LinkMicBattleStatus) Enum() *LinkMicBattleStatus {
	p := new(LinkMicBattleStatus)
	*p = x
	return p
}

func (x LinkMicBattleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkMicBattleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (LinkMicBattleStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x LinkMicBattleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkMicBattleStatus.Descriptor instead.
func (LinkMicBattleStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

type HashtagNamespace int32

const (
	HashtagNamespace_GLOBAL HashtagNamespace = 0
	HashtagNamespace_GAMING HashtagNamespace = 1
)

// Enum value maps for HashtagNamespace.
var (
	HashtagNamespace_name = map[int32]string{
		0: "GLOBAL",
		1: "GAMING",
	}
	HashtagNamespace_value = map[string]int32{
		"GLOBAL": 0,
		"GAMING": 1,
	}
)

func (x HashtagNamespace) Enum() *HashtagNamespace {
	p := new(HashtagNamespace)
	*p = x
	return p
}

func (x HashtagNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashtagNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (HashtagNamespace) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x HashtagNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashtagNamespace.Descriptor instead.
func (HashtagNamespace) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

type AgreeStatus int32

const (
	AgreeStatus_AGREE_UNKNOWN AgreeStatus = 0
	AgreeStatus_AGREE         AgreeStatus = 1
	AgreeStatus_REJECT        AgreeStatus = 2
)

// Enum value maps for AgreeStatus.
var (
	AgreeStatus_name = map[int32]string{
		0: "AGREE_UNKNOWN",
		1: "AGREE",
		2: "REJECT",
	}
	AgreeStatus_value = map[string]int32{
		"AGREE_UNKNOWN": 0,
		"AGREE":         1,
		"REJECT":        2,
	}
)

func (x AgreeStatus) Enum() *AgreeStatus {
	p := new(AgreeStatus)
	*p = x
	return p
}

func (x AgreeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgreeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (AgreeStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x AgreeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgreeStatus.Descriptor instead.
func (AgreeStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

type KickoutReason int32

const (
	KickoutReason_KICKOUT_REASON_UNKNOWN                KickoutReason = 0
	KickoutReason_KICKOUT_REASON_FIRST_FRAME_TIMEOUT    KickoutReason = 1
	KickoutReason_KICKOUT_REASON_BY_HOST                KickoutReason = 2
	KickoutReason_KICKOUT_REASON_RTC_LOST_CONNECTION    KickoutReason = 3
	KickoutReason_KICKOUT_REASON_BY_PUNISH              KickoutReason = 4
	KickoutReason_KICKOUT_REASON_BY_ADMIN               KickoutReason = 5
	KickoutReason_KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS KickoutReason = 6
)

// Enum value maps for KickoutReason.
var (
	KickoutReason_name = map[int32]string{
		0: "KICKOUT_REASON_UNKNOWN",
		1: "KICKOUT_REASON_FIRST_FRAME_TIMEOUT",
		2: "KICKOUT_REASON_BY_HOST",
		3: "KICKOUT_REASON_RTC_LOST_CONNECTION",
		4: "KICKOUT_REASON_BY_PUNISH",
		5: "KICKOUT_REASON_BY_ADMIN",
		6: "KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS",
	}
	KickoutReason_value = map[string]int32{
		"KICKOUT_REASON_UNKNOWN":                0,
		"KICKOUT_REASON_FIRST_FRAME_TIMEOUT":    1,
		"KICKOUT_REASON_BY_HOST":                2,
		"KICKOUT_REASON_RTC_LOST_CONNECTION":    3,
		"KICKOUT_REASON_BY_PUNISH":              4,
		"KICKOUT_REASON_BY_ADMIN":               5,
		"KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS": 6,
	}
)

func (x KickoutReason) Enum() *KickoutReason {
	p := new(KickoutReason)
	*p = x
	return p
}

func (x KickoutReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KickoutReason) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (KickoutReason) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x KickoutReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KickoutReason.Descriptor instead.
func (KickoutReason) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

type GroupStatus int32

const (
	GroupStatus_GROUP_STATUS_UNKNOWN GroupStatus = 0
	GroupStatus_GROUP_STATUS_WAITING GroupStatus = 1
	GroupStatus_GROUP_STATUS_LINKED  GroupStatus = 3
)

// Enum value maps for GroupStatus.
var (
	GroupStatus_name = map[int32]string{
		0: "GROUP_STATUS_UNKNOWN",
		1: "GROUP_STATUS_WAITING",
		3: "GROUP_STATUS_LINKED",
	}
	GroupStatus_value = map[string]int32{
		"GROUP_STATUS_UNKNOWN": 0,
		"GROUP_STATUS_WAITING": 1,
		"GROUP_STATUS_LINKED":  3,
	}
)

func (x GroupStatus) Enum() *GroupStatus {
	p := new(GroupStatus)
	*p = x
	return p
}

func (x GroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (GroupStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x GroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupStatus.Descriptor instead.
func (GroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

type BusinessCase int32

const (
	BusinessCase_BUSINESS_NOT_SET        BusinessCase = 0
	BusinessCase_APPLY_BIZ_CONTENT       BusinessCase = 1
	BusinessCase_INVITE_BIZ_CONTENT      BusinessCase = 2
	BusinessCase_REPLY_BIZ_CONTENT       BusinessCase = 3
	BusinessCase_PERMIT_BIZ_CONTENT      BusinessCase = 4
	BusinessCase_JOIN_DIRECT_BIZ_CONTENT BusinessCase = 5
	BusinessCase_KICK_OUT_BIZ_CONTENT    BusinessCase = 6
	BusinessCase_LIST_CHANGE_BIZ_CONTENT BusinessCase = 11
	BusinessCase_MULTI_LIVE_CONTENT      BusinessCase = 100
	BusinessCase_COHOST_CONTENT          BusinessCase = 200
)

// Enum value maps for BusinessCase.
var (
	BusinessCase_name = map[int32]string{
		0:   "BUSINESS_NOT_SET",
		1:   "APPLY_BIZ_CONTENT",
		2:   "INVITE_BIZ_CONTENT",
		3:   "REPLY_BIZ_CONTENT",
		4:   "PERMIT_BIZ_CONTENT",
		5:   "JOIN_DIRECT_BIZ_CONTENT",
		6:   "KICK_OUT_BIZ_CONTENT",
		11:  "LIST_CHANGE_BIZ_CONTENT",
		100: "MULTI_LIVE_CONTENT",
		200: "COHOST_CONTENT",
	}
	BusinessCase_value = map[string]int32{
		"BUSINESS_NOT_SET":        0,
		"APPLY_BIZ_CONTENT":       1,
		"INVITE_BIZ_CONTENT":      2,
		"REPLY_BIZ_CONTENT":       3,
		"PERMIT_BIZ_CONTENT":      4,
		"JOIN_DIRECT_BIZ_CONTENT": 5,
		"KICK_OUT_BIZ_CONTENT":    6,
		"LIST_CHANGE_BIZ_CONTENT": 11,
		"MULTI_LIVE_CONTENT":      100,
		"COHOST_CONTENT":          200,
	}
)

func (x BusinessCase) Enum() *BusinessCase {
	p := new(BusinessCase)
	*p = x
	return p
}

func (x BusinessCase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessCase) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (BusinessCase) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x BusinessCase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessCase.Descriptor instead.
func (BusinessCase) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

type ReplyStatus int32

const (
	ReplyStatus_REPLY_STATUS_UNKNOWN                            ReplyStatus = 0
	ReplyStatus_REPLY_STATUS_AGREE                              ReplyStatus = 1
	ReplyStatus_REPLY_STATUS_REFUSE_PERSONALLY                  ReplyStatus = 2
	ReplyStatus_REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT            ReplyStatus = 3
	ReplyStatus_REPLY_STATUS_REFUSE_PROCESSING_INVITATION       ReplyStatus = 4
	ReplyStatus_REPLY_STATUS_REFUSE_BY_TIMEOUT                  ReplyStatus = 5
	ReplyStatus_REPLY_STATUS_REFUSE_EXCEPTION                   ReplyStatus = 6
	ReplyStatus_REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED        ReplyStatus = 7
	ReplyStatus_REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE          ReplyStatus = 8
	ReplyStatus_REPLY_STATUS_REFUSE_IN_MICROOM                  ReplyStatus = 9
	ReplyStatus_REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN             ReplyStatus = 10
	ReplyStatus_REPLY_STATUS_REFUSE_IN_MULTI_GUEST              ReplyStatus = 11
	ReplyStatus_REPLY_STATUS_REFUSE_PAUSE_LIVE                  ReplyStatus = 12
	ReplyStatus_REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING  ReplyStatus = 13
	ReplyStatus_REPLY_STATUS_REFUSE_DRAW_GUESSING               ReplyStatus = 14
	ReplyStatus_REPLY_STATUS_REFUSE_RANDOM_MATCHING             ReplyStatus = 15
	ReplyStatus_REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING         ReplyStatus = 16
	ReplyStatus_REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST ReplyStatus = 17
	ReplyStatus_REPLY_STATUS_REFUSE_COHOST_FINISHED             ReplyStatus = 18
	ReplyStatus_REPLY_STATUS_REFUSE_NOT_CONNECTED               ReplyStatus = 19
	ReplyStatus_REPLY_STATUS_REFUSE_LINKMIC_FULL                ReplyStatus = 20
	ReplyStatus_REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE            ReplyStatus = 21
	ReplyStatus_REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE     ReplyStatus = 22
	ReplyStatus_REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY      ReplyStatus = 23
	ReplyStatus_REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST            ReplyStatus = 24
	ReplyStatus_REPLY_STATUS_REFUSE_TOPIC_PAIRING               ReplyStatus = 25
)

// Enum value maps for ReplyStatus.
var (
	ReplyStatus_name = map[int32]string{
		0:  "REPLY_STATUS_UNKNOWN",
		1:  "REPLY_STATUS_AGREE",
		2:  "REPLY_STATUS_REFUSE_PERSONALLY",
		3:  "REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT",
		4:  "REPLY_STATUS_REFUSE_PROCESSING_INVITATION",
		5:  "REPLY_STATUS_REFUSE_BY_TIMEOUT",
		6:  "REPLY_STATUS_REFUSE_EXCEPTION",
		7:  "REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED",
		8:  "REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE",
		9:  "REPLY_STATUS_REFUSE_IN_MICROOM",
		10: "REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN",
		11: "REPLY_STATUS_REFUSE_IN_MULTI_GUEST",
		12: "REPLY_STATUS_REFUSE_PAUSE_LIVE",
		13: "REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING",
		14: "REPLY_STATUS_REFUSE_DRAW_GUESSING",
		15: "REPLY_STATUS_REFUSE_RANDOM_MATCHING",
		16: "REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING",
		17: "REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST",
		18: "REPLY_STATUS_REFUSE_COHOST_FINISHED",
		19: "REPLY_STATUS_REFUSE_NOT_CONNECTED",
		20: "REPLY_STATUS_REFUSE_LINKMIC_FULL",
		21: "REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE",
		22: "REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE",
		23: "REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY",
		24: "REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST",
		25: "REPLY_STATUS_REFUSE_TOPIC_PAIRING",
	}
	ReplyStatus_value = map[string]int32{
		"REPLY_STATUS_UNKNOWN":                            0,
		"REPLY_STATUS_AGREE":                              1,
		"REPLY_STATUS_REFUSE_PERSONALLY":                  2,
		"REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT":            3,
		"REPLY_STATUS_REFUSE_PROCESSING_INVITATION":       4,
		"REPLY_STATUS_REFUSE_BY_TIMEOUT":                  5,
		"REPLY_STATUS_REFUSE_EXCEPTION":                   6,
		"REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED":        7,
		"REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE":          8,
		"REPLY_STATUS_REFUSE_IN_MICROOM":                  9,
		"REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN":             10,
		"REPLY_STATUS_REFUSE_IN_MULTI_GUEST":              11,
		"REPLY_STATUS_REFUSE_PAUSE_LIVE":                  12,
		"REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING":  13,
		"REPLY_STATUS_REFUSE_DRAW_GUESSING":               14,
		"REPLY_STATUS_REFUSE_RANDOM_MATCHING":             15,
		"REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING":         16,
		"REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST": 17,
		"REPLY_STATUS_REFUSE_COHOST_FINISHED":             18,
		"REPLY_STATUS_REFUSE_NOT_CONNECTED":               19,
		"REPLY_STATUS_REFUSE_LINKMIC_FULL":                20,
		"REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE":            21,
		"REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE":     22,
		"REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY":      23,
		"REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST":            24,
		"REPLY_STATUS_REFUSE_TOPIC_PAIRING":               25,
	}
)

func (x ReplyStatus) Enum() *ReplyStatus {
	p := new(ReplyStatus)
	*p = x
	return p
}

func (x ReplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[12].Descriptor()
}

func (ReplyStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[12]
}

func (x ReplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplyStatus.Descriptor instead.
func (ReplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{12}
}

type SubscribeType int32

const (
	SubscribeType_SUBSCRIBETYPE_ONCE    SubscribeType = 0
	SubscribeType_SUBSCRIBETYPE_AUTO    SubscribeType = 1
	SubscribeType_SUBSCRIBETYPE_DEFAULT SubscribeType = 100
)

// Enum value maps for SubscribeType.
var (
	SubscribeType_name = map[int32]string{
		0:   "SUBSCRIBETYPE_ONCE",
		1:   "SUBSCRIBETYPE_AUTO",
		100: "SUBSCRIBETYPE_DEFAULT",
	}
	SubscribeType_value = map[string]int32{
		"SUBSCRIBETYPE_ONCE":    0,
		"SUBSCRIBETYPE_AUTO":    1,
		"SUBSCRIBETYPE_DEFAULT": 100,
	}
)

func (x SubscribeType) Enum() *SubscribeType {
	p := new(SubscribeType)
	*p = x
	return p
}

func (x SubscribeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[13].Descriptor()
}

func (SubscribeType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[13]
}

func (x SubscribeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeType.Descriptor instead.
func (SubscribeType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{13}
}

type OldSubscribeStatus int32

const (
	OldSubscribeStatus_OLDSUBSCRIBESTATUS_FIRST               OldSubscribeStatus = 0
	OldSubscribeStatus_OLDSUBSCRIBESTATUS_RESUB               OldSubscribeStatus = 1
	OldSubscribeStatus_OLDSUBSCRIBESTATUS_SUBINGRACEPERIOD    OldSubscribeStatus = 2
	OldSubscribeStatus_OLDSUBSCRIBESTATUS_SUBNOTINGRACEPERIOD OldSubscribeStatus = 3
	OldSubscribeStatus_OLDSUBSCRIBESTATUS_DEFAULT             OldSubscribeStatus = 100
)

// Enum value maps for OldSubscribeStatus.
var (
	OldSubscribeStatus_name = map[int32]string{
		0:   "OLDSUBSCRIBESTATUS_FIRST",
		1:   "OLDSUBSCRIBESTATUS_RESUB",
		2:   "OLDSUBSCRIBESTATUS_SUBINGRACEPERIOD",
		3:   "OLDSUBSCRIBESTATUS_SUBNOTINGRACEPERIOD",
		100: "OLDSUBSCRIBESTATUS_DEFAULT",
	}
	OldSubscribeStatus_value = map[string]int32{
		"OLDSUBSCRIBESTATUS_FIRST":               0,
		"OLDSUBSCRIBESTATUS_RESUB":               1,
		"OLDSUBSCRIBESTATUS_SUBINGRACEPERIOD":    2,
		"OLDSUBSCRIBESTATUS_SUBNOTINGRACEPERIOD": 3,
		"OLDSUBSCRIBESTATUS_DEFAULT":             100,
	}
)

func (x OldSubscribeStatus) Enum() *OldSubscribeStatus {
	p := new(OldSubscribeStatus)
	*p = x
	return p
}

func (x OldSubscribeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OldSubscribeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[14].Descriptor()
}

func (OldSubscribeStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[14]
}

func (x OldSubscribeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OldSubscribeStatus.Descriptor instead.
func (OldSubscribeStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{14}
}

type SubscribingStatus int32

const (
	SubscribingStatus_SUBSCRIBINGSTATUS_UNKNOWN          SubscribingStatus = 0
	SubscribingStatus_SUBSCRIBINGSTATUS_ONCE             SubscribingStatus = 1
	SubscribingStatus_SUBSCRIBINGSTATUS_CIRCLE           SubscribingStatus = 2
	SubscribingStatus_SUBSCRIBINGSTATUS_CIRCLECANCEL     SubscribingStatus = 3
	SubscribingStatus_SUBSCRIBINGSTATUS_REFUND           SubscribingStatus = 4
	SubscribingStatus_SUBSCRIBINGSTATUS_INGRACEPERIOD    SubscribingStatus = 5
	SubscribingStatus_SUBSCRIBINGSTATUS_NOTINGRACEPERIOD SubscribingStatus = 6
)

// Enum value maps for SubscribingStatus.
var (
	SubscribingStatus_name = map[int32]string{
		0: "SUBSCRIBINGSTATUS_UNKNOWN",
		1: "SUBSCRIBINGSTATUS_ONCE",
		2: "SUBSCRIBINGSTATUS_CIRCLE",
		3: "SUBSCRIBINGSTATUS_CIRCLECANCEL",
		4: "SUBSCRIBINGSTATUS_REFUND",
		5: "SUBSCRIBINGSTATUS_INGRACEPERIOD",
		6: "SUBSCRIBINGSTATUS_NOTINGRACEPERIOD",
	}
	SubscribingStatus_value = map[string]int32{
		"SUBSCRIBINGSTATUS_UNKNOWN":          0,
		"SUBSCRIBINGSTATUS_ONCE":             1,
		"SUBSCRIBINGSTATUS_CIRCLE":           2,
		"SUBSCRIBINGSTATUS_CIRCLECANCEL":     3,
		"SUBSCRIBINGSTATUS_REFUND":           4,
		"SUBSCRIBINGSTATUS_INGRACEPERIOD":    5,
		"SUBSCRIBINGSTATUS_NOTINGRACEPERIOD": 6,
	}
)

func (x SubscribingStatus) Enum() *SubscribingStatus {
	p := new(SubscribingStatus)
	*p = x
	return p
}

func (x SubscribingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[15].Descriptor()
}

func (SubscribingStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[15]
}

func (x SubscribingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribingStatus.Descriptor instead.
func (SubscribingStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{15}
}

type LinkmicStatus int32

const (
	LinkmicStatus_Disable                      LinkmicStatus = 0
	LinkmicStatus_Enable                       LinkmicStatus = 1
	LinkmicStatus_Just_Following               LinkmicStatus = 2
	LinkmicStatus_Multi_Linking                LinkmicStatus = 3
	LinkmicStatus_Multi_Linking_Only_Following LinkmicStatus = 4
)

// Enum value maps for LinkmicStatus.
var (
	LinkmicStatus_name = map[int32]string{
		0: "Disable",
		1: "Enable",
		2: "Just_Following",
		3: "Multi_Linking",
		4: "Multi_Linking_Only_Following",
	}
	LinkmicStatus_value = map[string]int32{
		"Disable":                      0,
		"Enable":                       1,
		"Just_Following":               2,
		"Multi_Linking":                3,
		"Multi_Linking_Only_Following": 4,
	}
)

func (x LinkmicStatus) Enum() *LinkmicStatus {
	p := new(LinkmicStatus)
	*p = x
	return p
}

func (x LinkmicStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkmicStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[16].Descriptor()
}

func (LinkmicStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[16]
}

func (x LinkmicStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkmicStatus.Descriptor instead.
func (LinkmicStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{16}
}

type MemberMessageAction int32

const (
	MemberMessageAction_UNKNOWN    MemberMessageAction = 0
	MemberMessageAction_JOINED     MemberMessageAction = 1 // User Joined the Stream
	MemberMessageAction_SUBSCRIBED MemberMessageAction = 3 // User Subscribed to the Host
)

// Enum value maps for MemberMessageAction.
var (
	MemberMessageAction_name = map[int32]string{
		0: "UNKNOWN",
		1: "JOINED",
		3: "SUBSCRIBED",
	}
	MemberMessageAction_value = map[string]int32{
		"UNKNOWN":    0,
		"JOINED":     1,
		"SUBSCRIBED": 3,
	}
)

func (x MemberMessageAction) Enum() *MemberMessageAction {
	p := new(MemberMessageAction)
	*p = x
	return p
}

func (x MemberMessageAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberMessageAction) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[17].Descriptor()
}

func (MemberMessageAction) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[17]
}

func (x MemberMessageAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberMessageAction.Descriptor instead.
func (MemberMessageAction) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{17}
}

type ControlAction int32

const (
	ControlAction_ControlActionUNKNOWN ControlAction = 0
	ControlAction_STREAM_PAUSED        ControlAction = 1 // Stream Paused by Host
	ControlAction_STREAM_UNPAUSED      ControlAction = 2
	ControlAction_STREAM_ENDED         ControlAction = 3 // Stream Ended by Host
)

// Enum value maps for ControlAction.
var (
	ControlAction_name = map[int32]string{
		0: "ControlActionUNKNOWN",
		1: "STREAM_PAUSED",
		2: "STREAM_UNPAUSED",
		3: "STREAM_ENDED",
	}
	ControlAction_value = map[string]int32{
		"ControlActionUNKNOWN": 0,
		"STREAM_PAUSED":        1,
		"STREAM_UNPAUSED":      2,
		"STREAM_ENDED":         3,
	}
)

func (x ControlAction) Enum() *ControlAction {
	p := new(ControlAction)
	*p = x
	return p
}

func (x ControlAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlAction) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[18].Descriptor()
}

func (ControlAction) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[18]
}

func (x ControlAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlAction.Descriptor instead.
func (ControlAction) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{18}
}

type LinkLayerMessageType int32

const (
	LinkLayerMessageType_Linker_Unknown          LinkLayerMessageType = 0
	LinkLayerMessageType_Linker_Create           LinkLayerMessageType = 1
	LinkLayerMessageType_Linker_Invite           LinkLayerMessageType = 2
	LinkLayerMessageType_Linker_Apply            LinkLayerMessageType = 3
	LinkLayerMessageType_Linker_Permit           LinkLayerMessageType = 4
	LinkLayerMessageType_Linker_Reply            LinkLayerMessageType = 5
	LinkLayerMessageType_Linker_Kick_Out         LinkLayerMessageType = 6
	LinkLayerMessageType_Linker_Cancel_Apply     LinkLayerMessageType = 7
	LinkLayerMessageType_Linker_Cancel_Invite    LinkLayerMessageType = 8
	LinkLayerMessageType_Linker_Leave            LinkLayerMessageType = 9
	LinkLayerMessageType_Linker_Finish           LinkLayerMessageType = 10
	LinkLayerMessageType_Linker_List_Change      LinkLayerMessageType = 11
	LinkLayerMessageType_Linker_Join_Direct      LinkLayerMessageType = 12
	LinkLayerMessageType_Linker_Join_Group       LinkLayerMessageType = 13
	LinkLayerMessageType_Linker_Permit_Group     LinkLayerMessageType = 14
	LinkLayerMessageType_Linker_Cancel_Group     LinkLayerMessageType = 15
	LinkLayerMessageType_Linker_Leave_Group      LinkLayerMessageType = 16
	LinkLayerMessageType_Linker_P2P_Group_Change LinkLayerMessageType = 17
	LinkLayerMessageType_Linker_Group_Change     LinkLayerMessageType = 18
)

// Enum value maps for LinkLayerMessageType.
var (
	LinkLayerMessageType_name = map[int32]string{
		0:  "Linker_Unknown",
		1:  "Linker_Create",
		2:  "Linker_Invite",
		3:  "Linker_Apply",
		4:  "Linker_Permit",
		5:  "Linker_Reply",
		6:  "Linker_Kick_Out",
		7:  "Linker_Cancel_Apply",
		8:  "Linker_Cancel_Invite",
		9:  "Linker_Leave",
		10: "Linker_Finish",
		11: "Linker_List_Change",
		12: "Linker_Join_Direct",
		13: "Linker_Join_Group",
		14: "Linker_Permit_Group",
		15: "Linker_Cancel_Group",
		16: "Linker_Leave_Group",
		17: "Linker_P2P_Group_Change",
		18: "Linker_Group_Change",
	}
	LinkLayerMessageType_value = map[string]int32{
		"Linker_Unknown":          0,
		"Linker_Create":           1,
		"Linker_Invite":           2,
		"Linker_Apply":            3,
		"Linker_Permit":           4,
		"Linker_Reply":            5,
		"Linker_Kick_Out":         6,
		"Linker_Cancel_Apply":     7,
		"Linker_Cancel_Invite":    8,
		"Linker_Leave":            9,
		"Linker_Finish":           10,
		"Linker_List_Change":      11,
		"Linker_Join_Direct":      12,
		"Linker_Join_Group":       13,
		"Linker_Permit_Group":     14,
		"Linker_Cancel_Group":     15,
		"Linker_Leave_Group":      16,
		"Linker_P2P_Group_Change": 17,
		"Linker_Group_Change":     18,
	}
)

func (x LinkLayerMessageType) Enum() *LinkLayerMessageType {
	p := new(LinkLayerMessageType)
	*p = x
	return p
}

func (x LinkLayerMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkLayerMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[19].Descriptor()
}

func (LinkLayerMessageType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[19]
}

func (x LinkLayerMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkLayerMessageType.Descriptor instead.
func (LinkLayerMessageType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{19}
}

type BarrageType int32

const (
	BarrageType_BarrageType_Unknown           BarrageType = 0
	BarrageType_EComOrdering                  BarrageType = 1
	BarrageType_EComBuying                    BarrageType = 2
	BarrageType_Normal                        BarrageType = 3
	BarrageType_Subscribe                     BarrageType = 4
	BarrageType_EventView                     BarrageType = 5
	BarrageType_EventRegistered               BarrageType = 6
	BarrageType_SubscribeGift                 BarrageType = 7
	BarrageType_UserUpgrade                   BarrageType = 8
	BarrageType_GradeUserEntranceNotification BarrageType = 9
	BarrageType_FansLevelUpgrade              BarrageType = 10
	BarrageType_FansLevelEntrance             BarrageType = 11
	BarrageType_GamePartnership               BarrageType = 12
)

// Enum value maps for BarrageType.
var (
	BarrageType_name = map[int32]string{
		0:  "BarrageType_Unknown",
		1:  "EComOrdering",
		2:  "EComBuying",
		3:  "Normal",
		4:  "Subscribe",
		5:  "EventView",
		6:  "EventRegistered",
		7:  "SubscribeGift",
		8:  "UserUpgrade",
		9:  "GradeUserEntranceNotification",
		10: "FansLevelUpgrade",
		11: "FansLevelEntrance",
		12: "GamePartnership",
	}
	BarrageType_value = map[string]int32{
		"BarrageType_Unknown":           0,
		"EComOrdering":                  1,
		"EComBuying":                    2,
		"Normal":                        3,
		"Subscribe":                     4,
		"EventView":                     5,
		"EventRegistered":               6,
		"SubscribeGift":                 7,
		"UserUpgrade":                   8,
		"GradeUserEntranceNotification": 9,
		"FansLevelUpgrade":              10,
		"FansLevelEntrance":             11,
		"GamePartnership":               12,
	}
)

func (x BarrageType) Enum() *BarrageType {
	p := new(BarrageType)
	*p = x
	return p
}

func (x BarrageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarrageType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[20].Descriptor()
}

func (BarrageType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[20]
}

func (x BarrageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BarrageType.Descriptor instead.
func (BarrageType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{20}
}

type EnvelopeBusinessType int32

const (
	EnvelopeBusinessType_BusinessTypeUnknown         EnvelopeBusinessType = 0
	EnvelopeBusinessType_BusinessTypeUserDiamond     EnvelopeBusinessType = 1
	EnvelopeBusinessType_BusinessTypePlatformDiamond EnvelopeBusinessType = 2
	EnvelopeBusinessType_BusinessTypePlatformShell   EnvelopeBusinessType = 3
	EnvelopeBusinessType_BusinessTypePortal          EnvelopeBusinessType = 4
	EnvelopeBusinessType_BusinessTypePlatformMerch   EnvelopeBusinessType = 5
	EnvelopeBusinessType_BusinessTypeEoYDiamond      EnvelopeBusinessType = 6
	EnvelopeBusinessType_BusinessTypeFanClubGtM      EnvelopeBusinessType = 7
)

// Enum value maps for EnvelopeBusinessType.
var (
	EnvelopeBusinessType_name = map[int32]string{
		0: "BusinessTypeUnknown",
		1: "BusinessTypeUserDiamond",
		2: "BusinessTypePlatformDiamond",
		3: "BusinessTypePlatformShell",
		4: "BusinessTypePortal",
		5: "BusinessTypePlatformMerch",
		6: "BusinessTypeEoYDiamond",
		7: "BusinessTypeFanClubGtM",
	}
	EnvelopeBusinessType_value = map[string]int32{
		"BusinessTypeUnknown":         0,
		"BusinessTypeUserDiamond":     1,
		"BusinessTypePlatformDiamond": 2,
		"BusinessTypePlatformShell":   3,
		"BusinessTypePortal":          4,
		"BusinessTypePlatformMerch":   5,
		"BusinessTypeEoYDiamond":      6,
		"BusinessTypeFanClubGtM":      7,
	}
)

func (x EnvelopeBusinessType) Enum() *EnvelopeBusinessType {
	p := new(EnvelopeBusinessType)
	*p = x
	return p
}

func (x EnvelopeBusinessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvelopeBusinessType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[21].Descriptor()
}

func (EnvelopeBusinessType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[21]
}

func (x EnvelopeBusinessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvelopeBusinessType.Descriptor instead.
func (EnvelopeBusinessType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{21}
}

type EnvelopeFollowShowStatus int32

const (
	EnvelopeFollowShowStatus_EnvelopeFollowShowUnknown EnvelopeFollowShowStatus = 0
	EnvelopeFollowShowStatus_EnvelopeFollowShow        EnvelopeFollowShowStatus = 1
	EnvelopeFollowShowStatus_EnvelopeFollowNotShow     EnvelopeFollowShowStatus = 2
)

// Enum value maps for EnvelopeFollowShowStatus.
var (
	EnvelopeFollowShowStatus_name = map[int32]string{
		0: "EnvelopeFollowShowUnknown",
		1: "EnvelopeFollowShow",
		2: "EnvelopeFollowNotShow",
	}
	EnvelopeFollowShowStatus_value = map[string]int32{
		"EnvelopeFollowShowUnknown": 0,
		"EnvelopeFollowShow":        1,
		"EnvelopeFollowNotShow":     2,
	}
)

func (x EnvelopeFollowShowStatus) Enum() *EnvelopeFollowShowStatus {
	p := new(EnvelopeFollowShowStatus)
	*p = x
	return p
}

func (x EnvelopeFollowShowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvelopeFollowShowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[22].Descriptor()
}

func (EnvelopeFollowShowStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[22]
}

func (x EnvelopeFollowShowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvelopeFollowShowStatus.Descriptor instead.
func (EnvelopeFollowShowStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{22}
}

type EnvelopeDisplay int32

const (
	EnvelopeDisplay_EnvelopeDisplayUnknown EnvelopeDisplay = 0
	EnvelopeDisplay_EnvelopeDisplayNew     EnvelopeDisplay = 1
	EnvelopeDisplay_EnvelopeDisplayHide    EnvelopeDisplay = 2
)

// Enum value maps for EnvelopeDisplay.
var (
	EnvelopeDisplay_name = map[int32]string{
		0: "EnvelopeDisplayUnknown",
		1: "EnvelopeDisplayNew",
		2: "EnvelopeDisplayHide",
	}
	EnvelopeDisplay_value = map[string]int32{
		"EnvelopeDisplayUnknown": 0,
		"EnvelopeDisplayNew":     1,
		"EnvelopeDisplayHide":    2,
	}
)

func (x EnvelopeDisplay) Enum() *EnvelopeDisplay {
	p := new(EnvelopeDisplay)
	*p = x
	return p
}

func (x EnvelopeDisplay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvelopeDisplay) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[23].Descriptor()
}

func (EnvelopeDisplay) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[23]
}

func (x EnvelopeDisplay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvelopeDisplay.Descriptor instead.
func (EnvelopeDisplay) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{23}
}

type CommonContentCase int32

const (
	CommonContentCase_COMMON_CONTENT_NOT_SET   CommonContentCase = 0
	CommonContentCase_CREATE_CHANNEL_CONTENT   CommonContentCase = 100
	CommonContentCase_LIST_CHANGE_CONTENT      CommonContentCase = 102
	CommonContentCase_INVITE_CONTENT           CommonContentCase = 103
	CommonContentCase_APPLY_CONTENT            CommonContentCase = 104
	CommonContentCase_PERMIT_APPLY_CONTENT     CommonContentCase = 105
	CommonContentCase_REPLY_INVITE_CONTENT     CommonContentCase = 106
	CommonContentCase_KICK_OUT_CONTENT         CommonContentCase = 107
	CommonContentCase_CANCEL_APPLY_CONTENT     CommonContentCase = 108
	CommonContentCase_CANCEL_INVITE_CONTENT    CommonContentCase = 109
	CommonContentCase_LEAVE_CONTENT            CommonContentCase = 110
	CommonContentCase_FINISH_CONTENT           CommonContentCase = 111
	CommonContentCase_JOIN_DIRECT_CONTENT      CommonContentCase = 112
	CommonContentCase_JOIN_GROUP_CONTENT       CommonContentCase = 113
	CommonContentCase_PERMIT_GROUP_CONTENT     CommonContentCase = 114
	CommonContentCase_CANCEL_GROUP_CONTENT     CommonContentCase = 115
	CommonContentCase_LEAVE_GROUP_CONTENT      CommonContentCase = 116
	CommonContentCase_P2P_GROUP_CHANGE_CONTENT CommonContentCase = 117
	CommonContentCase_GROUP_CHANGE_CONTENT     CommonContentCase = 118
)

// Enum value maps for CommonContentCase.
var (
	CommonContentCase_name = map[int32]string{
		0:   "COMMON_CONTENT_NOT_SET",
		100: "CREATE_CHANNEL_CONTENT",
		102: "LIST_CHANGE_CONTENT",
		103: "INVITE_CONTENT",
		104: "APPLY_CONTENT",
		105: "PERMIT_APPLY_CONTENT",
		106: "REPLY_INVITE_CONTENT",
		107: "KICK_OUT_CONTENT",
		108: "CANCEL_APPLY_CONTENT",
		109: "CANCEL_INVITE_CONTENT",
		110: "LEAVE_CONTENT",
		111: "FINISH_CONTENT",
		112: "JOIN_DIRECT_CONTENT",
		113: "JOIN_GROUP_CONTENT",
		114: "PERMIT_GROUP_CONTENT",
		115: "CANCEL_GROUP_CONTENT",
		116: "LEAVE_GROUP_CONTENT",
		117: "P2P_GROUP_CHANGE_CONTENT",
		118: "GROUP_CHANGE_CONTENT",
	}
	CommonContentCase_value = map[string]int32{
		"COMMON_CONTENT_NOT_SET":   0,
		"CREATE_CHANNEL_CONTENT":   100,
		"LIST_CHANGE_CONTENT":      102,
		"INVITE_CONTENT":           103,
		"APPLY_CONTENT":            104,
		"PERMIT_APPLY_CONTENT":     105,
		"REPLY_INVITE_CONTENT":     106,
		"KICK_OUT_CONTENT":         107,
		"CANCEL_APPLY_CONTENT":     108,
		"CANCEL_INVITE_CONTENT":    109,
		"LEAVE_CONTENT":            110,
		"FINISH_CONTENT":           111,
		"JOIN_DIRECT_CONTENT":      112,
		"JOIN_GROUP_CONTENT":       113,
		"PERMIT_GROUP_CONTENT":     114,
		"CANCEL_GROUP_CONTENT":     115,
		"LEAVE_GROUP_CONTENT":      116,
		"P2P_GROUP_CHANGE_CONTENT": 117,
		"GROUP_CHANGE_CONTENT":     118,
	}
)

func (x CommonContentCase) Enum() *CommonContentCase {
	p := new(CommonContentCase)
	*p = x
	return p
}

func (x CommonContentCase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonContentCase) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[24].Descriptor()
}

func (CommonContentCase) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[24]
}

func (x CommonContentCase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonContentCase.Descriptor instead.
func (CommonContentCase) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{24}
}

type LinkMessageType int32

const (
	LinkMessageType_TYPE_LINKER_UNKNOWN                LinkMessageType = 0
	LinkMessageType_TYPE_LINKER_CREATE                 LinkMessageType = 1
	LinkMessageType_TYPE_LINKER_CLOSE                  LinkMessageType = 2
	LinkMessageType_TYPE_LINKER_INVITE                 LinkMessageType = 3
	LinkMessageType_TYPE_LINKER_APPLY                  LinkMessageType = 4
	LinkMessageType_TYPE_LINKER_REPLY                  LinkMessageType = 5
	LinkMessageType_TYPE_LINKER_ENTER                  LinkMessageType = 6
	LinkMessageType_TYPE_LINKER_LEAVE                  LinkMessageType = 7
	LinkMessageType_TYPE_LINKER_PERMIT                 LinkMessageType = 8
	LinkMessageType_TYPE_LINKER_CANCEL_INVITE          LinkMessageType = 9
	LinkMessageType_TYPE_LINKER_WAITING_LIST_CHANGE    LinkMessageType = 10
	LinkMessageType_TYPE_LINKER_LINKED_LIST_CHANGE     LinkMessageType = 11
	LinkMessageType_TYPE_LINKER_UPDATE_USER            LinkMessageType = 12
	LinkMessageType_TYPE_LINKER_KICK_OUT               LinkMessageType = 13
	LinkMessageType_TYPE_LINKER_CANCEL_APPLY           LinkMessageType = 14
	LinkMessageType_TYPE_LINKER_MUTE                   LinkMessageType = 15
	LinkMessageType_TYPE_LINKER_MATCH                  LinkMessageType = 16
	LinkMessageType_TYPE_LINKER_UPDATE_USER_SETTING    LinkMessageType = 17
	LinkMessageType_TYPE_LINKER_MIC_IDX_UPDATE         LinkMessageType = 18
	LinkMessageType_TYPE_LINKER_LEAVE_V2               LinkMessageType = 19
	LinkMessageType_TYPE_LINKER_WAITING_LIST_CHANGE_V2 LinkMessageType = 20
	LinkMessageType_TYPE_LINKER_LINKED_LIST_CHANGE_V2  LinkMessageType = 21
	LinkMessageType_TYPE_LINKER_COHOST_LIST_CHANGE     LinkMessageType = 22
	LinkMessageType_TYPE_LINKER_MEDIA_CHANGE           LinkMessageType = 23
	LinkMessageType_TYPE_LINKER_ACCEPT_NOTICE          LinkMessageType = 24
	LinkMessageType_TYPE_LINKER_SYS_KICK_OUT           LinkMessageType = 101
	LinkMessageType_TYPE_LINKMIC_USER_TOAST            LinkMessageType = 102
)

// Enum value maps for LinkMessageType.
var (
	LinkMessageType_name = map[int32]string{
		0:   "TYPE_LINKER_UNKNOWN",
		1:   "TYPE_LINKER_CREATE",
		2:   "TYPE_LINKER_CLOSE",
		3:   "TYPE_LINKER_INVITE",
		4:   "TYPE_LINKER_APPLY",
		5:   "TYPE_LINKER_REPLY",
		6:   "TYPE_LINKER_ENTER",
		7:   "TYPE_LINKER_LEAVE",
		8:   "TYPE_LINKER_PERMIT",
		9:   "TYPE_LINKER_CANCEL_INVITE",
		10:  "TYPE_LINKER_WAITING_LIST_CHANGE",
		11:  "TYPE_LINKER_LINKED_LIST_CHANGE",
		12:  "TYPE_LINKER_UPDATE_USER",
		13:  "TYPE_LINKER_KICK_OUT",
		14:  "TYPE_LINKER_CANCEL_APPLY",
		15:  "TYPE_LINKER_MUTE",
		16:  "TYPE_LINKER_MATCH",
		17:  "TYPE_LINKER_UPDATE_USER_SETTING",
		18:  "TYPE_LINKER_MIC_IDX_UPDATE",
		19:  "TYPE_LINKER_LEAVE_V2",
		20:  "TYPE_LINKER_WAITING_LIST_CHANGE_V2",
		21:  "TYPE_LINKER_LINKED_LIST_CHANGE_V2",
		22:  "TYPE_LINKER_COHOST_LIST_CHANGE",
		23:  "TYPE_LINKER_MEDIA_CHANGE",
		24:  "TYPE_LINKER_ACCEPT_NOTICE",
		101: "TYPE_LINKER_SYS_KICK_OUT",
		102: "TYPE_LINKMIC_USER_TOAST",
	}
	LinkMessageType_value = map[string]int32{
		"TYPE_LINKER_UNKNOWN":                0,
		"TYPE_LINKER_CREATE":                 1,
		"TYPE_LINKER_CLOSE":                  2,
		"TYPE_LINKER_INVITE":                 3,
		"TYPE_LINKER_APPLY":                  4,
		"TYPE_LINKER_REPLY":                  5,
		"TYPE_LINKER_ENTER":                  6,
		"TYPE_LINKER_LEAVE":                  7,
		"TYPE_LINKER_PERMIT":                 8,
		"TYPE_LINKER_CANCEL_INVITE":          9,
		"TYPE_LINKER_WAITING_LIST_CHANGE":    10,
		"TYPE_LINKER_LINKED_LIST_CHANGE":     11,
		"TYPE_LINKER_UPDATE_USER":            12,
		"TYPE_LINKER_KICK_OUT":               13,
		"TYPE_LINKER_CANCEL_APPLY":           14,
		"TYPE_LINKER_MUTE":                   15,
		"TYPE_LINKER_MATCH":                  16,
		"TYPE_LINKER_UPDATE_USER_SETTING":    17,
		"TYPE_LINKER_MIC_IDX_UPDATE":         18,
		"TYPE_LINKER_LEAVE_V2":               19,
		"TYPE_LINKER_WAITING_LIST_CHANGE_V2": 20,
		"TYPE_LINKER_LINKED_LIST_CHANGE_V2":  21,
		"TYPE_LINKER_COHOST_LIST_CHANGE":     22,
		"TYPE_LINKER_MEDIA_CHANGE":           23,
		"TYPE_LINKER_ACCEPT_NOTICE":          24,
		"TYPE_LINKER_SYS_KICK_OUT":           101,
		"TYPE_LINKMIC_USER_TOAST":            102,
	}
)

func (x LinkMessageType) Enum() *LinkMessageType {
	p := new(LinkMessageType)
	*p = x
	return p
}

func (x LinkMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[25].Descriptor()
}

func (LinkMessageType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[25]
}

func (x LinkMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkMessageType.Descriptor instead.
func (LinkMessageType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{25}
}

type MessageType int32

const (
	MessageType_MESSAGETYPE_SUBSUCCESS                     MessageType = 0
	MessageType_MESSAGETYPE_ANCHORREMINDER                 MessageType = 1
	MessageType_MESSAGETYPE_ENTERROOMEXPIRESOON            MessageType = 2
	MessageType_MESSAGETYPE_SUBGOALCREATETOANCHOR          MessageType = 3
	MessageType_MESSAGETYPE_SUBGOALCOMPLETETOAUDIENCE      MessageType = 4
	MessageType_MESSAGETYPE_SUBGOALCOMPLETETOANCHOR        MessageType = 5
	MessageType_MESSAGETYPE_SUBGIFTTIKTOK2USERNOTICE       MessageType = 6
	MessageType_MESSAGETYPE_SUBGIFTTIKTOK2ANCHORNOTICE     MessageType = 7
	MessageType_MESSAGETYPE_SUBGIFTTRECEIVESENDNOTICE      MessageType = 8
	MessageType_MESSAGETYPE_SUBGIFTSENDSUCCEEDROOMMESSAGE  MessageType = 9
	MessageType_MESSAGETYPE_SUBGIFTSENDSUCCEEDANCHORNOTICE MessageType = 10
	MessageType_MESSAGETYPE_SUBGIFTLOWVERSIONUPGRADENOTICE MessageType = 11
	MessageType_MESSAGETYPE_SUBGIFTUSERBUYAUTHNOTICE       MessageType = 12
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MESSAGETYPE_SUBSUCCESS",
		1:  "MESSAGETYPE_ANCHORREMINDER",
		2:  "MESSAGETYPE_ENTERROOMEXPIRESOON",
		3:  "MESSAGETYPE_SUBGOALCREATETOANCHOR",
		4:  "MESSAGETYPE_SUBGOALCOMPLETETOAUDIENCE",
		5:  "MESSAGETYPE_SUBGOALCOMPLETETOANCHOR",
		6:  "MESSAGETYPE_SUBGIFTTIKTOK2USERNOTICE",
		7:  "MESSAGETYPE_SUBGIFTTIKTOK2ANCHORNOTICE",
		8:  "MESSAGETYPE_SUBGIFTTRECEIVESENDNOTICE",
		9:  "MESSAGETYPE_SUBGIFTSENDSUCCEEDROOMMESSAGE",
		10: "MESSAGETYPE_SUBGIFTSENDSUCCEEDANCHORNOTICE",
		11: "MESSAGETYPE_SUBGIFTLOWVERSIONUPGRADENOTICE",
		12: "MESSAGETYPE_SUBGIFTUSERBUYAUTHNOTICE",
	}
	MessageType_value = map[string]int32{
		"MESSAGETYPE_SUBSUCCESS":                     0,
		"MESSAGETYPE_ANCHORREMINDER":                 1,
		"MESSAGETYPE_ENTERROOMEXPIRESOON":            2,
		"MESSAGETYPE_SUBGOALCREATETOANCHOR":          3,
		"MESSAGETYPE_SUBGOALCOMPLETETOAUDIENCE":      4,
		"MESSAGETYPE_SUBGOALCOMPLETETOANCHOR":        5,
		"MESSAGETYPE_SUBGIFTTIKTOK2USERNOTICE":       6,
		"MESSAGETYPE_SUBGIFTTIKTOK2ANCHORNOTICE":     7,
		"MESSAGETYPE_SUBGIFTTRECEIVESENDNOTICE":      8,
		"MESSAGETYPE_SUBGIFTSENDSUCCEEDROOMMESSAGE":  9,
		"MESSAGETYPE_SUBGIFTSENDSUCCEEDANCHORNOTICE": 10,
		"MESSAGETYPE_SUBGIFTLOWVERSIONUPGRADENOTICE": 11,
		"MESSAGETYPE_SUBGIFTUSERBUYAUTHNOTICE":       12,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[26].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[26]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{26}
}

type Scene int32

const (
	Scene_SCENE_UNKNOWN    Scene = 0
	Scene_SCENE_CO_HOST    Scene = 2
	Scene_SCENE_MULTI_LIVE Scene = 4
)

// Enum value maps for Scene.
var (
	Scene_name = map[int32]string{
		0: "SCENE_UNKNOWN",
		2: "SCENE_CO_HOST",
		4: "SCENE_MULTI_LIVE",
	}
	Scene_value = map[string]int32{
		"SCENE_UNKNOWN":    0,
		"SCENE_CO_HOST":    2,
		"SCENE_MULTI_LIVE": 4,
	}
)

func (x Scene) Enum() *Scene {
	p := new(Scene)
	*p = x
	return p
}

func (x Scene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scene) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[27].Descriptor()
}

func (Scene) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[27]
}

func (x Scene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scene.Descriptor instead.
func (Scene) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{27}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x85, 0x01,
	0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x55, 0x44, 0x49, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44,
	0x44, 0x45, 0x4e, 0x10, 0x04, 0x2a, 0x3a, 0x0a, 0x09, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x57, 0x49, 0x54, 0x48, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0x5b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x02, 0x2a, 0x52,
	0x0a, 0x10, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x57, 0x41, 0x56, 0x45,
	0x10, 0x01, 0x2a, 0x29, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x72, 0x0a,
	0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49,
	0x4e, 0x4b, 0x4d, 0x49, 0x43, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4c, 0x49, 0x4e, 0x4b, 0x4d, 0x49, 0x43, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x42, 0x59, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x01, 0x2a, 0x7c, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x4d, 0x59, 0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x4d, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0x2a, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x37, 0x0a, 0x0b, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x47,
	0x52, 0x45, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x02, 0x2a, 0xfd, 0x01, 0x0a, 0x0d, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x55,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x49,
	0x43, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x55,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x54, 0x43, 0x5f, 0x4c, 0x4f, 0x53,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x42, 0x59, 0x5f, 0x50, 0x55, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42,
	0x59, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x49, 0x43,
	0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x10, 0x06, 0x2a, 0x5a, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x83, 0x02, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x42,
	0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x49, 0x5a, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10,
	0x64, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x4f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x10, 0xc8, 0x01, 0x2a, 0xae, 0x08, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x59, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x53, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49,
	0x4e, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55,
	0x53, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x0c, 0x12,
	0x32, 0x0a, 0x2e, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x49, 0x4e,
	0x47, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x47, 0x55, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e,
	0x47, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x10,
	0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x4f, 0x48,
	0x4f, 0x53, 0x54, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x4d, 0x49, 0x43, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55,
	0x53, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x10, 0x16, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x10, 0x17, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x18,
	0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x50, 0x41,
	0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x2a, 0x5a, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x64, 0x2a, 0xc5, 0x01, 0x0a, 0x12, 0x4f, 0x6c, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x4c,
	0x44, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x4c, 0x44, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x42, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x4c, 0x44, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x42,
	0x49, 0x4e, 0x47, 0x52, 0x41, 0x43, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x4f, 0x4c, 0x44, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x52,
	0x41, 0x43, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x4c, 0x44, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x64, 0x2a, 0xfb, 0x01, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x41, 0x43, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10,
	0x05, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x41, 0x43,
	0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x06, 0x2a, 0x71, 0x0a, 0x0d, 0x4c, 0x69, 0x6e,
	0x6b, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x75, 0x73, 0x74, 0x5f, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4f, 0x6e, 0x6c, 0x79,
	0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x2a, 0x3e, 0x0a, 0x13,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xbb, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x5f, 0x4f, 0x75, 0x74, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x0b,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x5f,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0d, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x0f, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x5f, 0x50, 0x32, 0x50, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x12, 0x2a,
	0x90, 0x02, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x43, 0x6f, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x43,
	0x6f, 0x6d, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x69, 0x66, 0x74, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x08, 0x12, 0x21, 0x0a,
	0x1d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x61, 0x6e, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x10, 0x0c, 0x2a, 0xfb, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6f, 0x59, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x47, 0x74, 0x4d, 0x10, 0x07,
	0x2a, 0x6c, 0x0a, 0x18, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68,
	0x6f, 0x77, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f,
	0x77, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x02, 0x2a, 0x5e,
	0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x65, 0x77, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x64, 0x65, 0x10, 0x02, 0x2a, 0xe7,
	0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x64, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x10, 0x66, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x10, 0x69, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x6a,
	0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x10, 0x6b, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x6c,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x6e, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x70, 0x12, 0x16, 0x0a, 0x12, 0x4a,
	0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x10, 0x71, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x72, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x41, 0x56, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x74,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x32, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x75, 0x12, 0x18,
	0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x76, 0x2a, 0x99, 0x06, 0x0a, 0x0f, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x59, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52,
	0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x08,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x09, 0x12,
	0x23, 0x0a, 0x1f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x0d, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x0e, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x54,
	0x45, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x11, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x4d,
	0x49, 0x43, 0x5f, 0x49, 0x44, 0x58, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x5f, 0x56, 0x32, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x56, 0x32, 0x10,
	0x14, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x56, 0x32, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x4d, 0x49, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x41,
	0x53, 0x54, 0x10, 0x66, 0x2a, 0xa3, 0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x4f, 0x4d, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x53,
	0x4f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x4f, 0x41, 0x4c, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x54, 0x4f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x47,
	0x4f, 0x41, 0x4c, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x54, 0x4f, 0x41, 0x55, 0x44,
	0x49, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x4f, 0x41, 0x4c, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x54, 0x4f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x10, 0x05,
	0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x47, 0x49, 0x46, 0x54, 0x54, 0x49, 0x4b, 0x54, 0x4f, 0x4b, 0x32, 0x55, 0x53,
	0x45, 0x52, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x49, 0x46,
	0x54, 0x54, 0x49, 0x4b, 0x54, 0x4f, 0x4b, 0x32, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x49, 0x46, 0x54, 0x54, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x53, 0x45, 0x4e, 0x44, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10,
	0x08, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x47, 0x49, 0x46, 0x54, 0x53, 0x45, 0x4e, 0x44, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x52, 0x4f, 0x4f, 0x4d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x09,
	0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x47, 0x49, 0x46, 0x54, 0x53, 0x45, 0x4e, 0x44, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x45, 0x44, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x0a,
	0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x47, 0x49, 0x46, 0x54, 0x4c, 0x4f, 0x57, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x0b,
	0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x47, 0x49, 0x46, 0x54, 0x55, 0x53, 0x45, 0x52, 0x42, 0x55, 0x59, 0x41, 0x55,
	0x54, 0x48, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x2a, 0x43, 0x0a, 0x05, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4f, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x04, 0x42,
	0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x67, 0x6f, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x6c, 0x69, 0x76, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 28)
var file_enums_proto_goTypes = []any{
	(AuditStatus)(0),               // 0: AuditStatus
	(EmoteType)(0),                 // 1: EmoteType
	(ContentSource)(0),             // 2: ContentSource
	(EmotePrivateType)(0),          // 3: EmotePrivateType
	(TextType)(0),                  // 4: TextType
	(LinkmicApplierSortSetting)(0), // 5: LinkmicApplierSortSetting
	(LinkMicBattleStatus)(0),       // 6: LinkMicBattleStatus
	(HashtagNamespace)(0),          // 7: HashtagNamespace
	(AgreeStatus)(0),               // 8: AgreeStatus
	(KickoutReason)(0),             // 9: KickoutReason
	(GroupStatus)(0),               // 10: GroupStatus
	(BusinessCase)(0),              // 11: BusinessCase
	(ReplyStatus)(0),               // 12: ReplyStatus
	(SubscribeType)(0),             // 13: SubscribeType
	(OldSubscribeStatus)(0),        // 14: OldSubscribeStatus
	(SubscribingStatus)(0),         // 15: SubscribingStatus
	(LinkmicStatus)(0),             // 16: LinkmicStatus
	(MemberMessageAction)(0),       // 17: MemberMessageAction
	(ControlAction)(0),             // 18: ControlAction
	(LinkLayerMessageType)(0),      // 19: LinkLayerMessageType
	(BarrageType)(0),               // 20: BarrageType
	(EnvelopeBusinessType)(0),      // 21: EnvelopeBusinessType
	(EnvelopeFollowShowStatus)(0),  // 22: EnvelopeFollowShowStatus
	(EnvelopeDisplay)(0),           // 23: EnvelopeDisplay
	(CommonContentCase)(0),         // 24: CommonContentCase
	(LinkMessageType)(0),           // 25: LinkMessageType
	(MessageType)(0),               // 26: MessageType
	(Scene)(0),                     // 27: Scene
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      28,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
